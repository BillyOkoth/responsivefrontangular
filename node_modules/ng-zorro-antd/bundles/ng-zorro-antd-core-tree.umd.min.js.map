{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ng-zorro-antd/core/tree/nz-tree-base-node.ts","ng://ng-zorro-antd/core/tree/nz-tree-base-util.ts","ng://ng-zorro-antd/core/tree/nz-tree-base.service.ts","ng://ng-zorro-antd/core/tree/nz-tree-service.resolver.ts","ng://ng-zorro-antd/core/tree/nz-tree-base.ts"],"names":["__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","NzTreeNode","option","parent","service","_this","this","level","origin","key","parentNode","_title","title","_icon","icon","_isLeaf","isLeaf","_children","_isChecked","checked","_isSelectable","disabled","selectable","_isDisabled","_isDisableCheckbox","disableCheckbox","_isExpanded","expanded","_isHalfChecked","_isSelected","selected","_isLoading","isMatched","children","forEach","nodeOptions","treeService","isCheckStrictly","Object","defineProperty","prototype","update","_isAllChecked","afterValueChange","warnDeprecation","setSyncChecked","halfChecked","setChecked","conduct","isChecked","isAllChecked","isHalfChecked","setExpanded","setSelected","isDisabled","isSelected","getParentNode","getChildren","addChildren","childPos","node","refreshLevel","c","child","splice","map","v","isLoading","clearChildren","remove","filter","setCheckedNodeList","setHalfCheckedNodeList","setExpandedNodeList","setNodeActive","afterRemove","flattenTreeData","rootNodes","getExpandedNodeList","component","markForCheck","isCheckDisabled","isDisableCheckbox","isInArray","needle","haystack","indexOf","getPosition","index","getKey","pos","treeNodeList","expandedKeys","expandedKeySet","Set","flattenList","dig","list","treeNode","mergedKey","isStart","isEnd","flattenNode","data","has","isExpanded","NzTreeBaseService","DRAG_SIDE_RANGE","DRAG_MIN_GAP","isMultiple","flattenNodes$","BehaviorSubject","selectedNodeList","expandedNodeList","checkedNodeList","halfCheckedNodeList","matchedNodeList","initTree","nzNodes","item","getSelectedNode","selectedNode","getSelectedNodeList","conductNodeState","getCheckedNodeList","getHalfCheckedNodeList","getMatchedNodeList","isArrayOfNzTreeNode","every","setSelectedNode","setSelectedNodeList","getIndexOfArray","type","resultNodesList","isIgnore_1","findIndex","setMatchedNodeList","refreshCheckState","conductUp","conductDown","some","nodes","loopNode","refreshDragNode","resetNodeLevel","_b","_c","calcDropPosition","event","clientY","_a","srcElement","top","bottom","height","des","Math","max","dropAndApply","targetNode","dragPos","targetParent","isSelectedRootNode","tIndex","targetIndex","formatEvent","eventName","emitStructure","assign","dragNode","selectedKeys","keys","checkedKeys","matchedKeys","conductCheck","checkStrictly","calc","conductExpandedKeys","conductSelectedKeys","isMulti","expandNodeAllParentBySearch","canHide","Injectable","NzTreeHigherOrderServiceToken","InjectionToken","NzTreeBase","nzTreeService","coerceTreeNodes","getTreeNodes","getTreeNodeByKey","getNode","find"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { warnDeprecation } from 'ng-zorro-antd/core/logger';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { NzTreeNodeBaseComponent } from './nz-tree-base.definitions';\nimport { NzTreeBaseService } from './nz-tree-base.service';\n\nexport type NzTreeNodeKey = string | number;\n\nexport interface FlattenNode {\n  parent: FlattenNode | null;\n  children: FlattenNode[];\n  pos: string;\n  data: NzTreeNode;\n  isStart: boolean[];\n  isEnd: boolean[];\n}\n\nexport interface NzTreeNodeOptions {\n  title: string;\n  key: string;\n  icon?: string;\n  isLeaf?: boolean;\n  checked?: boolean;\n  selected?: boolean;\n  selectable?: boolean;\n  disabled?: boolean;\n  disableCheckbox?: boolean;\n  expanded?: boolean;\n  children?: NzTreeNodeOptions[];\n\n  [key: string]: NzSafeAny;\n}\n\nexport class NzTreeNode {\n  private _title: string;\n  key: string;\n  level: number = 0;\n  origin: NzTreeNodeOptions;\n  // Parent Node\n  parentNode: NzTreeNode | null;\n  private _icon: string;\n  private _children: NzTreeNode[];\n  private _isLeaf: boolean;\n  private _isChecked: boolean;\n  /**\n   * @deprecated Maybe removed in next major version, use isChecked instead\n   */\n  private _isAllChecked: boolean;\n  private _isSelectable: boolean;\n  private _isDisabled: boolean;\n  private _isDisableCheckbox: boolean;\n  private _isExpanded: boolean;\n  private _isHalfChecked: boolean;\n  private _isSelected: boolean;\n  private _isLoading: boolean;\n  canHide: boolean;\n  isMatched: boolean;\n\n  service: NzTreeBaseService | null;\n  component: NzTreeNodeBaseComponent;\n\n  /** New added in Tree for easy data access */\n  isStart?: boolean[];\n  isEnd?: boolean[];\n\n  get treeService(): NzTreeBaseService | null {\n    return this.service || (this.parentNode && this.parentNode.treeService);\n  }\n\n  /**\n   * Init nzTreeNode\n   * @param option: user's input\n   * @param parent\n   * @param service: base nzTreeService\n   */\n  constructor(option: NzTreeNodeOptions | NzTreeNode, parent: NzTreeNode | null = null, service: NzTreeBaseService | null = null) {\n    if (option instanceof NzTreeNode) {\n      return option;\n    }\n    this.service = service || null;\n    this.origin = option;\n    this.key = option.key;\n    this.parentNode = parent;\n    this._title = option.title || '---';\n    this._icon = option.icon || '';\n    this._isLeaf = option.isLeaf || false;\n    this._children = [];\n    // option params\n    this._isChecked = option.checked || false;\n    this._isSelectable = option.disabled || option.selectable !== false;\n    this._isDisabled = option.disabled || false;\n    this._isDisableCheckbox = option.disableCheckbox || false;\n    this._isExpanded = option.isLeaf ? false : option.expanded || false;\n    this._isHalfChecked = false;\n    this._isSelected = (!option.disabled && option.selected) || false;\n    this._isLoading = false;\n    this.isMatched = false;\n\n    /**\n     * parent's checked status will affect children while initializing\n     */\n    if (parent) {\n      this.level = parent.level + 1;\n    } else {\n      this.level = 0;\n    }\n    if (typeof option.children !== 'undefined' && option.children !== null) {\n      option.children.forEach(nodeOptions => {\n        const s = this.treeService;\n        if (s && !s.isCheckStrictly && option.checked && !option.disabled && !nodeOptions.disabled && !nodeOptions.disableCheckbox) {\n          nodeOptions.checked = option.checked;\n        }\n        this._children.push(new NzTreeNode(nodeOptions, this));\n      });\n    }\n  }\n\n  /**\n   * auto generate\n   * get\n   * set\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  set title(value: string) {\n    this._title = value;\n    this.update();\n  }\n\n  get icon(): string {\n    return this._icon;\n  }\n\n  set icon(value: string) {\n    this._icon = value;\n    this.update();\n  }\n\n  get children(): NzTreeNode[] {\n    return this._children;\n  }\n\n  set children(value: NzTreeNode[]) {\n    this._children = value;\n    this.update();\n  }\n\n  get isLeaf(): boolean {\n    return this._isLeaf;\n  }\n\n  set isLeaf(value: boolean) {\n    this._isLeaf = value;\n    this.update();\n  }\n\n  get isChecked(): boolean {\n    return this._isChecked;\n  }\n\n  set isChecked(value: boolean) {\n    this._isChecked = value;\n    this._isAllChecked = value;\n    this.origin.checked = value;\n    this.afterValueChange('isChecked');\n  }\n\n  get isAllChecked(): boolean {\n    return this._isAllChecked;\n  }\n\n  /**\n   * @deprecated Maybe removed in next major version, use `isChecked` instead.\n   */\n  set isAllChecked(value: boolean) {\n    warnDeprecation(`'isAllChecked' is going to be removed in 9.0.0. Please use 'isChecked' instead.`);\n    this._isAllChecked = value;\n  }\n\n  get isHalfChecked(): boolean {\n    return this._isHalfChecked;\n  }\n\n  set isHalfChecked(value: boolean) {\n    this._isHalfChecked = value;\n    this.afterValueChange('isHalfChecked');\n  }\n\n  get isSelectable(): boolean {\n    return this._isSelectable;\n  }\n\n  set isSelectable(value: boolean) {\n    this._isSelectable = value;\n    this.update();\n  }\n\n  get isDisabled(): boolean {\n    return this._isDisabled;\n  }\n\n  set isDisabled(value: boolean) {\n    this._isDisabled = value;\n    this.update();\n  }\n\n  get isDisableCheckbox(): boolean {\n    return this._isDisableCheckbox;\n  }\n\n  set isDisableCheckbox(value: boolean) {\n    this._isDisableCheckbox = value;\n    this.update();\n  }\n\n  get isExpanded(): boolean {\n    return this._isExpanded;\n  }\n\n  set isExpanded(value: boolean) {\n    this._isExpanded = value;\n    this.origin.expanded = value;\n    this.afterValueChange('isExpanded');\n    this.afterValueChange('reRender');\n  }\n\n  get isSelected(): boolean {\n    return this._isSelected;\n  }\n\n  set isSelected(value: boolean) {\n    this._isSelected = value;\n    this.origin.selected = value;\n    this.afterValueChange('isSelected');\n  }\n\n  get isLoading(): boolean {\n    return this._isLoading;\n  }\n\n  set isLoading(value: boolean) {\n    this._isLoading = value;\n    this.update();\n  }\n\n  public setSyncChecked(checked: boolean = false, halfChecked: boolean = false): void {\n    this.setChecked(checked, halfChecked);\n    if (this.treeService && !this.treeService.isCheckStrictly) {\n      this.treeService.conduct(this);\n    }\n  }\n\n  /**\n   * @deprecated Maybe removed in next major version, use `isChecked` instead.\n   */\n  public setChecked(checked: boolean = false, halfChecked: boolean = false): void {\n    warnDeprecation(`'setChecked' is going to be removed in 9.0.0. Please use 'isChecked' instead.`);\n    this.origin.checked = checked;\n    this.isChecked = checked;\n    this.isAllChecked = checked;\n    this.isHalfChecked = halfChecked;\n  }\n\n  /**\n   * @not-deprecated Maybe removed in next major version, use `isExpanded` instead.\n   * We need it until tree refactoring is finished\n   */\n  public setExpanded(value: boolean): void {\n    this._isExpanded = value;\n    this.origin.expanded = value;\n    this.afterValueChange('isExpanded');\n  }\n\n  /**\n   * @deprecated Maybe removed in next major version, use `isSelected` instead.\n   */\n  public setSelected(value: boolean): void {\n    warnDeprecation(`'setSelected' is going to be removed in 9.0.0. Please use 'isExpanded' isSelected.`);\n    if (this.isDisabled) {\n      return;\n    }\n    this.isSelected = value;\n  }\n\n  public getParentNode(): NzTreeNode | null {\n    return this.parentNode;\n  }\n\n  public getChildren(): NzTreeNode[] {\n    return this.children;\n  }\n\n  /**\n   * Support appending child nodes by position. Leaf node cannot be appended.\n   */\n  public addChildren(children: NzSafeAny[], childPos: number = -1): void {\n    if (!this.isLeaf) {\n      children.forEach(node => {\n        const refreshLevel = (n: NzTreeNode) => {\n          n.getChildren().forEach(c => {\n            c.level = c.getParentNode()!.level + 1;\n            // flush origin\n            c.origin.level = c.level;\n            refreshLevel(c);\n          });\n        };\n        let child = node;\n        if (child instanceof NzTreeNode) {\n          child.parentNode = this;\n        } else {\n          child = new NzTreeNode(node, this);\n        }\n        child.level = this.level + 1;\n        child.origin.level = child.level;\n        refreshLevel(child);\n        try {\n          childPos === -1 ? this.children.push(child) : this.children.splice(childPos, 0, child);\n          // flush origin\n        } catch (e) {}\n      });\n      this.origin.children = this.getChildren().map(v => v.origin);\n      // remove loading state\n      this.isLoading = false;\n    }\n    this.afterValueChange('addChildren');\n    this.afterValueChange('reRender');\n  }\n\n  public clearChildren(): void {\n    // refresh checked state\n    this.afterValueChange('clearChildren');\n    this.children = [];\n    this.origin.children = [];\n    this.afterValueChange('reRender');\n  }\n\n  public remove(): void {\n    const parentNode = this.getParentNode();\n    if (parentNode) {\n      parentNode.children = parentNode.getChildren().filter(v => v.key !== this.key);\n      parentNode.origin.children = parentNode.origin.children!.filter(v => v.key !== this.key);\n      this.afterValueChange('remove');\n      this.afterValueChange('reRender');\n    }\n  }\n\n  public afterValueChange(key: string): void {\n    if (this.treeService) {\n      switch (key) {\n        case 'isChecked':\n          this.treeService.setCheckedNodeList(this);\n          break;\n        case 'isHalfChecked':\n          this.treeService.setHalfCheckedNodeList(this);\n          break;\n        case 'isExpanded':\n          this.treeService.setExpandedNodeList(this);\n          break;\n        case 'isSelected':\n          this.treeService.setNodeActive(this);\n          break;\n        case 'clearChildren':\n          this.treeService.afterRemove(this.getChildren());\n          break;\n        case 'remove':\n          this.treeService.afterRemove([this]);\n          break;\n        case 'reRender':\n          this.treeService.flattenTreeData(\n            this.treeService.rootNodes,\n            this.treeService.getExpandedNodeList().map(v => v.key)\n          );\n          break;\n      }\n    }\n    this.update();\n  }\n\n  public update(): void {\n    if (this.component) {\n      this.component.markForCheck();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { FlattenNode, NzTreeNode, NzTreeNodeKey } from './nz-tree-base-node';\n\nexport function isCheckDisabled(node: NzTreeNode): boolean {\n  const { isDisabled, isDisableCheckbox } = node;\n  return !!(isDisabled || isDisableCheckbox);\n}\n\nexport function isInArray(needle: NzSafeAny, haystack: NzSafeAny[]): boolean {\n  return haystack.length > 0 && haystack.indexOf(needle) > -1;\n}\n\nexport function getPosition(level: string | number, index: number): string {\n  return `${level}-${index}`;\n}\n\nexport function getKey(key: NzTreeNodeKey, pos: string): NzTreeNodeKey {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\n\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nexport function flattenTreeData(treeNodeList: NzTreeNode[] = [], expandedKeys: NzTreeNodeKey[] | true = []): FlattenNode[] {\n  const expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  const flattenList: FlattenNode[] = [];\n\n  function dig(list: NzTreeNode[], parent: FlattenNode | null = null): FlattenNode[] {\n    return list.map((treeNode, index) => {\n      const pos: string = getPosition(parent ? parent.pos : '0', index);\n      const mergedKey = getKey(treeNode.key, pos);\n      treeNode.isStart = [...(parent ? parent.isStart : []), index === 0];\n      treeNode.isEnd = [...(parent ? parent.isEnd : []), index === list.length - 1];\n      // Add FlattenDataNode into list\n      // TODO: only need data here.\n      const flattenNode: FlattenNode = {\n        parent,\n        pos,\n        children: [],\n        data: treeNode,\n        isStart: [...(parent ? parent.isStart : []), index === 0],\n        isEnd: [...(parent ? parent.isEnd : []), index === list.length - 1]\n      };\n\n      flattenList.push(flattenNode);\n\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey) || treeNode.isExpanded) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Injectable } from '@angular/core';\n\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { BehaviorSubject } from 'rxjs';\nimport { NzTreeNode, NzTreeNodeKey } from './nz-tree-base-node';\nimport { flattenTreeData, isCheckDisabled, isInArray } from './nz-tree-base-util';\nimport { NzFormatEmitEvent } from './nz-tree-base.definitions';\n\n@Injectable()\nexport class NzTreeBaseService {\n  DRAG_SIDE_RANGE = 0.25;\n  DRAG_MIN_GAP = 2;\n\n  isCheckStrictly: boolean = false;\n  isMultiple: boolean = false;\n  selectedNode: NzTreeNode;\n  rootNodes: NzTreeNode[] = [];\n  flattenNodes$ = new BehaviorSubject<NzTreeNode[]>([]);\n  selectedNodeList: NzTreeNode[] = [];\n  expandedNodeList: NzTreeNode[] = [];\n  checkedNodeList: NzTreeNode[] = [];\n  halfCheckedNodeList: NzTreeNode[] = [];\n  matchedNodeList: NzTreeNode[] = [];\n\n  /**\n   * reset tree nodes will clear default node list\n   */\n  initTree(nzNodes: NzTreeNode[]): void {\n    this.rootNodes = nzNodes;\n    this.expandedNodeList = [];\n    this.selectedNodeList = [];\n    this.halfCheckedNodeList = [];\n    this.checkedNodeList = [];\n    this.matchedNodeList = [];\n  }\n\n  flattenTreeData(nzNodes: NzTreeNode[], expandedKeys: NzTreeNodeKey[] | true = []): void {\n    this.flattenNodes$.next(flattenTreeData(nzNodes, expandedKeys).map(item => item.data));\n  }\n\n  getSelectedNode(): NzTreeNode | null {\n    return this.selectedNode;\n  }\n\n  /**\n   * get some list\n   */\n  getSelectedNodeList(): NzTreeNode[] {\n    return this.conductNodeState('select');\n  }\n\n  /**\n   * return checked nodes\n   */\n  getCheckedNodeList(): NzTreeNode[] {\n    return this.conductNodeState('check');\n  }\n\n  getHalfCheckedNodeList(): NzTreeNode[] {\n    return this.conductNodeState('halfCheck');\n  }\n\n  /**\n   * return expanded nodes\n   */\n  getExpandedNodeList(): NzTreeNode[] {\n    return this.conductNodeState('expand');\n  }\n\n  /**\n   * return search matched nodes\n   */\n  getMatchedNodeList(): NzTreeNode[] {\n    return this.conductNodeState('match');\n  }\n\n  isArrayOfNzTreeNode(value: NzSafeAny[]): boolean {\n    return value.every(item => item instanceof NzTreeNode);\n  }\n\n  /**\n   * set drag node\n   */\n  setSelectedNode(node: NzTreeNode): void {\n    this.selectedNode = node;\n  }\n\n  /**\n   * set node selected status\n   */\n  setNodeActive(node: NzTreeNode): void {\n    if (!this.isMultiple && node.isSelected) {\n      this.selectedNodeList.forEach(n => {\n        if (node.key !== n.key) {\n          // reset other nodes\n          n.isSelected = false;\n        }\n      });\n      // single mode: remove pre node\n      this.selectedNodeList = [];\n    }\n    this.setSelectedNodeList(node, this.isMultiple);\n  }\n\n  /**\n   * add or remove node to selectedNodeList\n   */\n  setSelectedNodeList(node: NzTreeNode, isMultiple: boolean = false): void {\n    const index = this.getIndexOfArray(this.selectedNodeList, node.key);\n    if (isMultiple) {\n      if (node.isSelected && index === -1) {\n        this.selectedNodeList.push(node);\n      }\n    } else {\n      if (node.isSelected && index === -1) {\n        this.selectedNodeList = [node];\n      }\n    }\n    if (!node.isSelected) {\n      this.selectedNodeList = this.selectedNodeList.filter(n => n.key !== node.key);\n    }\n  }\n\n  /**\n   * merge checked nodes\n   */\n  setHalfCheckedNodeList(node: NzTreeNode): void {\n    const index = this.getIndexOfArray(this.halfCheckedNodeList, node.key);\n    if (node.isHalfChecked && index === -1) {\n      this.halfCheckedNodeList.push(node);\n    } else if (!node.isHalfChecked && index > -1) {\n      this.halfCheckedNodeList = this.halfCheckedNodeList.filter(n => node.key !== n.key);\n    }\n  }\n\n  setCheckedNodeList(node: NzTreeNode): void {\n    const index = this.getIndexOfArray(this.checkedNodeList, node.key);\n    if (node.isChecked && index === -1) {\n      this.checkedNodeList.push(node);\n    } else if (!node.isChecked && index > -1) {\n      this.checkedNodeList = this.checkedNodeList.filter(n => node.key !== n.key);\n    }\n  }\n\n  /**\n   * conduct checked/selected/expanded keys\n   */\n  conductNodeState(type: string = 'check'): NzTreeNode[] {\n    let resultNodesList: NzTreeNode[] = [];\n    switch (type) {\n      case 'select':\n        resultNodesList = this.selectedNodeList;\n        break;\n      case 'expand':\n        resultNodesList = this.expandedNodeList;\n        break;\n      case 'match':\n        resultNodesList = this.matchedNodeList;\n        break;\n      case 'check':\n        resultNodesList = this.checkedNodeList;\n        const isIgnore = (node: NzTreeNode): boolean => {\n          const parentNode = node.getParentNode();\n          if (parentNode) {\n            if (this.checkedNodeList.findIndex(n => n.key === parentNode.key) > -1) {\n              return true;\n            } else {\n              return isIgnore(parentNode);\n            }\n          }\n          return false;\n        };\n        // merge checked\n        if (!this.isCheckStrictly) {\n          resultNodesList = this.checkedNodeList.filter(n => !isIgnore(n));\n        }\n        break;\n      case 'halfCheck':\n        if (!this.isCheckStrictly) {\n          resultNodesList = this.halfCheckedNodeList;\n        }\n        break;\n    }\n    return resultNodesList;\n  }\n\n  /**\n   * set expanded nodes\n   */\n  setExpandedNodeList(node: NzTreeNode): void {\n    if (node.isLeaf) {\n      return;\n    }\n    const index = this.getIndexOfArray(this.expandedNodeList, node.key);\n    if (node.isExpanded && index === -1) {\n      this.expandedNodeList.push(node);\n    } else if (!node.isExpanded && index > -1) {\n      this.expandedNodeList.splice(index, 1);\n    }\n  }\n\n  setMatchedNodeList(node: NzTreeNode): void {\n    const index = this.getIndexOfArray(this.matchedNodeList, node.key);\n    if (node.isMatched && index === -1) {\n      this.matchedNodeList.push(node);\n    } else if (!node.isMatched && index > -1) {\n      this.matchedNodeList.splice(index, 1);\n    }\n  }\n\n  /**\n   * check state\n   * @param isCheckStrictly\n   */\n  refreshCheckState(isCheckStrictly: boolean = false): void {\n    if (isCheckStrictly) {\n      return;\n    }\n    this.checkedNodeList.forEach(node => {\n      this.conduct(node);\n    });\n  }\n\n  // reset other node checked state based current node\n  conduct(node: NzTreeNode): void {\n    const isChecked = node.isChecked;\n    if (node) {\n      this.conductUp(node);\n      this.conductDown(node, isChecked);\n    }\n  }\n\n  /**\n   * 1、children half checked\n   * 2、children all checked, parent checked\n   * 3、no children checked\n   */\n  conductUp(node: NzTreeNode): void {\n    const parentNode = node.getParentNode();\n    if (parentNode) {\n      if (!isCheckDisabled(parentNode)) {\n        if (parentNode.children.every(child => isCheckDisabled(child) || (!child.isHalfChecked && child.isChecked))) {\n          parentNode.isChecked = true;\n          parentNode.isHalfChecked = false;\n        } else if (parentNode.children.some(child => child.isHalfChecked || child.isChecked)) {\n          parentNode.isChecked = false;\n          parentNode.isHalfChecked = true;\n        } else {\n          parentNode.isChecked = false;\n          parentNode.isHalfChecked = false;\n        }\n      }\n      this.setCheckedNodeList(parentNode);\n      this.setHalfCheckedNodeList(parentNode);\n      this.conductUp(parentNode);\n    }\n  }\n\n  /**\n   * reset child check state\n   */\n  conductDown(node: NzTreeNode, value: boolean): void {\n    if (!isCheckDisabled(node)) {\n      node.isChecked = value;\n      node.isHalfChecked = false;\n      this.setCheckedNodeList(node);\n      this.setHalfCheckedNodeList(node);\n      node.children.forEach(n => {\n        this.conductDown(n, value);\n      });\n    }\n  }\n\n  /**\n   * flush after delete node\n   */\n  afterRemove(nodes: NzTreeNode[]): void {\n    // to reset selectedNodeList & expandedNodeList\n    const loopNode = (node: NzTreeNode) => {\n      // remove selected node\n      this.selectedNodeList = this.selectedNodeList.filter(n => n.key !== node.key);\n      // remove expanded node\n      this.expandedNodeList = this.expandedNodeList.filter(n => n.key !== node.key);\n      // remove checked node\n      this.checkedNodeList = this.checkedNodeList.filter(n => n.key !== node.key);\n      if (node.children) {\n        node.children.forEach(child => {\n          loopNode(child);\n        });\n      }\n    };\n    nodes.forEach(n => {\n      loopNode(n);\n    });\n    this.refreshCheckState(this.isCheckStrictly);\n  }\n\n  /**\n   * drag event\n   */\n  refreshDragNode(node: NzTreeNode): void {\n    if (node.children.length === 0) {\n      // until root\n      this.conductUp(node);\n    } else {\n      node.children.forEach(child => {\n        this.refreshDragNode(child);\n      });\n    }\n  }\n\n  // reset node level\n  resetNodeLevel(node: NzTreeNode): void {\n    const parentNode = node.getParentNode();\n    if (parentNode) {\n      node.level = parentNode.level + 1;\n    } else {\n      node.level = 0;\n    }\n    for (const child of node.children) {\n      this.resetNodeLevel(child);\n    }\n  }\n\n  calcDropPosition(event: DragEvent): number {\n    const { clientY } = event;\n    // to fix firefox undefined\n    const { top, bottom, height } = event.srcElement\n      ? (event.srcElement as Element).getBoundingClientRect()\n      : (event.target as Element).getBoundingClientRect();\n    const des = Math.max(height * this.DRAG_SIDE_RANGE, this.DRAG_MIN_GAP);\n\n    if (clientY <= top + des) {\n      return -1;\n    } else if (clientY >= bottom - des) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  /**\n   * drop\n   * 0: inner -1: pre 1: next\n   */\n  dropAndApply(targetNode: NzTreeNode, dragPos: number = -1): void {\n    if (!targetNode || dragPos > 1) {\n      return;\n    }\n    const treeService = targetNode.treeService;\n    const targetParent = targetNode.getParentNode();\n    const isSelectedRootNode = this.selectedNode.getParentNode();\n    // remove the dragNode\n    if (isSelectedRootNode) {\n      isSelectedRootNode.children = isSelectedRootNode.children.filter(n => n.key !== this.selectedNode.key);\n    } else {\n      this.rootNodes = this.rootNodes.filter(n => n.key !== this.selectedNode.key);\n    }\n    switch (dragPos) {\n      case 0:\n        targetNode.addChildren([this.selectedNode]);\n        this.resetNodeLevel(targetNode);\n        break;\n      case -1:\n      case 1:\n        const tIndex = dragPos === 1 ? 1 : 0;\n        if (targetParent) {\n          targetParent.addChildren([this.selectedNode], targetParent.children.indexOf(targetNode) + tIndex);\n          const parentNode = this.selectedNode.getParentNode();\n          if (parentNode) {\n            this.resetNodeLevel(parentNode);\n          }\n        } else {\n          const targetIndex = this.rootNodes.indexOf(targetNode) + tIndex;\n          // Insert root node.\n          this.rootNodes.splice(targetIndex, 0, this.selectedNode);\n          this.rootNodes[targetIndex].parentNode = null;\n          this.resetNodeLevel(this.rootNodes[targetIndex]);\n        }\n        break;\n    }\n    // flush all nodes\n    this.rootNodes.forEach(child => {\n      if (!child.treeService) {\n        child.service = treeService;\n      }\n      this.refreshDragNode(child);\n    });\n  }\n\n  /**\n   * emit Structure\n   * eventName\n   * node\n   * event: MouseEvent / DragEvent\n   * dragNode\n   */\n  formatEvent(eventName: string, node: NzTreeNode | null, event: MouseEvent | DragEvent | null): NzFormatEmitEvent {\n    const emitStructure: NzFormatEmitEvent = {\n      eventName: eventName,\n      node: node,\n      event: event\n    };\n    switch (eventName) {\n      case 'dragstart':\n      case 'dragenter':\n      case 'dragover':\n      case 'dragleave':\n      case 'drop':\n      case 'dragend':\n        Object.assign(emitStructure, { dragNode: this.getSelectedNode() });\n        break;\n      case 'click':\n      case 'dblclick':\n        Object.assign(emitStructure, { selectedKeys: this.selectedNodeList });\n        Object.assign(emitStructure, { nodes: this.selectedNodeList });\n        Object.assign(emitStructure, { keys: this.selectedNodeList.map(n => n.key) });\n        break;\n      case 'check':\n        const checkedNodeList = this.getCheckedNodeList();\n        Object.assign(emitStructure, { checkedKeys: checkedNodeList });\n        Object.assign(emitStructure, { nodes: checkedNodeList });\n        Object.assign(emitStructure, { keys: checkedNodeList.map(n => n.key) });\n        break;\n      case 'search':\n        Object.assign(emitStructure, { matchedKeys: this.getMatchedNodeList() });\n        Object.assign(emitStructure, { nodes: this.getMatchedNodeList() });\n        Object.assign(emitStructure, { keys: this.getMatchedNodeList().map(n => n.key) });\n        break;\n      case 'expand':\n        Object.assign(emitStructure, { nodes: this.expandedNodeList });\n        Object.assign(emitStructure, { keys: this.expandedNodeList.map(n => n.key) });\n        break;\n    }\n    return emitStructure;\n  }\n\n  /**\n   * New functions for flatten nodes\n   */\n\n  getIndexOfArray(list: NzTreeNode[], key: string): number {\n    return list.findIndex(v => v.key === key);\n  }\n\n  /**\n   * Render by nzCheckedKeys\n   * @param keys\n   * @param checkStrictly\n   */\n  conductCheck(keys: NzTreeNodeKey[], checkStrictly: boolean): void {\n    this.checkedNodeList = [];\n    this.halfCheckedNodeList = [];\n    const calc = (nodes: NzTreeNode[]) => {\n      nodes.forEach(node => {\n        if (isInArray(node.key, keys)) {\n          node.isChecked = true;\n          node.isHalfChecked = false;\n        } else {\n          node.isChecked = false;\n          node.isHalfChecked = false;\n        }\n        if (node.children.length > 0) {\n          calc(node.children);\n        }\n      });\n    };\n    calc(this.rootNodes);\n    this.refreshCheckState(checkStrictly);\n  }\n\n  conductExpandedKeys(keys: NzTreeNodeKey[] | true = []): void {\n    const expandedKeySet = new Set(keys === true ? [] : keys);\n    this.expandedNodeList = [];\n    const calc = (nodes: NzTreeNode[]) => {\n      nodes.forEach(node => {\n        node.setExpanded(keys === true || expandedKeySet.has(node.key) || node.isExpanded === true);\n        if (node.isExpanded) {\n          this.setExpandedNodeList(node);\n        }\n        if (node.children.length > 0) {\n          calc(node.children);\n        }\n      });\n    };\n    calc(this.rootNodes);\n  }\n\n  conductSelectedKeys(keys: NzTreeNodeKey[], isMulti: boolean): void {\n    this.selectedNodeList = [];\n    const calc = (nodes: NzTreeNode[]): boolean => {\n      return nodes.every(node => {\n        if (isInArray(node.key, keys)) {\n          node.isSelected = true;\n          this.setSelectedNodeList(node);\n          if (!isMulti) {\n            // if not support multi select\n            return false;\n          }\n        } else {\n          node.isSelected = false;\n        }\n        if (node.children.length > 0) {\n          // Recursion\n          return calc(node.children);\n        }\n        return true;\n      });\n    };\n    calc(this.rootNodes);\n  }\n\n  /**\n   * Expand parent nodes by child node\n   * @param node\n   */\n  expandNodeAllParentBySearch(node: NzTreeNode): void {\n    const calc = (n: NzTreeNode | null): void => {\n      if (n) {\n        n.canHide = false;\n        n.setExpanded(true);\n        this.setExpandedNodeList(n);\n        if (n.getParentNode()) {\n          return calc(n.getParentNode());\n        }\n      }\n    };\n    calc(node.getParentNode());\n  }\n}\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { InjectionToken } from '@angular/core';\n\nimport { NzTreeBaseService } from './nz-tree-base.service';\n\nexport const NzTreeHigherOrderServiceToken = new InjectionToken<NzTreeBaseService>('NzTreeHigherOrder');\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { NzTreeNode } from './nz-tree-base-node';\nimport { NzTreeBaseService } from './nz-tree-base.service';\n\nexport class NzTreeBase {\n  constructor(public nzTreeService: NzTreeBaseService) {}\n\n  /**\n   * Coerces a value({@link any[]}) to a TreeNodes({@link NzTreeNode[]})\n   */\n  coerceTreeNodes(value: NzSafeAny[]): NzTreeNode[] {\n    let nodes: NzTreeNode[] = [];\n    if (!this.nzTreeService.isArrayOfNzTreeNode(value)) {\n      // has not been new NzTreeNode\n      nodes = value.map(item => new NzTreeNode(item, null, this.nzTreeService));\n    } else {\n      nodes = value.map((item: NzTreeNode) => {\n        item.service = this.nzTreeService;\n        return item;\n      });\n    }\n    return nodes;\n  }\n\n  /**\n   * Get all nodes({@link NzTreeNode})\n   */\n  getTreeNodes(): NzTreeNode[] {\n    return this.nzTreeService.rootNodes;\n  }\n\n  /**\n   * Get {@link NzTreeNode} with key\n   */\n  getTreeNodeByKey(key: string): NzTreeNode | null {\n    // flat tree nodes\n    const nodes: NzTreeNode[] = [];\n    const getNode = (node: NzTreeNode): void => {\n      nodes.push(node);\n      node.getChildren().forEach(n => {\n        getNode(n);\n      });\n    };\n    this.getTreeNodes().forEach(n => {\n      getNode(n);\n    });\n    return nodes.find(n => n.key === key) || null;\n  }\n\n  /**\n   * Get checked nodes(merged)\n   */\n  getCheckedNodeList(): NzTreeNode[] {\n    return this.nzTreeService.getCheckedNodeList();\n  }\n\n  /**\n   * Get selected nodes\n   */\n  getSelectedNodeList(): NzTreeNode[] {\n    return this.nzTreeService.getSelectedNodeList();\n  }\n\n  /**\n   * Get half checked nodes\n   */\n  getHalfCheckedNodeList(): NzTreeNode[] {\n    return this.nzTreeService.getHalfCheckedNodeList();\n  }\n\n  /**\n   * Get expanded nodes\n   */\n  getExpandedNodeList(): NzTreeNode[] {\n    return this.nzTreeService.getExpandedNodeList();\n  }\n\n  /**\n   * Get matched nodes(if nzSearchValue is not null)\n   */\n  getMatchedNodeList(): NzTreeNode[] {\n    return this.nzTreeService.getMatchedNodeList();\n  }\n}\n"]}