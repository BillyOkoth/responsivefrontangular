/**
 * @fileoverview added by tsickle
 * Generated from: componet-bed.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { NO_ERRORS_SCHEMA } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
/**
 * @record
 * @template T
 */
export function ComponentBed() { }
if (false) {
    /** @type {?} */
    ComponentBed.prototype.bed;
    /** @type {?} */
    ComponentBed.prototype.fixture;
    /** @type {?} */
    ComponentBed.prototype.nativeElement;
    /** @type {?} */
    ComponentBed.prototype.debugElement;
    /** @type {?} */
    ComponentBed.prototype.component;
}
/**
 * @template T
 * @param {?} component
 * @param {?=} options
 * @return {?}
 */
export function createComponentBed(component, options = {
    providers: [],
    declarations: [],
    imports: []
}) {
    const { imports, declarations, providers } = options;
    /** @type {?} */
    const config = {
        imports: [NoopAnimationsModule, CommonModule, ...(imports || [])],
        declarations: [component, ...(declarations || [])],
        schemas: [NO_ERRORS_SCHEMA],
        providers: providers || []
    };
    /** @type {?} */
    const bed = TestBed.configureTestingModule(config);
    /** @type {?} */
    const fixture = TestBed.createComponent(component);
    fixture.detectChanges();
    return {
        bed,
        fixture,
        nativeElement: fixture.nativeElement,
        debugElement: fixture.debugElement,
        component: fixture.componentInstance
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZXQtYmVkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctem9ycm8tYW50ZC9jb3JlL3Rlc3RpbmcvIiwic291cmNlcyI6WyJjb21wb25ldC1iZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFxQyxnQkFBZ0IsRUFBa0IsTUFBTSxlQUFlLENBQUM7QUFDcEcsT0FBTyxFQUFvQixPQUFPLEVBQWlCLE1BQU0sdUJBQXVCLENBQUM7QUFDakYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7Ozs7O0FBSTVFLGtDQU1DOzs7SUFMQywyQkFBbUI7O0lBQ25CLCtCQUE2Qjs7SUFDN0IscUNBQTJCOztJQUMzQixvQ0FBMkI7O0lBQzNCLGlDQUFhOzs7Ozs7OztBQUVmLE1BQU0sVUFBVSxrQkFBa0IsQ0FDaEMsU0FBa0IsRUFDbEIsVUFJSTtJQUNGLFNBQVMsRUFBRSxFQUFFO0lBQ2IsWUFBWSxFQUFFLEVBQUU7SUFDaEIsT0FBTyxFQUFFLEVBQUU7Q0FDWjtVQUVLLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsR0FBRyxPQUFPOztVQUM5QyxNQUFNLEdBQUc7UUFDYixPQUFPLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxZQUFZLEVBQUUsR0FBRyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNqRSxZQUFZLEVBQUUsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNsRCxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUMzQixTQUFTLEVBQUUsU0FBUyxJQUFJLEVBQUU7S0FDM0I7O1VBQ0ssR0FBRyxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUM7O1VBQzVDLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFJLFNBQVMsQ0FBQztJQUNyRCxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDeEIsT0FBTztRQUNMLEdBQUc7UUFDSCxPQUFPO1FBQ1AsYUFBYSxFQUFFLE9BQU8sQ0FBQyxhQUFhO1FBQ3BDLFlBQVksRUFBRSxPQUFPLENBQUMsWUFBWTtRQUNsQyxTQUFTLEVBQUUsT0FBTyxDQUFDLGlCQUFpQjtLQUNyQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBEZWJ1Z0VsZW1lbnQsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE5PX0VSUk9SU19TQ0hFTUEsIFByb3ZpZGVyLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wb25lbnRGaXh0dXJlLCBUZXN0QmVkLCBUZXN0QmVkU3RhdGljIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IE5vb3BBbmltYXRpb25zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci9hbmltYXRpb25zJztcbmltcG9ydCB7IE56U2FmZUFueSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5cbnR5cGUgQ29tcG9uZW50RGVwcyA9IEFycmF5PFR5cGU8TnpTYWZlQW55PiB8IE1vZHVsZVdpdGhQcm92aWRlcnM+O1xuZXhwb3J0IGludGVyZmFjZSBDb21wb25lbnRCZWQ8VD4ge1xuICBiZWQ6IFRlc3RCZWRTdGF0aWM7XG4gIGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8VD47XG4gIG5hdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICBkZWJ1Z0VsZW1lbnQ6IERlYnVnRWxlbWVudDtcbiAgY29tcG9uZW50OiBUO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEJlZDxUPihcbiAgY29tcG9uZW50OiBUeXBlPFQ+LFxuICBvcHRpb25zOiB7XG4gICAgcHJvdmlkZXJzPzogUHJvdmlkZXJbXTtcbiAgICBkZWNsYXJhdGlvbnM/OiBDb21wb25lbnREZXBzO1xuICAgIGltcG9ydHM/OiBDb21wb25lbnREZXBzO1xuICB9ID0ge1xuICAgIHByb3ZpZGVyczogW10sXG4gICAgZGVjbGFyYXRpb25zOiBbXSxcbiAgICBpbXBvcnRzOiBbXVxuICB9XG4pOiBDb21wb25lbnRCZWQ8VD4ge1xuICBjb25zdCB7IGltcG9ydHMsIGRlY2xhcmF0aW9ucywgcHJvdmlkZXJzIH0gPSBvcHRpb25zO1xuICBjb25zdCBjb25maWcgPSB7XG4gICAgaW1wb3J0czogW05vb3BBbmltYXRpb25zTW9kdWxlLCBDb21tb25Nb2R1bGUsIC4uLihpbXBvcnRzIHx8IFtdKV0sXG4gICAgZGVjbGFyYXRpb25zOiBbY29tcG9uZW50LCAuLi4oZGVjbGFyYXRpb25zIHx8IFtdKV0sXG4gICAgc2NoZW1hczogW05PX0VSUk9SU19TQ0hFTUFdLFxuICAgIHByb3ZpZGVyczogcHJvdmlkZXJzIHx8IFtdXG4gIH07XG4gIGNvbnN0IGJlZCA9IFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZShjb25maWcpO1xuICBjb25zdCBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQ8VD4oY29tcG9uZW50KTtcbiAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKCk7XG4gIHJldHVybiB7XG4gICAgYmVkLFxuICAgIGZpeHR1cmUsXG4gICAgbmF0aXZlRWxlbWVudDogZml4dHVyZS5uYXRpdmVFbGVtZW50LFxuICAgIGRlYnVnRWxlbWVudDogZml4dHVyZS5kZWJ1Z0VsZW1lbnQsXG4gICAgY29tcG9uZW50OiBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlXG4gIH07XG59XG4iXX0=