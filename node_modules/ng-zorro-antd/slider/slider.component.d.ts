/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Platform } from '@angular/cdk/platform';
import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { BooleanInput, NumberInput } from 'ng-zorro-antd/core/types';
import { NzSliderHandleComponent } from './handle.component';
import { NzSliderService } from './slider.service';
import { NzExtendedMark, NzMarks, NzSliderHandler, NzSliderShowTooltip, NzSliderValue } from './typings';
import * as ɵngcc0 from '@angular/core';
export declare class NzSliderComponent implements ControlValueAccessor, OnInit, OnChanges, OnDestroy {
    private sliderService;
    private cdr;
    private platform;
    static ngAcceptInputType_nzDisabled: BooleanInput;
    static ngAcceptInputType_nzDots: BooleanInput;
    static ngAcceptInputType_nzIncluded: BooleanInput;
    static ngAcceptInputType_nzRange: BooleanInput;
    static ngAcceptInputType_nzVertical: BooleanInput;
    static ngAcceptInputType_nzMax: NumberInput;
    static ngAcceptInputType_nzMin: NumberInput;
    static ngAcceptInputType_nzStep: NumberInput;
    slider: ElementRef<HTMLDivElement>;
    handlerComponents: QueryList<NzSliderHandleComponent>;
    nzDisabled: boolean;
    nzDots: boolean;
    nzIncluded: boolean;
    nzRange: boolean;
    nzVertical: boolean;
    nzDefaultValue?: NzSliderValue;
    nzMarks: NzMarks | null;
    nzMax: number;
    nzMin: number;
    nzStep: number;
    nzTooltipVisible: NzSliderShowTooltip;
    nzTooltipPlacement: string;
    nzTipFormatter: (value: number) => string;
    readonly nzOnAfterChange: EventEmitter<NzSliderValue>;
    value: NzSliderValue | null;
    cacheSliderStart: number | null;
    cacheSliderLength: number | null;
    activeValueIndex: number | undefined;
    track: {
        offset: null | number;
        length: null | number;
    };
    handles: NzSliderHandler[];
    marksArray: NzExtendedMark[] | null;
    bounds: {
        lower: NzSliderValue | null;
        upper: NzSliderValue | null;
    };
    private dragStart$;
    private dragMove$;
    private dragEnd$;
    private dragStart_;
    private dragMove_;
    private dragEnd_;
    constructor(sliderService: NzSliderService, cdr: ChangeDetectorRef, platform: Platform);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    writeValue(val: NzSliderValue | null): void;
    onValueChange(_value: NzSliderValue): void;
    onTouched(): void;
    registerOnChange(fn: (value: NzSliderValue) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    /**
     * Event handler is only triggered when a slider handler is focused.
     */
    onKeyDown(e: KeyboardEvent): void;
    private setValue;
    private getValue;
    /**
     * Clone & sort current value and convert them to offsets, then return the new one.
     */
    private getValueToOffset;
    /**
     * Find the closest value to be activated.
     */
    private setActiveValueIndex;
    private setActiveValue;
    /**
     * Update track and handles' position and length.
     */
    private updateTrackAndHandles;
    private onDragStart;
    private onDragMove;
    private onDragEnd;
    /**
     * Create user interactions handles.
     */
    private bindDraggingHandlers;
    private subscribeDrag;
    private unsubscribeDrag;
    private toggleDragMoving;
    private toggleDragDisabled;
    private findClosestValue;
    private valueToOffset;
    private getSliderStartPosition;
    private getSliderLength;
    /**
     * Cache DOM layout/reflow operations for performance (may not necessary?)
     */
    private cacheSliderProperty;
    private formatValue;
    /**
     * Show one handle's tooltip and hide others'.
     */
    private showHandleTooltip;
    private hideAllHandleTooltip;
    private generateMarkItems;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzSliderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzSliderComponent, "nz-slider", ["nzSlider"], { "nzDisabled": "nzDisabled"; "nzDots": "nzDots"; "nzIncluded": "nzIncluded"; "nzRange": "nzRange"; "nzVertical": "nzVertical"; "nzMarks": "nzMarks"; "nzMax": "nzMax"; "nzMin": "nzMin"; "nzStep": "nzStep"; "nzTooltipVisible": "nzTooltipVisible"; "nzTooltipPlacement": "nzTooltipPlacement"; "nzDefaultValue": "nzDefaultValue"; "nzTipFormatter": "nzTipFormatter"; }, { "nzOnAfterChange": "nzOnAfterChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzbGlkZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWxpYmFiYS5jb20gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFF1ZXJ5TGlzdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBCb29sZWFuSW5wdXQsIE51bWJlcklucHV0IH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3R5cGVzJztcbmltcG9ydCB7IE56U2xpZGVySGFuZGxlQ29tcG9uZW50IH0gZnJvbSAnLi9oYW5kbGUuY29tcG9uZW50JztcbmltcG9ydCB7IE56U2xpZGVyU2VydmljZSB9IGZyb20gJy4vc2xpZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTnpFeHRlbmRlZE1hcmssIE56TWFya3MsIE56U2xpZGVySGFuZGxlciwgTnpTbGlkZXJTaG93VG9vbHRpcCwgTnpTbGlkZXJWYWx1ZSB9IGZyb20gJy4vdHlwaW5ncyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOelNsaWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHNsaWRlclNlcnZpY2U7XG4gICAgcHJpdmF0ZSBjZHI7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybTtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpEaXNhYmxlZDogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uekRvdHM6IEJvb2xlYW5JbnB1dDtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpJbmNsdWRlZDogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uelJhbmdlOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256VmVydGljYWw6IEJvb2xlYW5JbnB1dDtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpNYXg6IE51bWJlcklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uek1pbjogTnVtYmVySW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256U3RlcDogTnVtYmVySW5wdXQ7XG4gICAgc2xpZGVyOiBFbGVtZW50UmVmPEhUTUxEaXZFbGVtZW50PjtcbiAgICBoYW5kbGVyQ29tcG9uZW50czogUXVlcnlMaXN0PE56U2xpZGVySGFuZGxlQ29tcG9uZW50PjtcbiAgICBuekRpc2FibGVkOiBib29sZWFuO1xuICAgIG56RG90czogYm9vbGVhbjtcbiAgICBuekluY2x1ZGVkOiBib29sZWFuO1xuICAgIG56UmFuZ2U6IGJvb2xlYW47XG4gICAgbnpWZXJ0aWNhbDogYm9vbGVhbjtcbiAgICBuekRlZmF1bHRWYWx1ZT86IE56U2xpZGVyVmFsdWU7XG4gICAgbnpNYXJrczogTnpNYXJrcyB8IG51bGw7XG4gICAgbnpNYXg6IG51bWJlcjtcbiAgICBuek1pbjogbnVtYmVyO1xuICAgIG56U3RlcDogbnVtYmVyO1xuICAgIG56VG9vbHRpcFZpc2libGU6IE56U2xpZGVyU2hvd1Rvb2x0aXA7XG4gICAgbnpUb29sdGlwUGxhY2VtZW50OiBzdHJpbmc7XG4gICAgbnpUaXBGb3JtYXR0ZXI6ICh2YWx1ZTogbnVtYmVyKSA9PiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgbnpPbkFmdGVyQ2hhbmdlOiBFdmVudEVtaXR0ZXI8TnpTbGlkZXJWYWx1ZT47XG4gICAgdmFsdWU6IE56U2xpZGVyVmFsdWUgfCBudWxsO1xuICAgIGNhY2hlU2xpZGVyU3RhcnQ6IG51bWJlciB8IG51bGw7XG4gICAgY2FjaGVTbGlkZXJMZW5ndGg6IG51bWJlciB8IG51bGw7XG4gICAgYWN0aXZlVmFsdWVJbmRleDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIHRyYWNrOiB7XG4gICAgICAgIG9mZnNldDogbnVsbCB8IG51bWJlcjtcbiAgICAgICAgbGVuZ3RoOiBudWxsIHwgbnVtYmVyO1xuICAgIH07XG4gICAgaGFuZGxlczogTnpTbGlkZXJIYW5kbGVyW107XG4gICAgbWFya3NBcnJheTogTnpFeHRlbmRlZE1hcmtbXSB8IG51bGw7XG4gICAgYm91bmRzOiB7XG4gICAgICAgIGxvd2VyOiBOelNsaWRlclZhbHVlIHwgbnVsbDtcbiAgICAgICAgdXBwZXI6IE56U2xpZGVyVmFsdWUgfCBudWxsO1xuICAgIH07XG4gICAgcHJpdmF0ZSBkcmFnU3RhcnQkO1xuICAgIHByaXZhdGUgZHJhZ01vdmUkO1xuICAgIHByaXZhdGUgZHJhZ0VuZCQ7XG4gICAgcHJpdmF0ZSBkcmFnU3RhcnRfO1xuICAgIHByaXZhdGUgZHJhZ01vdmVfO1xuICAgIHByaXZhdGUgZHJhZ0VuZF87XG4gICAgY29uc3RydWN0b3Ioc2xpZGVyU2VydmljZTogTnpTbGlkZXJTZXJ2aWNlLCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCBwbGF0Zm9ybTogUGxhdGZvcm0pO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbDogTnpTbGlkZXJWYWx1ZSB8IG51bGwpOiB2b2lkO1xuICAgIG9uVmFsdWVDaGFuZ2UoX3ZhbHVlOiBOelNsaWRlclZhbHVlKTogdm9pZDtcbiAgICBvblRvdWNoZWQoKTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAodmFsdWU6IE56U2xpZGVyVmFsdWUpID0+IHZvaWQpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXIgaXMgb25seSB0cmlnZ2VyZWQgd2hlbiBhIHNsaWRlciBoYW5kbGVyIGlzIGZvY3VzZWQuXG4gICAgICovXG4gICAgb25LZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIHByaXZhdGUgc2V0VmFsdWU7XG4gICAgcHJpdmF0ZSBnZXRWYWx1ZTtcbiAgICAvKipcbiAgICAgKiBDbG9uZSAmIHNvcnQgY3VycmVudCB2YWx1ZSBhbmQgY29udmVydCB0aGVtIHRvIG9mZnNldHMsIHRoZW4gcmV0dXJuIHRoZSBuZXcgb25lLlxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0VmFsdWVUb09mZnNldDtcbiAgICAvKipcbiAgICAgKiBGaW5kIHRoZSBjbG9zZXN0IHZhbHVlIHRvIGJlIGFjdGl2YXRlZC5cbiAgICAgKi9cbiAgICBwcml2YXRlIHNldEFjdGl2ZVZhbHVlSW5kZXg7XG4gICAgcHJpdmF0ZSBzZXRBY3RpdmVWYWx1ZTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdHJhY2sgYW5kIGhhbmRsZXMnIHBvc2l0aW9uIGFuZCBsZW5ndGguXG4gICAgICovXG4gICAgcHJpdmF0ZSB1cGRhdGVUcmFja0FuZEhhbmRsZXM7XG4gICAgcHJpdmF0ZSBvbkRyYWdTdGFydDtcbiAgICBwcml2YXRlIG9uRHJhZ01vdmU7XG4gICAgcHJpdmF0ZSBvbkRyYWdFbmQ7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHVzZXIgaW50ZXJhY3Rpb25zIGhhbmRsZXMuXG4gICAgICovXG4gICAgcHJpdmF0ZSBiaW5kRHJhZ2dpbmdIYW5kbGVycztcbiAgICBwcml2YXRlIHN1YnNjcmliZURyYWc7XG4gICAgcHJpdmF0ZSB1bnN1YnNjcmliZURyYWc7XG4gICAgcHJpdmF0ZSB0b2dnbGVEcmFnTW92aW5nO1xuICAgIHByaXZhdGUgdG9nZ2xlRHJhZ0Rpc2FibGVkO1xuICAgIHByaXZhdGUgZmluZENsb3Nlc3RWYWx1ZTtcbiAgICBwcml2YXRlIHZhbHVlVG9PZmZzZXQ7XG4gICAgcHJpdmF0ZSBnZXRTbGlkZXJTdGFydFBvc2l0aW9uO1xuICAgIHByaXZhdGUgZ2V0U2xpZGVyTGVuZ3RoO1xuICAgIC8qKlxuICAgICAqIENhY2hlIERPTSBsYXlvdXQvcmVmbG93IG9wZXJhdGlvbnMgZm9yIHBlcmZvcm1hbmNlIChtYXkgbm90IG5lY2Vzc2FyeT8pXG4gICAgICovXG4gICAgcHJpdmF0ZSBjYWNoZVNsaWRlclByb3BlcnR5O1xuICAgIHByaXZhdGUgZm9ybWF0VmFsdWU7XG4gICAgLyoqXG4gICAgICogU2hvdyBvbmUgaGFuZGxlJ3MgdG9vbHRpcCBhbmQgaGlkZSBvdGhlcnMnLlxuICAgICAqL1xuICAgIHByaXZhdGUgc2hvd0hhbmRsZVRvb2x0aXA7XG4gICAgcHJpdmF0ZSBoaWRlQWxsSGFuZGxlVG9vbHRpcDtcbiAgICBwcml2YXRlIGdlbmVyYXRlTWFya0l0ZW1zO1xufVxuIl19