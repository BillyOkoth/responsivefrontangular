{"version":3,"file":"ng-zorro-antd-progress.js","sources":["ng://ng-zorro-antd/progress/utils.ts","ng://ng-zorro-antd/progress/progress.component.ts","ng://ng-zorro-antd/progress/progress.module.ts","ng://ng-zorro-antd/progress/typings.ts"],"sourcesContent":["/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NzProgressColorGradient, NzProgressGradientProgress } from './typings';\n\nfunction stripPercentToNumber(percent: string): number {\n  return +percent.replace('%', '');\n}\n\nexport const sortGradient = (gradients: NzProgressGradientProgress) => {\n  let tempArr: Array<{ key: number; value: string }> = [];\n\n  Object.keys(gradients).forEach(key => {\n    const value = gradients[key];\n    const formatKey = stripPercentToNumber(key);\n    if (!isNaN(formatKey)) {\n      tempArr.push({\n        key: formatKey,\n        value\n      });\n    }\n  });\n\n  tempArr = tempArr.sort((a, b) => a.key - b.key);\n  return tempArr;\n};\n\nexport const handleCircleGradient = (strokeColor: NzProgressGradientProgress): Array<{ offset: string; color: string }> => {\n  return sortGradient(strokeColor).map(({ key, value }) => ({ offset: `${key}%`, color: value }));\n};\n\nexport const handleLinearGradient = (strokeColor: NzProgressColorGradient) => {\n  const { from = '#1890ff', to = '#1890ff', direction = 'to right', ...rest } = strokeColor;\n  if (Object.keys(rest).length !== 0) {\n    const sortedGradients = sortGradient(rest as NzProgressGradientProgress)\n      .map(({ key, value }) => `${value} ${key}%`)\n      .join(', ');\n    return `linear-gradient(${direction}, ${sortedGradients})`;\n  }\n  return `linear-gradient(${direction}, ${from}, ${to})`;\n};\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { NzConfigService, WithConfig } from 'ng-zorro-antd/core/config';\nimport { NgStyleInterface, NumberInput } from 'ng-zorro-antd/core/types';\nimport { InputNumber, isNotNil } from 'ng-zorro-antd/core/util';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport {\n  NzProgressCirclePath,\n  NzProgressColorGradient,\n  NzProgressFormatter,\n  NzProgressGapPositionType,\n  NzProgressGradientProgress,\n  NzProgressStatusType,\n  NzProgressStepItem,\n  NzProgressStrokeColorType,\n  NzProgressStrokeLinecapType,\n  NzProgressTypeType\n} from './typings';\nimport { handleCircleGradient, handleLinearGradient } from './utils';\n\nlet gradientIdSeed = 0;\n\nconst NZ_CONFIG_COMPONENT_NAME = 'progress';\nconst statusIconNameMap = new Map([\n  ['success', 'check'],\n  ['exception', 'close']\n]);\nconst statusColorMap = new Map([\n  ['normal', '#108ee9'],\n  ['exception', '#ff5500'],\n  ['success', '#87d068']\n]);\nconst defaultFormatter: NzProgressFormatter = (p: number): string => `${p}%`;\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'nz-progress',\n  exportAs: 'nzProgress',\n  preserveWhitespaces: false,\n  template: `\n    <ng-template #progressInfoTemplate>\n      <span class=\"ant-progress-text\" *ngIf=\"nzShowInfo\">\n        <ng-container *ngIf=\"status === 'exception' || (status === 'success' && !nzFormat); else formatTemplate\">\n          <i nz-icon [nzType]=\"icon\"></i>\n        </ng-container>\n        <ng-template #formatTemplate>\n          <ng-container *nzStringTemplateOutlet=\"formatter; context: { $implicit: nzPercent }\">\n            {{ $any(formatter)(nzPercent) }}\n          </ng-container>\n        </ng-template>\n      </span>\n    </ng-template>\n\n    <div\n      [ngClass]=\"'ant-progress ant-progress-status-' + status\"\n      [class.ant-progress-line]=\"nzType == 'line'\"\n      [class.ant-progress-small]=\"nzSize == 'small'\"\n      [class.ant-progress-show-info]=\"nzShowInfo\"\n      [class.ant-progress-circle]=\"isCircleStyle\"\n      [class.ant-progress-steps]=\"isSteps\"\n    >\n      <!-- line progress -->\n      <div *ngIf=\"nzType === 'line'\">\n        <ng-container *ngIf=\"!isSteps\">\n          <div class=\"ant-progress-outer\" *ngIf=\"!isSteps\">\n            <div class=\"ant-progress-inner\">\n              <div\n                class=\"ant-progress-bg\"\n                [style.width.%]=\"nzPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.background]=\"!isGradient ? nzStrokeColor : null\"\n                [style.background-image]=\"isGradient ? lineGradient : null\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n              <div\n                *ngIf=\"nzSuccessPercent || nzSuccessPercent === 0\"\n                class=\"ant-progress-success-bg\"\n                [style.width.%]=\"nzSuccessPercent\"\n                [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                [style.height.px]=\"strokeWidth\"\n              ></div>\n            </div>\n          </div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </ng-container>\n        <!-- Step style progress -->\n        <div class=\"ant-progress-steps-outer\" *ngIf=\"isSteps\">\n          <div *ngFor=\"let step of steps; let i = index\" class=\"ant-progress-steps-item\" [ngStyle]=\"step\"></div>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n        </div>\n      </div>\n\n      <!-- circle / dashboard progress -->\n      <div\n        [style.width.px]=\"this.nzWidth\"\n        [style.height.px]=\"this.nzWidth\"\n        [style.fontSize.px]=\"this.nzWidth * 0.15 + 6\"\n        class=\"ant-progress-inner\"\n        [class.ant-progress-circle-gradient]=\"isGradient\"\n        *ngIf=\"isCircleStyle\"\n      >\n        <svg class=\"ant-progress-circle \" viewBox=\"0 0 100 100\">\n          <defs *ngIf=\"isGradient\">\n            <linearGradient [id]=\"'gradient-' + gradientId\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\n              <stop *ngFor=\"let i of circleGradient\" [attr.offset]=\"i.offset\" [attr.stop-color]=\"i.color\"></stop>\n            </linearGradient>\n          </defs>\n          <path\n            class=\"ant-progress-circle-trail\"\n            stroke=\"#f3f3f3\"\n            fill-opacity=\"0\"\n            [attr.stroke-width]=\"strokeWidth\"\n            [attr.d]=\"pathString\"\n            [ngStyle]=\"trailPathStyle\"\n          ></path>\n          <path\n            *ngFor=\"let p of progressCirclePath; trackBy: trackByFn\"\n            class=\"ant-progress-circle-path\"\n            fill-opacity=\"0\"\n            [attr.d]=\"pathString\"\n            [attr.stroke-linecap]=\"nzStrokeLinecap\"\n            [attr.stroke]=\"p.stroke\"\n            [attr.stroke-width]=\"nzPercent ? strokeWidth : 0\"\n            [ngStyle]=\"p.strokePathStyle\"\n          ></path>\n        </svg>\n        <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\n      </div>\n    </div>\n  `\n})\nexport class NzProgressComponent implements OnChanges, OnInit, OnDestroy {\n  static ngAcceptInputType_nzSuccessPercent: NumberInput;\n  static ngAcceptInputType_nzPercent: NumberInput;\n  static ngAcceptInputType_nzStrokeWidth: NumberInput;\n  static ngAcceptInputType_nzGapDegree: NumberInput;\n  static ngAcceptInputType_nzSteps: NumberInput;\n\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME, true) nzShowInfo: boolean;\n  @Input() nzWidth = 132;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME) nzStrokeColor: NzProgressStrokeColorType;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME, 'default') nzSize: 'default' | 'small';\n  @Input() nzFormat?: NzProgressFormatter;\n  @Input() @InputNumber() nzSuccessPercent?: number;\n  @Input() @InputNumber() nzPercent: number = 0;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME) @InputNumber() nzStrokeWidth: number;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME) @InputNumber() nzGapDegree: number;\n  @Input() nzStatus: NzProgressStatusType;\n  @Input() nzType: NzProgressTypeType = 'line';\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME, 'top') nzGapPosition: NzProgressGapPositionType;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME, 'round') nzStrokeLinecap: NzProgressStrokeLinecapType;\n\n  @Input() @InputNumber() nzSteps?: number;\n\n  steps: NzProgressStepItem[] = [];\n\n  /** Gradient style when `nzType` is `line`. */\n  lineGradient: string | null = null;\n\n  /** If user uses gradient color. */\n  isGradient = false;\n\n  /** If the linear progress is a step progress. */\n  isSteps = false;\n\n  /**\n   * Each progress whose `nzType` is circle or dashboard should have unique id to\n   * define `<linearGradient>`.\n   */\n  gradientId = gradientIdSeed++;\n\n  /** Paths to rendered in the template. */\n  progressCirclePath: NzProgressCirclePath[] = [];\n\n  circleGradient: Array<{ offset: string; color: string }>;\n\n  trailPathStyle: NgStyleInterface;\n\n  pathString: string;\n\n  icon: string;\n\n  trackByFn = (index: number) => `${index}`;\n\n  get formatter(): NzProgressFormatter {\n    return this.nzFormat || defaultFormatter;\n  }\n\n  get status(): NzProgressStatusType {\n    return this.nzStatus || this.inferredStatus;\n  }\n\n  get strokeWidth(): number {\n    return this.nzStrokeWidth || (this.nzType === 'line' && this.nzSize !== 'small' ? 8 : 6);\n  }\n\n  get isCircleStyle(): boolean {\n    return this.nzType === 'circle' || this.nzType === 'dashboard';\n  }\n\n  private cachedStatus: NzProgressStatusType = 'normal';\n  private inferredStatus: NzProgressStatusType = 'normal';\n  private destroy$ = new Subject<void>();\n\n  constructor(public nzConfigService: NzConfigService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { nzSteps, nzGapPosition, nzStrokeLinecap, nzStrokeColor, nzGapDegree, nzType, nzStatus, nzPercent, nzSuccessPercent } = changes;\n\n    if (nzStatus) {\n      this.cachedStatus = this.nzStatus || this.cachedStatus;\n    }\n\n    if (nzPercent || nzSuccessPercent) {\n      const fillAll = parseInt(this.nzPercent.toString(), 10) >= 100;\n      if (fillAll) {\n        if ((isNotNil(this.nzSuccessPercent) && this.nzSuccessPercent! >= 100) || this.nzSuccessPercent === undefined) {\n          this.inferredStatus = 'success';\n        }\n      } else {\n        this.inferredStatus = this.cachedStatus;\n      }\n    }\n\n    if (nzStatus || nzPercent || nzSuccessPercent) {\n      this.updateIcon();\n    }\n\n    if (nzStrokeColor) {\n      this.setStrokeColor();\n    }\n\n    if (nzGapPosition || nzStrokeLinecap || nzGapDegree || nzType || nzPercent || nzStrokeColor) {\n      this.getCirclePaths();\n    }\n\n    if (nzSteps) {\n      this.isSteps = isNotNil(nzSteps.currentValue);\n      this.getSteps();\n    }\n  }\n\n  ngOnInit(): void {\n    this.nzConfigService\n      .getConfigChangeEventForComponent(NZ_CONFIG_COMPONENT_NAME)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.updateIcon();\n        this.setStrokeColor();\n        this.getCirclePaths();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private updateIcon(): void {\n    const ret = statusIconNameMap.get(this.status);\n    this.icon = ret ? ret + (this.isCircleStyle ? '-o' : '-circle-fill') : '';\n  }\n\n  /**\n   * Calculate step render configs.\n   */\n  private getSteps(): void {\n    const current = Math.floor(this.nzSteps! * (this.nzPercent / 100));\n    const stepWidth = this.nzSize === 'small' ? 2 : 14;\n\n    for (let i = 0; i < this.nzSteps!; i++) {\n      let color;\n      if (i <= current - 1) {\n        color = this.nzStrokeColor;\n      }\n      const stepStyle = {\n        backgroundColor: `${color}`,\n        width: `${stepWidth}px`,\n        height: `${this.strokeWidth}px`\n      };\n      this.steps.push(stepStyle);\n    }\n  }\n\n  /**\n   * Calculate paths when the type is circle or dashboard.\n   */\n  private getCirclePaths(): void {\n    if (!this.isCircleStyle) {\n      return;\n    }\n\n    const values = isNotNil(this.nzSuccessPercent) ? [this.nzSuccessPercent!, this.nzPercent] : [this.nzPercent];\n\n    // Calculate shared styles.\n    const radius = 50 - this.strokeWidth / 2;\n    const gapPosition = this.nzGapPosition || (this.nzType === 'circle' ? 'top' : 'bottom');\n    const len = Math.PI * 2 * radius;\n    const gapDegree = this.nzGapDegree || (this.nzType === 'circle' ? 0 : 75);\n\n    let beginPositionX = 0;\n    let beginPositionY = -radius;\n    let endPositionX = 0;\n    let endPositionY = radius * -2;\n\n    switch (gapPosition) {\n      case 'left':\n        beginPositionX = -radius;\n        beginPositionY = 0;\n        endPositionX = radius * 2;\n        endPositionY = 0;\n        break;\n      case 'right':\n        beginPositionX = radius;\n        beginPositionY = 0;\n        endPositionX = radius * -2;\n        endPositionY = 0;\n        break;\n      case 'bottom':\n        beginPositionY = radius;\n        endPositionY = radius * 2;\n        break;\n      default:\n    }\n\n    this.pathString = `M 50,50 m ${beginPositionX},${beginPositionY}\n       a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n       a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n\n    this.trailPathStyle = {\n      strokeDasharray: `${len - gapDegree}px ${len}px`,\n      strokeDashoffset: `-${gapDegree / 2}px`,\n      transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'\n    };\n\n    // Calculate styles for each path.\n    this.progressCirclePath = values\n      .map((value, index) => {\n        const isSuccessPercent = values.length === 2 && index === 0;\n        return {\n          stroke: this.isGradient && !isSuccessPercent ? `url(#gradient-${this.gradientId})` : null,\n          strokePathStyle: {\n            stroke: !this.isGradient ? (isSuccessPercent ? statusColorMap.get('success') : (this.nzStrokeColor as string)) : null,\n            transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',\n            strokeDasharray: `${((value || 0) / 100) * (len - gapDegree)}px ${len}px`,\n            strokeDashoffset: `-${gapDegree / 2}px`\n          }\n        };\n      })\n      .reverse();\n  }\n\n  private setStrokeColor(): void {\n    const color = this.nzStrokeColor;\n    const isGradient = (this.isGradient = !!color && typeof color !== 'string');\n    if (isGradient && !this.isCircleStyle) {\n      this.lineGradient = handleLinearGradient(color as NzProgressColorGradient);\n    } else if (isGradient && this.isCircleStyle) {\n      this.circleGradient = handleCircleGradient(this.nzStrokeColor as NzProgressGradientProgress);\n    } else {\n      this.lineGradient = null;\n      this.circleGradient = [];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\n\nimport { NzProgressComponent } from './progress.component';\n\n@NgModule({\n  exports: [NzProgressComponent],\n  declarations: [NzProgressComponent],\n  imports: [CommonModule, NzIconModule, NzOutletModule]\n})\nexport class NzProgressModule {}\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { TemplateRef } from '@angular/core';\nimport { NgStyleInterface } from 'ng-zorro-antd/core/types';\n\nexport type NzProgressGapPositionType = 'top' | 'bottom' | 'left' | 'right';\n\nexport type NzProgressStatusType = 'success' | 'exception' | 'active' | 'normal';\n\nexport type NzProgressTypeType = 'line' | 'circle' | 'dashboard';\n\nexport type NzProgressStrokeLinecapType = 'round' | 'square';\n\nexport interface NzProgressGradientProgress {\n  [percent: string]: string;\n}\n\nexport interface NzProgressGradientFromTo {\n  from: string;\n  to: string;\n}\n\nexport type NzProgressColorGradient = { direction?: string } & (NzProgressGradientProgress | NzProgressGradientFromTo);\n\nexport type NzProgressStrokeColorType = string | NzProgressColorGradient;\n\nexport type NzProgressFormatter = ((percent: number) => string) | TemplateRef<{ $implicit: number }>;\n\nexport interface NzProgressCirclePath {\n  stroke: string | null;\n  strokePathStyle: NgStyleInterface;\n}\n\nexport interface NzProgressStepItem {\n  backgroundColor: string;\n  width: string;\n  height: string;\n}\n"],"names":[],"mappings":"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"}