{"version":3,"file":"ng-zorro-antd-core-outlet.js","sources":["ng:/ng-zorro-antd/core/outlet/string_template_outlet.directive.ts","ng:/ng-zorro-antd/core/outlet/outlet.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Directive, EmbeddedViewRef, Input, OnChanges, SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\n\n@Directive({\n  selector: '[nzStringTemplateOutlet]',\n  exportAs: 'nzStringTemplateOutlet'\n})\nexport class NzStringTemplateOutletDirective implements OnChanges {\n  private embeddedViewRef: EmbeddedViewRef<NzSafeAny> | null = null;\n  @Input() nzStringTemplateOutletContext: NzSafeAny | null = null;\n  @Input() nzStringTemplateOutlet: string | TemplateRef<NzSafeAny> | null = null;\n\n  private recreateView(): void {\n    this.viewContainer.clear();\n    const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n    const templateRef = (isTemplateRef ? this.nzStringTemplateOutlet : this.templateRef) as NzSafeAny;\n    this.embeddedViewRef = this.viewContainer.createEmbeddedView(templateRef, this.nzStringTemplateOutletContext);\n  }\n\n  private updateContext(): void {\n    const newCtx = this.nzStringTemplateOutletContext;\n    const oldCtx = this.embeddedViewRef!.context as NzSafeAny;\n    if (newCtx) {\n      for (const propName of Object.keys(newCtx)) {\n        oldCtx[propName] = newCtx[propName];\n      }\n    }\n  }\n\n  constructor(private viewContainer: ViewContainerRef, private templateRef: TemplateRef<NzSafeAny>) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const shouldRecreateView = (ctxChanges: SimpleChanges): boolean => {\n      const { nzStringTemplateOutletContext, nzStringTemplateOutlet } = ctxChanges;\n      let shouldOutletRecreate = false;\n      if (nzStringTemplateOutlet) {\n        if (nzStringTemplateOutlet.firstChange) {\n          shouldOutletRecreate = true;\n        } else {\n          const isPreviousOutletTemplate = nzStringTemplateOutlet.previousValue instanceof TemplateRef;\n          const isCurrentOutletTemplate = nzStringTemplateOutlet.currentValue instanceof TemplateRef;\n          shouldOutletRecreate = isPreviousOutletTemplate || isCurrentOutletTemplate;\n        }\n      }\n      const hasContextShapeChanged = (ctxChange: SimpleChange): boolean => {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n        if (prevCtxKeys.length === currCtxKeys.length) {\n          for (const propName of currCtxKeys) {\n            if (prevCtxKeys.indexOf(propName) === -1) {\n              return true;\n            }\n          }\n          return false;\n        } else {\n          return true;\n        }\n      };\n      const shouldContextRecreate = nzStringTemplateOutletContext && hasContextShapeChanged(nzStringTemplateOutletContext);\n      return shouldContextRecreate || shouldOutletRecreate;\n    };\n    const recreateView = shouldRecreateView(changes);\n    if (recreateView) {\n      /** recreate view when context shape or outlet change **/\n      this.recreateView();\n    } else {\n      /** update context **/\n      this.updateContext();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NzStringTemplateOutletDirective } from './string_template_outlet.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [NzStringTemplateOutletDirective],\n  declarations: [NzStringTemplateOutletDirective]\n})\nexport class NzOutletModule {}\n"]}