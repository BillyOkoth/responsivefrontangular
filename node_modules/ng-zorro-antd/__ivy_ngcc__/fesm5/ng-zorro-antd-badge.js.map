{"version":3,"file":"ng-zorro-antd-badge.js","sources":["ng:/ng-zorro-antd/badge/preset-colors.ts","ng:/ng-zorro-antd/badge/badge.component.ts","ng:/ng-zorro-antd/badge/badge.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport const badgePresetColors: ReadonlyArray<string> = [\n  'pink',\n  'red',\n  'yellow',\n  'orange',\n  'cyan',\n  'green',\n  'blue',\n  'purple',\n  'geekblue',\n  'magenta',\n  'volcano',\n  'gold',\n  'lime'\n];\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ContentObserver } from '@angular/cdk/observers';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { zoomBadgeMotion } from 'ng-zorro-antd/core/animation';\nimport { NzConfigService, WithConfig } from 'ng-zorro-antd/core/config';\nimport { BooleanInput } from 'ng-zorro-antd/core/types';\nimport { InputBoolean, isEmpty } from 'ng-zorro-antd/core/util';\nimport { Subject } from 'rxjs';\nimport { startWith, take, takeUntil } from 'rxjs/operators';\n\nimport { badgePresetColors } from './preset-colors';\nimport { NzBadgeStatusType } from './types';\n\nconst NZ_CONFIG_COMPONENT_NAME = 'backTop';\n\n@Component({\n  selector: 'nz-badge',\n  exportAs: 'nzBadge',\n  preserveWhitespaces: false,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [zoomBadgeMotion],\n  template: `\n    <span #contentElement><ng-content></ng-content></span>\n    <span\n      class=\"ant-badge-status-dot ant-badge-status-{{ nzStatus || presetColor }}\"\n      [style.background]=\"!presetColor && nzColor\"\n      *ngIf=\"nzStatus || nzColor\"\n      [ngStyle]=\"nzStyle\"\n    ></span>\n    <span class=\"ant-badge-status-text\" *ngIf=\"nzStatus || nzColor\">{{ nzText }}</span>\n    <ng-container *nzStringTemplateOutlet=\"nzCount\">\n      <sup\n        class=\"ant-scroll-number\"\n        *ngIf=\"showSup && viewInit\"\n        [@.disabled]=\"notWrapper\"\n        [@zoomBadgeMotion]\n        [ngStyle]=\"nzStyle\"\n        [attr.title]=\"nzTitle === null ? '' : nzTitle || nzCount\"\n        [style.right.px]=\"nzOffset && nzOffset[0] ? -nzOffset[0] : null\"\n        [style.marginTop.px]=\"nzOffset && nzOffset[1] ? nzOffset[1] : null\"\n        [class.ant-badge-count]=\"!nzDot\"\n        [class.ant-badge-dot]=\"nzDot\"\n        [class.ant-badge-multiple-words]=\"countArray.length >= 2\"\n      >\n        <ng-container *ngFor=\"let n of maxNumberArray; let i = index\">\n          <span\n            class=\"ant-scroll-number-only\"\n            *ngIf=\"count <= nzOverflowCount\"\n            [style.transform]=\"'translateY(' + -countArray[i] * 100 + '%)'\"\n          >\n            <ng-container *ngIf=\"!nzDot && countArray[i] !== undefined\">\n              <p *ngFor=\"let p of countSingleArray\" class=\"ant-scroll-number-only-unit\" [class.current]=\"p === countArray[i]\">\n                {{ p }}\n              </p>\n            </ng-container>\n          </span>\n        </ng-container>\n        <ng-container *ngIf=\"count > nzOverflowCount\">{{ nzOverflowCount }}+</ng-container>\n      </sup>\n    </ng-container>\n  `,\n  host: {\n    class: 'ant-badge',\n    '[class.ant-badge-status]': 'nzStatus'\n  }\n})\nexport class NzBadgeComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\n  static ngAcceptInputType_nzShowZero: BooleanInput;\n  static ngAcceptInputType_nzShowDot: BooleanInput;\n  static ngAcceptInputType_nzDot: BooleanInput;\n\n  private destroy$ = new Subject();\n  notWrapper = true;\n  viewInit = false;\n  maxNumberArray: string[] = [];\n  countArray: number[] = [];\n  countSingleArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  presetColor: string | null = null;\n  count: number;\n  @ViewChild('contentElement', { static: false }) contentElement: ElementRef;\n  @Input() @InputBoolean() nzShowZero: boolean = false;\n  @Input() @InputBoolean() nzShowDot = true;\n  @Input() @InputBoolean() nzDot = false;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME, 99) nzOverflowCount: number;\n  @Input() nzText: string;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME) nzColor: string;\n  @Input() nzTitle: string;\n  @Input() nzStyle: { [key: string]: string };\n  @Input() nzStatus: NzBadgeStatusType;\n  @Input() nzCount: number | TemplateRef<void>;\n  @Input() nzOffset: [number, number];\n\n  checkContent(): void {\n    this.notWrapper = isEmpty(this.contentElement.nativeElement);\n    if (this.notWrapper) {\n      this.renderer.addClass(this.elementRef.nativeElement, 'ant-badge-not-a-wrapper');\n    } else {\n      this.renderer.removeClass(this.elementRef.nativeElement, 'ant-badge-not-a-wrapper');\n    }\n  }\n\n  get showSup(): boolean {\n    return (this.nzShowDot && this.nzDot) || this.count > 0 || (this.count === 0 && this.nzShowZero);\n  }\n\n  generateMaxNumberArray(): void {\n    this.maxNumberArray = this.nzOverflowCount.toString().split('');\n  }\n\n  constructor(\n    public nzConfigService: NzConfigService,\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    private contentObserver: ContentObserver,\n    private cdr: ChangeDetectorRef,\n    private ngZone: NgZone\n  ) {}\n\n  ngOnInit(): void {\n    this.generateMaxNumberArray();\n  }\n\n  ngAfterViewInit(): void {\n    this.ngZone.onStable.pipe(take(1)).subscribe(() => {\n      this.viewInit = true;\n      this.cdr.markForCheck();\n    });\n\n    this.contentObserver\n      .observe(this.contentElement)\n      .pipe(startWith(true), takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.checkContent();\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { nzOverflowCount, nzCount, nzColor } = changes;\n    if (nzCount && !(nzCount.currentValue instanceof TemplateRef)) {\n      this.count = Math.max(0, nzCount.currentValue);\n      this.countArray = this.count\n        .toString()\n        .split('')\n        .map(item => +item);\n    }\n    if (nzOverflowCount) {\n      this.generateMaxNumberArray();\n    }\n    if (nzColor) {\n      this.presetColor = badgePresetColors.indexOf(this.nzColor) !== -1 ? this.nzColor : null;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\n\nimport { NzBadgeComponent } from './badge.component';\n\n@NgModule({\n  declarations: [NzBadgeComponent],\n  exports: [NzBadgeComponent],\n  imports: [CommonModule, ObserversModule, NzOutletModule]\n})\nexport class NzBadgeModule {}\n"]}