{"version":3,"file":"ng-zorro-antd-core-resize-observers.js","sources":["ng:/ng-zorro-antd/core/resize-observers/resize-observers.service.ts","ng:/ng-zorro-antd/core/resize-observers/resize-observers.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { ElementRef, Injectable, OnDestroy } from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Observable, Observer, Subject } from 'rxjs';\n\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n */\n@Injectable({ providedIn: 'root' })\nexport class NzResizeObserverFactory {\n  create(callback: ResizeObserverCallback): ResizeObserver | null {\n    return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n  }\n}\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({ providedIn: 'root' })\nexport class NzResizeObserver implements OnDestroy {\n  /** Keeps track of the existing ResizeObservers so they can be reused. */\n  private observedElements = new Map<\n    Element,\n    {\n      observer: ResizeObserver | null;\n      stream: Subject<ResizeObserverEntry[]>;\n      count: number;\n    }\n  >();\n\n  constructor(private nzResizeObserverFactory: NzResizeObserverFactory) {}\n\n  ngOnDestroy(): void {\n    this.observedElements.forEach((_, element) => this.cleanupObserver(element));\n  }\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<ResizeObserverEntry[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<ResizeObserverEntry[]>) => {\n      const stream = this.observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this.unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing ResizeObserver if available, or creating a\n   * new one if not.\n   */\n  private observeElement(element: Element): Subject<ResizeObserverEntry[]> {\n    if (!this.observedElements.has(element)) {\n      const stream = new Subject<ResizeObserverEntry[]>();\n      const observer = this.nzResizeObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element);\n      }\n      this.observedElements.set(element, { observer, stream, count: 1 });\n    } else {\n      this.observedElements.get(element)!.count++;\n    }\n    return this.observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\n   * observing this element.\n   */\n  private unobserveElement(element: Element): void {\n    if (this.observedElements.has(element)) {\n      this.observedElements.get(element)!.count--;\n      if (!this.observedElements.get(element)!.count) {\n        this.cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying ResizeObserver for the specified element. */\n  private cleanupObserver(element: Element): void {\n    if (this.observedElements.has(element)) {\n      const { observer, stream } = this.observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this.observedElements.delete(element);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NgModule } from '@angular/core';\nimport { NzResizeObserverFactory } from './resize-observers.service';\n\n@NgModule({\n  providers: [NzResizeObserverFactory]\n})\nexport class NzResizeObserversModule {}\n"]}