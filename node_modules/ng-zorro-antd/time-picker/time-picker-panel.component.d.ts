/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectorRef, DebugElement, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { BooleanInput } from 'ng-zorro-antd/core/types';
import { DateHelperService } from 'ng-zorro-antd/i18n';
import { TimeHolder } from './time-holder';
import { NzTimeValueAccessorDirective } from './time-value-accessor.directive';
import * as ɵngcc0 from '@angular/core';
export declare type NzTimePickerUnit = 'hour' | 'minute' | 'second' | '12-hour';
export declare class NzTimePickerPanelComponent implements ControlValueAccessor, OnInit, OnDestroy, OnChanges {
    private cdr;
    dateHelper: DateHelperService;
    static ngAcceptInputType_nzUse12Hours: BooleanInput;
    private _nzHourStep;
    private _nzMinuteStep;
    private _nzSecondStep;
    private unsubscribe$;
    private onChange;
    private onTouch;
    private _format;
    private _disabledHours;
    private _disabledMinutes;
    private _disabledSeconds;
    private _allowEmpty;
    time: TimeHolder;
    hourEnabled: boolean;
    minuteEnabled: boolean;
    secondEnabled: boolean;
    firstScrolled: boolean;
    enabledColumns: number;
    hourRange: ReadonlyArray<{
        index: number;
        disabled: boolean;
    }>;
    minuteRange: ReadonlyArray<{
        index: number;
        disabled: boolean;
    }>;
    secondRange: ReadonlyArray<{
        index: number;
        disabled: boolean;
    }>;
    use12HoursRange: ReadonlyArray<{
        index: number;
        value: string;
    }>;
    nzTimeValueAccessorDirective: NzTimeValueAccessorDirective;
    hourListElement: DebugElement;
    minuteListElement: DebugElement;
    secondListElement: DebugElement;
    use12HoursListElement: DebugElement;
    nzInDatePicker: boolean;
    nzAddOn: TemplateRef<void>;
    nzHideDisabledOptions: boolean;
    nzClearText: string;
    nzPlaceHolder: string;
    nzUse12Hours: boolean;
    nzDefaultOpenValue: Date;
    readonly closePanel: EventEmitter<void>;
    set nzAllowEmpty(value: boolean);
    get nzAllowEmpty(): boolean;
    set nzDisabledHours(value: () => number[]);
    get nzDisabledHours(): () => number[];
    set nzDisabledMinutes(value: (hour: number) => number[]);
    get nzDisabledMinutes(): (hour: number) => number[];
    set nzDisabledSeconds(value: (hour: number, minute: number) => number[]);
    get nzDisabledSeconds(): (hour: number, minute: number) => number[];
    set format(value: string);
    get format(): string;
    set nzHourStep(value: number);
    get nzHourStep(): number;
    set nzMinuteStep(value: number);
    get nzMinuteStep(): number;
    set nzSecondStep(value: number);
    get nzSecondStep(): number;
    selectInputRange(): void;
    buildHours(): void;
    buildMinutes(): void;
    buildSeconds(): void;
    build12Hours(): void;
    buildTimes(): void;
    scrollToTime(delay?: number): void;
    selectHour(hour: {
        index: number;
        disabled: boolean;
    }): void;
    selectMinute(minute: {
        index: number;
        disabled: boolean;
    }): void;
    selectSecond(second: {
        index: number;
        disabled: boolean;
    }): void;
    select12Hours(value: {
        index: number;
        value: string;
    }): void;
    scrollToSelected(instance: HTMLElement, index: number, duration: number | undefined, unit: NzTimePickerUnit): void;
    translateIndex(index: number, unit: NzTimePickerUnit): number;
    scrollTo(element: HTMLElement, to: number, duration: number): void;
    calcIndex(array: number[] | undefined, index: number): number;
    protected changed(): void;
    protected touched(): void;
    timeDisabled(value: Date): boolean;
    onClickNow(): void;
    isSelectedHour(hour: {
        index: number;
        disabled: boolean;
    }): boolean;
    isSelectedMinute(minute: {
        index: number;
        disabled: boolean;
    }): boolean;
    isSelectedSecond(second: {
        index: number;
        disabled: boolean;
    }): boolean;
    isSelected12Hours(value: {
        index: number;
        value: string;
    }): boolean;
    constructor(cdr: ChangeDetectorRef, dateHelper: DateHelperService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    writeValue(value: Date): void;
    registerOnChange(fn: (value: Date) => void): void;
    registerOnTouched(fn: () => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTimePickerPanelComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzTimePickerPanelComponent, "nz-time-picker-panel", ["nzTimePickerPanel"], { "nzInDatePicker": "nzInDatePicker"; "nzHideDisabledOptions": "nzHideDisabledOptions"; "nzUse12Hours": "nzUse12Hours"; "nzAllowEmpty": "nzAllowEmpty"; "nzDisabledHours": "nzDisabledHours"; "nzDisabledMinutes": "nzDisabledMinutes"; "nzDisabledSeconds": "nzDisabledSeconds"; "format": "format"; "nzHourStep": "nzHourStep"; "nzMinuteStep": "nzMinuteStep"; "nzSecondStep": "nzSecondStep"; "nzAddOn": "nzAddOn"; "nzClearText": "nzClearText"; "nzPlaceHolder": "nzPlaceHolder"; "nzDefaultOpenValue": "nzDefaultOpenValue"; }, { "closePanel": "closePanel"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1waWNrZXItcGFuZWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRpbWUtcGlja2VyLXBhbmVsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBbGliYWJhLmNvbSBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIERlYnVnRWxlbWVudCwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBCb29sZWFuSW5wdXQgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgRGF0ZUhlbHBlclNlcnZpY2UgfSBmcm9tICduZy16b3Jyby1hbnRkL2kxOG4nO1xuaW1wb3J0IHsgVGltZUhvbGRlciB9IGZyb20gJy4vdGltZS1ob2xkZXInO1xuaW1wb3J0IHsgTnpUaW1lVmFsdWVBY2Nlc3NvckRpcmVjdGl2ZSB9IGZyb20gJy4vdGltZS12YWx1ZS1hY2Nlc3Nvci5kaXJlY3RpdmUnO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBOelRpbWVQaWNrZXJVbml0ID0gJ2hvdXInIHwgJ21pbnV0ZScgfCAnc2Vjb25kJyB8ICcxMi1ob3VyJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE56VGltZVBpY2tlclBhbmVsQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xuICAgIHByaXZhdGUgY2RyO1xuICAgIGRhdGVIZWxwZXI6IERhdGVIZWxwZXJTZXJ2aWNlO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uelVzZTEySG91cnM6IEJvb2xlYW5JbnB1dDtcbiAgICBwcml2YXRlIF9uekhvdXJTdGVwO1xuICAgIHByaXZhdGUgX256TWludXRlU3RlcDtcbiAgICBwcml2YXRlIF9uelNlY29uZFN0ZXA7XG4gICAgcHJpdmF0ZSB1bnN1YnNjcmliZSQ7XG4gICAgcHJpdmF0ZSBvbkNoYW5nZTtcbiAgICBwcml2YXRlIG9uVG91Y2g7XG4gICAgcHJpdmF0ZSBfZm9ybWF0O1xuICAgIHByaXZhdGUgX2Rpc2FibGVkSG91cnM7XG4gICAgcHJpdmF0ZSBfZGlzYWJsZWRNaW51dGVzO1xuICAgIHByaXZhdGUgX2Rpc2FibGVkU2Vjb25kcztcbiAgICBwcml2YXRlIF9hbGxvd0VtcHR5O1xuICAgIHRpbWU6IFRpbWVIb2xkZXI7XG4gICAgaG91ckVuYWJsZWQ6IGJvb2xlYW47XG4gICAgbWludXRlRW5hYmxlZDogYm9vbGVhbjtcbiAgICBzZWNvbmRFbmFibGVkOiBib29sZWFuO1xuICAgIGZpcnN0U2Nyb2xsZWQ6IGJvb2xlYW47XG4gICAgZW5hYmxlZENvbHVtbnM6IG51bWJlcjtcbiAgICBob3VyUmFuZ2U6IFJlYWRvbmx5QXJyYXk8e1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICB9PjtcbiAgICBtaW51dGVSYW5nZTogUmVhZG9ubHlBcnJheTx7XG4gICAgICAgIGluZGV4OiBudW1iZXI7XG4gICAgICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIH0+O1xuICAgIHNlY29uZFJhbmdlOiBSZWFkb25seUFycmF5PHtcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcbiAgICAgICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgfT47XG4gICAgdXNlMTJIb3Vyc1JhbmdlOiBSZWFkb25seUFycmF5PHtcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcbiAgICAgICAgdmFsdWU6IHN0cmluZztcbiAgICB9PjtcbiAgICBuelRpbWVWYWx1ZUFjY2Vzc29yRGlyZWN0aXZlOiBOelRpbWVWYWx1ZUFjY2Vzc29yRGlyZWN0aXZlO1xuICAgIGhvdXJMaXN0RWxlbWVudDogRGVidWdFbGVtZW50O1xuICAgIG1pbnV0ZUxpc3RFbGVtZW50OiBEZWJ1Z0VsZW1lbnQ7XG4gICAgc2Vjb25kTGlzdEVsZW1lbnQ6IERlYnVnRWxlbWVudDtcbiAgICB1c2UxMkhvdXJzTGlzdEVsZW1lbnQ6IERlYnVnRWxlbWVudDtcbiAgICBuekluRGF0ZVBpY2tlcjogYm9vbGVhbjtcbiAgICBuekFkZE9uOiBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgICBuekhpZGVEaXNhYmxlZE9wdGlvbnM6IGJvb2xlYW47XG4gICAgbnpDbGVhclRleHQ6IHN0cmluZztcbiAgICBuelBsYWNlSG9sZGVyOiBzdHJpbmc7XG4gICAgbnpVc2UxMkhvdXJzOiBib29sZWFuO1xuICAgIG56RGVmYXVsdE9wZW5WYWx1ZTogRGF0ZTtcbiAgICByZWFkb25seSBjbG9zZVBhbmVsOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgc2V0IG56QWxsb3dFbXB0eSh2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IG56QWxsb3dFbXB0eSgpOiBib29sZWFuO1xuICAgIHNldCBuekRpc2FibGVkSG91cnModmFsdWU6ICgpID0+IG51bWJlcltdKTtcbiAgICBnZXQgbnpEaXNhYmxlZEhvdXJzKCk6ICgpID0+IG51bWJlcltdO1xuICAgIHNldCBuekRpc2FibGVkTWludXRlcyh2YWx1ZTogKGhvdXI6IG51bWJlcikgPT4gbnVtYmVyW10pO1xuICAgIGdldCBuekRpc2FibGVkTWludXRlcygpOiAoaG91cjogbnVtYmVyKSA9PiBudW1iZXJbXTtcbiAgICBzZXQgbnpEaXNhYmxlZFNlY29uZHModmFsdWU6IChob3VyOiBudW1iZXIsIG1pbnV0ZTogbnVtYmVyKSA9PiBudW1iZXJbXSk7XG4gICAgZ2V0IG56RGlzYWJsZWRTZWNvbmRzKCk6IChob3VyOiBudW1iZXIsIG1pbnV0ZTogbnVtYmVyKSA9PiBudW1iZXJbXTtcbiAgICBzZXQgZm9ybWF0KHZhbHVlOiBzdHJpbmcpO1xuICAgIGdldCBmb3JtYXQoKTogc3RyaW5nO1xuICAgIHNldCBuekhvdXJTdGVwKHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCBuekhvdXJTdGVwKCk6IG51bWJlcjtcbiAgICBzZXQgbnpNaW51dGVTdGVwKHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCBuek1pbnV0ZVN0ZXAoKTogbnVtYmVyO1xuICAgIHNldCBuelNlY29uZFN0ZXAodmFsdWU6IG51bWJlcik7XG4gICAgZ2V0IG56U2Vjb25kU3RlcCgpOiBudW1iZXI7XG4gICAgc2VsZWN0SW5wdXRSYW5nZSgpOiB2b2lkO1xuICAgIGJ1aWxkSG91cnMoKTogdm9pZDtcbiAgICBidWlsZE1pbnV0ZXMoKTogdm9pZDtcbiAgICBidWlsZFNlY29uZHMoKTogdm9pZDtcbiAgICBidWlsZDEySG91cnMoKTogdm9pZDtcbiAgICBidWlsZFRpbWVzKCk6IHZvaWQ7XG4gICAgc2Nyb2xsVG9UaW1lKGRlbGF5PzogbnVtYmVyKTogdm9pZDtcbiAgICBzZWxlY3RIb3VyKGhvdXI6IHtcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcbiAgICAgICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgfSk6IHZvaWQ7XG4gICAgc2VsZWN0TWludXRlKG1pbnV0ZToge1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICB9KTogdm9pZDtcbiAgICBzZWxlY3RTZWNvbmQoc2Vjb25kOiB7XG4gICAgICAgIGluZGV4OiBudW1iZXI7XG4gICAgICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIH0pOiB2b2lkO1xuICAgIHNlbGVjdDEySG91cnModmFsdWU6IHtcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcbiAgICAgICAgdmFsdWU6IHN0cmluZztcbiAgICB9KTogdm9pZDtcbiAgICBzY3JvbGxUb1NlbGVjdGVkKGluc3RhbmNlOiBIVE1MRWxlbWVudCwgaW5kZXg6IG51bWJlciwgZHVyYXRpb246IG51bWJlciB8IHVuZGVmaW5lZCwgdW5pdDogTnpUaW1lUGlja2VyVW5pdCk6IHZvaWQ7XG4gICAgdHJhbnNsYXRlSW5kZXgoaW5kZXg6IG51bWJlciwgdW5pdDogTnpUaW1lUGlja2VyVW5pdCk6IG51bWJlcjtcbiAgICBzY3JvbGxUbyhlbGVtZW50OiBIVE1MRWxlbWVudCwgdG86IG51bWJlciwgZHVyYXRpb246IG51bWJlcik6IHZvaWQ7XG4gICAgY2FsY0luZGV4KGFycmF5OiBudW1iZXJbXSB8IHVuZGVmaW5lZCwgaW5kZXg6IG51bWJlcik6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgY2hhbmdlZCgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB0b3VjaGVkKCk6IHZvaWQ7XG4gICAgdGltZURpc2FibGVkKHZhbHVlOiBEYXRlKTogYm9vbGVhbjtcbiAgICBvbkNsaWNrTm93KCk6IHZvaWQ7XG4gICAgaXNTZWxlY3RlZEhvdXIoaG91cjoge1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICB9KTogYm9vbGVhbjtcbiAgICBpc1NlbGVjdGVkTWludXRlKG1pbnV0ZToge1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICB9KTogYm9vbGVhbjtcbiAgICBpc1NlbGVjdGVkU2Vjb25kKHNlY29uZDoge1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICB9KTogYm9vbGVhbjtcbiAgICBpc1NlbGVjdGVkMTJIb3Vycyh2YWx1ZToge1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgIH0pOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGRhdGVIZWxwZXI6IERhdGVIZWxwZXJTZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogRGF0ZSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBEYXRlKSA9PiB2b2lkKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG59XG4iXX0=