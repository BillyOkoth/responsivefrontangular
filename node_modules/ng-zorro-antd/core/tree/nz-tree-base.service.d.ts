/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { NzSafeAny } from 'ng-zorro-antd/core/types';
import { BehaviorSubject } from 'rxjs';
import { NzTreeNode, NzTreeNodeKey } from './nz-tree-base-node';
import { NzFormatEmitEvent } from './nz-tree-base.definitions';
import * as ɵngcc0 from '@angular/core';
export declare class NzTreeBaseService {
    DRAG_SIDE_RANGE: number;
    DRAG_MIN_GAP: number;
    isCheckStrictly: boolean;
    isMultiple: boolean;
    selectedNode: NzTreeNode;
    rootNodes: NzTreeNode[];
    flattenNodes$: BehaviorSubject<NzTreeNode[]>;
    selectedNodeList: NzTreeNode[];
    expandedNodeList: NzTreeNode[];
    checkedNodeList: NzTreeNode[];
    halfCheckedNodeList: NzTreeNode[];
    matchedNodeList: NzTreeNode[];
    /**
     * reset tree nodes will clear default node list
     */
    initTree(nzNodes: NzTreeNode[]): void;
    flattenTreeData(nzNodes: NzTreeNode[], expandedKeys?: NzTreeNodeKey[] | true): void;
    getSelectedNode(): NzTreeNode | null;
    /**
     * get some list
     */
    getSelectedNodeList(): NzTreeNode[];
    /**
     * return checked nodes
     */
    getCheckedNodeList(): NzTreeNode[];
    getHalfCheckedNodeList(): NzTreeNode[];
    /**
     * return expanded nodes
     */
    getExpandedNodeList(): NzTreeNode[];
    /**
     * return search matched nodes
     */
    getMatchedNodeList(): NzTreeNode[];
    isArrayOfNzTreeNode(value: NzSafeAny[]): boolean;
    /**
     * set drag node
     */
    setSelectedNode(node: NzTreeNode): void;
    /**
     * set node selected status
     */
    setNodeActive(node: NzTreeNode): void;
    /**
     * add or remove node to selectedNodeList
     */
    setSelectedNodeList(node: NzTreeNode, isMultiple?: boolean): void;
    /**
     * merge checked nodes
     */
    setHalfCheckedNodeList(node: NzTreeNode): void;
    setCheckedNodeList(node: NzTreeNode): void;
    /**
     * conduct checked/selected/expanded keys
     */
    conductNodeState(type?: string): NzTreeNode[];
    /**
     * set expanded nodes
     */
    setExpandedNodeList(node: NzTreeNode): void;
    setMatchedNodeList(node: NzTreeNode): void;
    /**
     * check state
     * @param isCheckStrictly
     */
    refreshCheckState(isCheckStrictly?: boolean): void;
    conduct(node: NzTreeNode): void;
    /**
     * 1、children half checked
     * 2、children all checked, parent checked
     * 3、no children checked
     */
    conductUp(node: NzTreeNode): void;
    /**
     * reset child check state
     */
    conductDown(node: NzTreeNode, value: boolean): void;
    /**
     * flush after delete node
     */
    afterRemove(nodes: NzTreeNode[]): void;
    /**
     * drag event
     */
    refreshDragNode(node: NzTreeNode): void;
    resetNodeLevel(node: NzTreeNode): void;
    calcDropPosition(event: DragEvent): number;
    /**
     * drop
     * 0: inner -1: pre 1: next
     */
    dropAndApply(targetNode: NzTreeNode, dragPos?: number): void;
    /**
     * emit Structure
     * eventName
     * node
     * event: MouseEvent / DragEvent
     * dragNode
     */
    formatEvent(eventName: string, node: NzTreeNode | null, event: MouseEvent | DragEvent | null): NzFormatEmitEvent;
    /**
     * New functions for flatten nodes
     */
    getIndexOfArray(list: NzTreeNode[], key: string): number;
    /**
     * Render by nzCheckedKeys
     * @param keys
     * @param checkStrictly
     */
    conductCheck(keys: NzTreeNodeKey[], checkStrictly: boolean): void;
    conductExpandedKeys(keys?: NzTreeNodeKey[] | true): void;
    conductSelectedKeys(keys: NzTreeNodeKey[], isMulti: boolean): void;
    /**
     * Expand parent nodes by child node
     * @param node
     */
    expandNodeAllParentBySearch(node: NzTreeNode): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTreeBaseService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NzTreeBaseService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotdHJlZS1iYXNlLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsibnotdHJlZS1iYXNlLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFsaWJhYmEuY29tIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBOelNhZmVBbnkgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOelRyZWVOb2RlLCBOelRyZWVOb2RlS2V5IH0gZnJvbSAnLi9uei10cmVlLWJhc2Utbm9kZSc7XG5pbXBvcnQgeyBOekZvcm1hdEVtaXRFdmVudCB9IGZyb20gJy4vbnotdHJlZS1iYXNlLmRlZmluaXRpb25zJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE56VHJlZUJhc2VTZXJ2aWNlIHtcbiAgICBEUkFHX1NJREVfUkFOR0U6IG51bWJlcjtcbiAgICBEUkFHX01JTl9HQVA6IG51bWJlcjtcbiAgICBpc0NoZWNrU3RyaWN0bHk6IGJvb2xlYW47XG4gICAgaXNNdWx0aXBsZTogYm9vbGVhbjtcbiAgICBzZWxlY3RlZE5vZGU6IE56VHJlZU5vZGU7XG4gICAgcm9vdE5vZGVzOiBOelRyZWVOb2RlW107XG4gICAgZmxhdHRlbk5vZGVzJDogQmVoYXZpb3JTdWJqZWN0PE56VHJlZU5vZGVbXT47XG4gICAgc2VsZWN0ZWROb2RlTGlzdDogTnpUcmVlTm9kZVtdO1xuICAgIGV4cGFuZGVkTm9kZUxpc3Q6IE56VHJlZU5vZGVbXTtcbiAgICBjaGVja2VkTm9kZUxpc3Q6IE56VHJlZU5vZGVbXTtcbiAgICBoYWxmQ2hlY2tlZE5vZGVMaXN0OiBOelRyZWVOb2RlW107XG4gICAgbWF0Y2hlZE5vZGVMaXN0OiBOelRyZWVOb2RlW107XG4gICAgLyoqXG4gICAgICogcmVzZXQgdHJlZSBub2RlcyB3aWxsIGNsZWFyIGRlZmF1bHQgbm9kZSBsaXN0XG4gICAgICovXG4gICAgaW5pdFRyZWUobnpOb2RlczogTnpUcmVlTm9kZVtdKTogdm9pZDtcbiAgICBmbGF0dGVuVHJlZURhdGEobnpOb2RlczogTnpUcmVlTm9kZVtdLCBleHBhbmRlZEtleXM/OiBOelRyZWVOb2RlS2V5W10gfCB0cnVlKTogdm9pZDtcbiAgICBnZXRTZWxlY3RlZE5vZGUoKTogTnpUcmVlTm9kZSB8IG51bGw7XG4gICAgLyoqXG4gICAgICogZ2V0IHNvbWUgbGlzdFxuICAgICAqL1xuICAgIGdldFNlbGVjdGVkTm9kZUxpc3QoKTogTnpUcmVlTm9kZVtdO1xuICAgIC8qKlxuICAgICAqIHJldHVybiBjaGVja2VkIG5vZGVzXG4gICAgICovXG4gICAgZ2V0Q2hlY2tlZE5vZGVMaXN0KCk6IE56VHJlZU5vZGVbXTtcbiAgICBnZXRIYWxmQ2hlY2tlZE5vZGVMaXN0KCk6IE56VHJlZU5vZGVbXTtcbiAgICAvKipcbiAgICAgKiByZXR1cm4gZXhwYW5kZWQgbm9kZXNcbiAgICAgKi9cbiAgICBnZXRFeHBhbmRlZE5vZGVMaXN0KCk6IE56VHJlZU5vZGVbXTtcbiAgICAvKipcbiAgICAgKiByZXR1cm4gc2VhcmNoIG1hdGNoZWQgbm9kZXNcbiAgICAgKi9cbiAgICBnZXRNYXRjaGVkTm9kZUxpc3QoKTogTnpUcmVlTm9kZVtdO1xuICAgIGlzQXJyYXlPZk56VHJlZU5vZGUodmFsdWU6IE56U2FmZUFueVtdKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBzZXQgZHJhZyBub2RlXG4gICAgICovXG4gICAgc2V0U2VsZWN0ZWROb2RlKG5vZGU6IE56VHJlZU5vZGUpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIHNldCBub2RlIHNlbGVjdGVkIHN0YXR1c1xuICAgICAqL1xuICAgIHNldE5vZGVBY3RpdmUobm9kZTogTnpUcmVlTm9kZSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogYWRkIG9yIHJlbW92ZSBub2RlIHRvIHNlbGVjdGVkTm9kZUxpc3RcbiAgICAgKi9cbiAgICBzZXRTZWxlY3RlZE5vZGVMaXN0KG5vZGU6IE56VHJlZU5vZGUsIGlzTXVsdGlwbGU/OiBib29sZWFuKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBtZXJnZSBjaGVja2VkIG5vZGVzXG4gICAgICovXG4gICAgc2V0SGFsZkNoZWNrZWROb2RlTGlzdChub2RlOiBOelRyZWVOb2RlKTogdm9pZDtcbiAgICBzZXRDaGVja2VkTm9kZUxpc3Qobm9kZTogTnpUcmVlTm9kZSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogY29uZHVjdCBjaGVja2VkL3NlbGVjdGVkL2V4cGFuZGVkIGtleXNcbiAgICAgKi9cbiAgICBjb25kdWN0Tm9kZVN0YXRlKHR5cGU/OiBzdHJpbmcpOiBOelRyZWVOb2RlW107XG4gICAgLyoqXG4gICAgICogc2V0IGV4cGFuZGVkIG5vZGVzXG4gICAgICovXG4gICAgc2V0RXhwYW5kZWROb2RlTGlzdChub2RlOiBOelRyZWVOb2RlKTogdm9pZDtcbiAgICBzZXRNYXRjaGVkTm9kZUxpc3Qobm9kZTogTnpUcmVlTm9kZSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogY2hlY2sgc3RhdGVcbiAgICAgKiBAcGFyYW0gaXNDaGVja1N0cmljdGx5XG4gICAgICovXG4gICAgcmVmcmVzaENoZWNrU3RhdGUoaXNDaGVja1N0cmljdGx5PzogYm9vbGVhbik6IHZvaWQ7XG4gICAgY29uZHVjdChub2RlOiBOelRyZWVOb2RlKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiAx44CBY2hpbGRyZW4gaGFsZiBjaGVja2VkXG4gICAgICogMuOAgWNoaWxkcmVuIGFsbCBjaGVja2VkLCBwYXJlbnQgY2hlY2tlZFxuICAgICAqIDPjgIFubyBjaGlsZHJlbiBjaGVja2VkXG4gICAgICovXG4gICAgY29uZHVjdFVwKG5vZGU6IE56VHJlZU5vZGUpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIHJlc2V0IGNoaWxkIGNoZWNrIHN0YXRlXG4gICAgICovXG4gICAgY29uZHVjdERvd24obm9kZTogTnpUcmVlTm9kZSwgdmFsdWU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIGZsdXNoIGFmdGVyIGRlbGV0ZSBub2RlXG4gICAgICovXG4gICAgYWZ0ZXJSZW1vdmUobm9kZXM6IE56VHJlZU5vZGVbXSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogZHJhZyBldmVudFxuICAgICAqL1xuICAgIHJlZnJlc2hEcmFnTm9kZShub2RlOiBOelRyZWVOb2RlKTogdm9pZDtcbiAgICByZXNldE5vZGVMZXZlbChub2RlOiBOelRyZWVOb2RlKTogdm9pZDtcbiAgICBjYWxjRHJvcFBvc2l0aW9uKGV2ZW50OiBEcmFnRXZlbnQpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogZHJvcFxuICAgICAqIDA6IGlubmVyIC0xOiBwcmUgMTogbmV4dFxuICAgICAqL1xuICAgIGRyb3BBbmRBcHBseSh0YXJnZXROb2RlOiBOelRyZWVOb2RlLCBkcmFnUG9zPzogbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBlbWl0IFN0cnVjdHVyZVxuICAgICAqIGV2ZW50TmFtZVxuICAgICAqIG5vZGVcbiAgICAgKiBldmVudDogTW91c2VFdmVudCAvIERyYWdFdmVudFxuICAgICAqIGRyYWdOb2RlXG4gICAgICovXG4gICAgZm9ybWF0RXZlbnQoZXZlbnROYW1lOiBzdHJpbmcsIG5vZGU6IE56VHJlZU5vZGUgfCBudWxsLCBldmVudDogTW91c2VFdmVudCB8IERyYWdFdmVudCB8IG51bGwpOiBOekZvcm1hdEVtaXRFdmVudDtcbiAgICAvKipcbiAgICAgKiBOZXcgZnVuY3Rpb25zIGZvciBmbGF0dGVuIG5vZGVzXG4gICAgICovXG4gICAgZ2V0SW5kZXhPZkFycmF5KGxpc3Q6IE56VHJlZU5vZGVbXSwga2V5OiBzdHJpbmcpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogUmVuZGVyIGJ5IG56Q2hlY2tlZEtleXNcbiAgICAgKiBAcGFyYW0ga2V5c1xuICAgICAqIEBwYXJhbSBjaGVja1N0cmljdGx5XG4gICAgICovXG4gICAgY29uZHVjdENoZWNrKGtleXM6IE56VHJlZU5vZGVLZXlbXSwgY2hlY2tTdHJpY3RseTogYm9vbGVhbik6IHZvaWQ7XG4gICAgY29uZHVjdEV4cGFuZGVkS2V5cyhrZXlzPzogTnpUcmVlTm9kZUtleVtdIHwgdHJ1ZSk6IHZvaWQ7XG4gICAgY29uZHVjdFNlbGVjdGVkS2V5cyhrZXlzOiBOelRyZWVOb2RlS2V5W10sIGlzTXVsdGk6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEV4cGFuZCBwYXJlbnQgbm9kZXMgYnkgY2hpbGQgbm9kZVxuICAgICAqIEBwYXJhbSBub2RlXG4gICAgICovXG4gICAgZXhwYW5kTm9kZUFsbFBhcmVudEJ5U2VhcmNoKG5vZGU6IE56VHJlZU5vZGUpOiB2b2lkO1xufVxuIl19