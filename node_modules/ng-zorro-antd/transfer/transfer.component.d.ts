/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { BooleanInput, NzSafeAny } from 'ng-zorro-antd/core/types';
import { NzI18nService } from 'ng-zorro-antd/i18n';
import { Observable } from 'rxjs';
import { TransferCanMove, TransferChange, TransferDirection, TransferItem, TransferSearchChange, TransferSelectChange } from './interface';
import * as ɵngcc0 from '@angular/core';
export declare class NzTransferComponent implements OnInit, OnChanges, OnDestroy {
    private cdr;
    private i18n;
    static ngAcceptInputType_nzDisabled: BooleanInput;
    static ngAcceptInputType_nzShowSelectAll: BooleanInput;
    static ngAcceptInputType_nzShowSearch: BooleanInput;
    private unsubscribe$;
    private lists;
    locale: NzSafeAny;
    leftFilter: string;
    rightFilter: string;
    nzDisabled: boolean;
    nzDataSource: TransferItem[];
    nzTitles: string[];
    nzOperations: string[];
    nzListStyle: object;
    nzShowSelectAll: boolean;
    nzItemUnit: string;
    nzItemsUnit: string;
    nzCanMove: (arg: TransferCanMove) => Observable<TransferItem[]>;
    nzRenderList: Array<TemplateRef<NzSafeAny> | null> | null;
    nzRender: TemplateRef<NzSafeAny>;
    nzFooter: TemplateRef<NzSafeAny>;
    nzShowSearch: boolean;
    nzFilterOption: (inputValue: string, item: TransferItem) => boolean;
    nzSearchPlaceholder: string;
    nzNotFoundContent: string;
    nzTargetKeys: string[];
    nzSelectedKeys: string[];
    readonly nzChange: EventEmitter<TransferChange>;
    readonly nzSearchChange: EventEmitter<TransferSearchChange>;
    readonly nzSelectChange: EventEmitter<TransferSelectChange>;
    leftDataSource: TransferItem[];
    rightDataSource: TransferItem[];
    private splitDataSource;
    private getCheckedData;
    handleLeftSelectAll: (checked: boolean) => void;
    handleRightSelectAll: (checked: boolean) => void;
    handleLeftSelect: (item: TransferItem) => void;
    handleRightSelect: (item: TransferItem) => void;
    handleSelect(direction: TransferDirection, checked: boolean, item?: TransferItem): void;
    handleFilterChange(ret: {
        direction: TransferDirection;
        value: string;
    }): void;
    leftActive: boolean;
    rightActive: boolean;
    private updateOperationStatus;
    moveToLeft: () => void;
    moveToRight: () => void;
    moveTo(direction: TransferDirection): void;
    private truthMoveTo;
    constructor(cdr: ChangeDetectorRef, i18n: NzI18nService);
    private markForCheckAllList;
    private handleNzTargetKeys;
    private handleNzSelectedKeys;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTransferComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzTransferComponent, "nz-transfer", ["nzTransfer"], { "nzDisabled": "nzDisabled"; "nzDataSource": "nzDataSource"; "nzTitles": "nzTitles"; "nzOperations": "nzOperations"; "nzShowSelectAll": "nzShowSelectAll"; "nzCanMove": "nzCanMove"; "nzRenderList": "nzRenderList"; "nzShowSearch": "nzShowSearch"; "nzTargetKeys": "nzTargetKeys"; "nzSelectedKeys": "nzSelectedKeys"; "nzListStyle": "nzListStyle"; "nzItemUnit": "nzItemUnit"; "nzItemsUnit": "nzItemsUnit"; "nzRender": "nzRender"; "nzFooter": "nzFooter"; "nzFilterOption": "nzFilterOption"; "nzSearchPlaceholder": "nzSearchPlaceholder"; "nzNotFoundContent": "nzNotFoundContent"; }, { "nzChange": "nzChange"; "nzSearchChange": "nzSearchChange"; "nzSelectChange": "nzSelectChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRyYW5zZmVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBbGliYWJhLmNvbSBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJvb2xlYW5JbnB1dCwgTnpTYWZlQW55IH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3R5cGVzJztcbmltcG9ydCB7IE56STE4blNlcnZpY2UgfSBmcm9tICduZy16b3Jyby1hbnRkL2kxOG4nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVHJhbnNmZXJDYW5Nb3ZlLCBUcmFuc2ZlckNoYW5nZSwgVHJhbnNmZXJEaXJlY3Rpb24sIFRyYW5zZmVySXRlbSwgVHJhbnNmZXJTZWFyY2hDaGFuZ2UsIFRyYW5zZmVyU2VsZWN0Q2hhbmdlIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnpUcmFuc2ZlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgY2RyO1xuICAgIHByaXZhdGUgaTE4bjtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpEaXNhYmxlZDogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uelNob3dTZWxlY3RBbGw6IEJvb2xlYW5JbnB1dDtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpTaG93U2VhcmNoOiBCb29sZWFuSW5wdXQ7XG4gICAgcHJpdmF0ZSB1bnN1YnNjcmliZSQ7XG4gICAgcHJpdmF0ZSBsaXN0cztcbiAgICBsb2NhbGU6IE56U2FmZUFueTtcbiAgICBsZWZ0RmlsdGVyOiBzdHJpbmc7XG4gICAgcmlnaHRGaWx0ZXI6IHN0cmluZztcbiAgICBuekRpc2FibGVkOiBib29sZWFuO1xuICAgIG56RGF0YVNvdXJjZTogVHJhbnNmZXJJdGVtW107XG4gICAgbnpUaXRsZXM6IHN0cmluZ1tdO1xuICAgIG56T3BlcmF0aW9uczogc3RyaW5nW107XG4gICAgbnpMaXN0U3R5bGU6IG9iamVjdDtcbiAgICBuelNob3dTZWxlY3RBbGw6IGJvb2xlYW47XG4gICAgbnpJdGVtVW5pdDogc3RyaW5nO1xuICAgIG56SXRlbXNVbml0OiBzdHJpbmc7XG4gICAgbnpDYW5Nb3ZlOiAoYXJnOiBUcmFuc2ZlckNhbk1vdmUpID0+IE9ic2VydmFibGU8VHJhbnNmZXJJdGVtW10+O1xuICAgIG56UmVuZGVyTGlzdDogQXJyYXk8VGVtcGxhdGVSZWY8TnpTYWZlQW55PiB8IG51bGw+IHwgbnVsbDtcbiAgICBuelJlbmRlcjogVGVtcGxhdGVSZWY8TnpTYWZlQW55PjtcbiAgICBuekZvb3RlcjogVGVtcGxhdGVSZWY8TnpTYWZlQW55PjtcbiAgICBuelNob3dTZWFyY2g6IGJvb2xlYW47XG4gICAgbnpGaWx0ZXJPcHRpb246IChpbnB1dFZhbHVlOiBzdHJpbmcsIGl0ZW06IFRyYW5zZmVySXRlbSkgPT4gYm9vbGVhbjtcbiAgICBuelNlYXJjaFBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgbnpOb3RGb3VuZENvbnRlbnQ6IHN0cmluZztcbiAgICBuelRhcmdldEtleXM6IHN0cmluZ1tdO1xuICAgIG56U2VsZWN0ZWRLZXlzOiBzdHJpbmdbXTtcbiAgICByZWFkb25seSBuekNoYW5nZTogRXZlbnRFbWl0dGVyPFRyYW5zZmVyQ2hhbmdlPjtcbiAgICByZWFkb25seSBuelNlYXJjaENoYW5nZTogRXZlbnRFbWl0dGVyPFRyYW5zZmVyU2VhcmNoQ2hhbmdlPjtcbiAgICByZWFkb25seSBuelNlbGVjdENoYW5nZTogRXZlbnRFbWl0dGVyPFRyYW5zZmVyU2VsZWN0Q2hhbmdlPjtcbiAgICBsZWZ0RGF0YVNvdXJjZTogVHJhbnNmZXJJdGVtW107XG4gICAgcmlnaHREYXRhU291cmNlOiBUcmFuc2Zlckl0ZW1bXTtcbiAgICBwcml2YXRlIHNwbGl0RGF0YVNvdXJjZTtcbiAgICBwcml2YXRlIGdldENoZWNrZWREYXRhO1xuICAgIGhhbmRsZUxlZnRTZWxlY3RBbGw6IChjaGVja2VkOiBib29sZWFuKSA9PiB2b2lkO1xuICAgIGhhbmRsZVJpZ2h0U2VsZWN0QWxsOiAoY2hlY2tlZDogYm9vbGVhbikgPT4gdm9pZDtcbiAgICBoYW5kbGVMZWZ0U2VsZWN0OiAoaXRlbTogVHJhbnNmZXJJdGVtKSA9PiB2b2lkO1xuICAgIGhhbmRsZVJpZ2h0U2VsZWN0OiAoaXRlbTogVHJhbnNmZXJJdGVtKSA9PiB2b2lkO1xuICAgIGhhbmRsZVNlbGVjdChkaXJlY3Rpb246IFRyYW5zZmVyRGlyZWN0aW9uLCBjaGVja2VkOiBib29sZWFuLCBpdGVtPzogVHJhbnNmZXJJdGVtKTogdm9pZDtcbiAgICBoYW5kbGVGaWx0ZXJDaGFuZ2UocmV0OiB7XG4gICAgICAgIGRpcmVjdGlvbjogVHJhbnNmZXJEaXJlY3Rpb247XG4gICAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgfSk6IHZvaWQ7XG4gICAgbGVmdEFjdGl2ZTogYm9vbGVhbjtcbiAgICByaWdodEFjdGl2ZTogYm9vbGVhbjtcbiAgICBwcml2YXRlIHVwZGF0ZU9wZXJhdGlvblN0YXR1cztcbiAgICBtb3ZlVG9MZWZ0OiAoKSA9PiB2b2lkO1xuICAgIG1vdmVUb1JpZ2h0OiAoKSA9PiB2b2lkO1xuICAgIG1vdmVUbyhkaXJlY3Rpb246IFRyYW5zZmVyRGlyZWN0aW9uKTogdm9pZDtcbiAgICBwcml2YXRlIHRydXRoTW92ZVRvO1xuICAgIGNvbnN0cnVjdG9yKGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGkxOG46IE56STE4blNlcnZpY2UpO1xuICAgIHByaXZhdGUgbWFya0ZvckNoZWNrQWxsTGlzdDtcbiAgICBwcml2YXRlIGhhbmRsZU56VGFyZ2V0S2V5cztcbiAgICBwcml2YXRlIGhhbmRsZU56U2VsZWN0ZWRLZXlzO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==