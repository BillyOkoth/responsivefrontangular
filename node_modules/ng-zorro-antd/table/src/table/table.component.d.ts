/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, TrackByFunction } from '@angular/core';
import { NzConfigService } from 'ng-zorro-antd/core/config';
import { NzResizeObserver } from 'ng-zorro-antd/core/resize-observers';
import { BooleanInput, NzSafeAny } from 'ng-zorro-antd/core/types';
import { PaginationItemRenderContext } from 'ng-zorro-antd/pagination';
import { NzTableDataService } from '../table-data.service';
import { NzTableStyleService } from '../table-style.service';
import { NzTableData, NzTableLayout, NzTablePaginationPosition, NzTableQueryParams, NzTableSize } from '../table.types';
import { NzTableInnerScrollComponent } from './table-inner-scroll.component';
import { NzTableVirtualScrollDirective } from './table-virtual-scroll.directive';
import * as ɵngcc0 from '@angular/core';
export declare class NzTableComponent implements OnInit, OnDestroy, OnChanges, AfterViewInit {
    private elementRef;
    private nzResizeObserver;
    private nzConfigService;
    private cdr;
    private nzTableStyleService;
    private nzTableDataService;
    static ngAcceptInputType_nzFrontPagination: BooleanInput;
    static ngAcceptInputType_nzTemplateMode: BooleanInput;
    static ngAcceptInputType_nzShowPagination: BooleanInput;
    static ngAcceptInputType_nzLoading: BooleanInput;
    static ngAcceptInputType_nzBordered: BooleanInput;
    static ngAcceptInputType_nzShowSizeChanger: BooleanInput;
    static ngAcceptInputType_nzHideOnSinglePage: BooleanInput;
    static ngAcceptInputType_nzShowQuickJumper: BooleanInput;
    static ngAcceptInputType_nzSimple: BooleanInput;
    nzTableLayout: NzTableLayout;
    nzShowTotal: TemplateRef<{
        $implicit: number;
        range: [number, number];
    }> | null;
    nzItemRender: TemplateRef<PaginationItemRenderContext> | null;
    nzLoadingIndicator: TemplateRef<NzSafeAny> | null;
    nzTitle: string | TemplateRef<NzSafeAny> | null;
    nzFooter: string | TemplateRef<NzSafeAny> | null;
    nzNoResult: string | TemplateRef<NzSafeAny> | undefined;
    nzPageSizeOptions: number[];
    nzVirtualItemSize: number;
    nzVirtualMaxBufferPx: number;
    nzVirtualMinBufferPx: number;
    nzVirtualForTrackBy: TrackByFunction<NzTableData>;
    nzLoadingDelay: number;
    nzPageIndex: number;
    nzPageSize: number;
    nzTotal: number;
    nzWidthConfig: Array<string | null>;
    nzData: NzTableData[];
    nzPaginationPosition: NzTablePaginationPosition;
    nzScroll: {
        x?: string | null;
        y?: string | null;
    };
    nzFrontPagination: boolean;
    nzTemplateMode: boolean;
    nzShowPagination: boolean;
    nzLoading: boolean;
    nzBordered: boolean;
    nzSize: NzTableSize;
    nzShowSizeChanger: boolean;
    nzHideOnSinglePage: boolean;
    nzShowQuickJumper: boolean;
    nzSimple: boolean;
    readonly nzPageSizeChange: EventEmitter<number>;
    readonly nzPageIndexChange: EventEmitter<number>;
    readonly nzQueryParams: EventEmitter<NzTableQueryParams>;
    readonly nzCurrentPageDataChange: EventEmitter<any[]>;
    /** public data for ngFor tr */
    data: NzTableData[];
    cdkVirtualScrollViewport: CdkVirtualScrollViewport;
    scrollX: string | null;
    scrollY: string | null;
    theadTemplate: TemplateRef<NzSafeAny> | null;
    listOfColWidth: Array<string | null>;
    hasFixLeft: boolean;
    hasFixRight: boolean;
    private destroy$;
    private loading$;
    private templateMode$;
    nzVirtualScrollDirective: NzTableVirtualScrollDirective;
    nzTableInnerScrollComponent: NzTableInnerScrollComponent;
    verticalScrollBarWidth: number;
    onPageSizeChange(size: number): void;
    onPageIndexChange(index: number): void;
    constructor(elementRef: ElementRef, nzResizeObserver: NzResizeObserver, nzConfigService: NzConfigService, cdr: ChangeDetectorRef, nzTableStyleService: NzTableStyleService, nzTableDataService: NzTableDataService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTableComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzTableComponent, "nz-table", ["nzTable"], { "nzTableLayout": "nzTableLayout"; "nzShowTotal": "nzShowTotal"; "nzItemRender": "nzItemRender"; "nzLoadingIndicator": "nzLoadingIndicator"; "nzTitle": "nzTitle"; "nzFooter": "nzFooter"; "nzNoResult": "nzNoResult"; "nzPageSizeOptions": "nzPageSizeOptions"; "nzVirtualItemSize": "nzVirtualItemSize"; "nzVirtualMaxBufferPx": "nzVirtualMaxBufferPx"; "nzVirtualMinBufferPx": "nzVirtualMinBufferPx"; "nzVirtualForTrackBy": "nzVirtualForTrackBy"; "nzLoadingDelay": "nzLoadingDelay"; "nzPageIndex": "nzPageIndex"; "nzPageSize": "nzPageSize"; "nzTotal": "nzTotal"; "nzWidthConfig": "nzWidthConfig"; "nzData": "nzData"; "nzPaginationPosition": "nzPaginationPosition"; "nzScroll": "nzScroll"; "nzFrontPagination": "nzFrontPagination"; "nzTemplateMode": "nzTemplateMode"; "nzShowPagination": "nzShowPagination"; "nzLoading": "nzLoading"; "nzBordered": "nzBordered"; "nzSize": "nzSize"; "nzShowSizeChanger": "nzShowSizeChanger"; "nzHideOnSinglePage": "nzHideOnSinglePage"; "nzShowQuickJumper": "nzShowQuickJumper"; "nzSimple": "nzSimple"; }, { "nzPageSizeChange": "nzPageSizeChange"; "nzPageIndexChange": "nzPageIndexChange"; "nzQueryParams": "nzQueryParams"; "nzCurrentPageDataChange": "nzCurrentPageDataChange"; }, ["nzVirtualScrollDirective"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRhYmxlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFsaWJhYmEuY29tIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBDZGtWaXJ0dWFsU2Nyb2xsVmlld3BvcnQgfSBmcm9tICdAYW5ndWxhci9jZGsvc2Nyb2xsaW5nJztcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBUcmFja0J5RnVuY3Rpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE56Q29uZmlnU2VydmljZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS9jb25maWcnO1xuaW1wb3J0IHsgTnpSZXNpemVPYnNlcnZlciB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS9yZXNpemUtb2JzZXJ2ZXJzJztcbmltcG9ydCB7IEJvb2xlYW5JbnB1dCwgTnpTYWZlQW55IH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3R5cGVzJztcbmltcG9ydCB7IFBhZ2luYXRpb25JdGVtUmVuZGVyQ29udGV4dCB9IGZyb20gJ25nLXpvcnJvLWFudGQvcGFnaW5hdGlvbic7XG5pbXBvcnQgeyBOelRhYmxlRGF0YVNlcnZpY2UgfSBmcm9tICcuLi90YWJsZS1kYXRhLnNlcnZpY2UnO1xuaW1wb3J0IHsgTnpUYWJsZVN0eWxlU2VydmljZSB9IGZyb20gJy4uL3RhYmxlLXN0eWxlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTnpUYWJsZURhdGEsIE56VGFibGVMYXlvdXQsIE56VGFibGVQYWdpbmF0aW9uUG9zaXRpb24sIE56VGFibGVRdWVyeVBhcmFtcywgTnpUYWJsZVNpemUgfSBmcm9tICcuLi90YWJsZS50eXBlcyc7XG5pbXBvcnQgeyBOelRhYmxlSW5uZXJTY3JvbGxDb21wb25lbnQgfSBmcm9tICcuL3RhYmxlLWlubmVyLXNjcm9sbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpUYWJsZVZpcnR1YWxTY3JvbGxEaXJlY3RpdmUgfSBmcm9tICcuL3RhYmxlLXZpcnR1YWwtc2Nyb2xsLmRpcmVjdGl2ZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOelRhYmxlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xuICAgIHByaXZhdGUgbnpSZXNpemVPYnNlcnZlcjtcbiAgICBwcml2YXRlIG56Q29uZmlnU2VydmljZTtcbiAgICBwcml2YXRlIGNkcjtcbiAgICBwcml2YXRlIG56VGFibGVTdHlsZVNlcnZpY2U7XG4gICAgcHJpdmF0ZSBuelRhYmxlRGF0YVNlcnZpY2U7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256RnJvbnRQYWdpbmF0aW9uOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256VGVtcGxhdGVNb2RlOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256U2hvd1BhZ2luYXRpb246IEJvb2xlYW5JbnB1dDtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpMb2FkaW5nOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256Qm9yZGVyZWQ6IEJvb2xlYW5JbnB1dDtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpTaG93U2l6ZUNoYW5nZXI6IEJvb2xlYW5JbnB1dDtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpIaWRlT25TaW5nbGVQYWdlOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256U2hvd1F1aWNrSnVtcGVyOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256U2ltcGxlOiBCb29sZWFuSW5wdXQ7XG4gICAgbnpUYWJsZUxheW91dDogTnpUYWJsZUxheW91dDtcbiAgICBuelNob3dUb3RhbDogVGVtcGxhdGVSZWY8e1xuICAgICAgICAkaW1wbGljaXQ6IG51bWJlcjtcbiAgICAgICAgcmFuZ2U6IFtudW1iZXIsIG51bWJlcl07XG4gICAgfT4gfCBudWxsO1xuICAgIG56SXRlbVJlbmRlcjogVGVtcGxhdGVSZWY8UGFnaW5hdGlvbkl0ZW1SZW5kZXJDb250ZXh0PiB8IG51bGw7XG4gICAgbnpMb2FkaW5nSW5kaWNhdG9yOiBUZW1wbGF0ZVJlZjxOelNhZmVBbnk+IHwgbnVsbDtcbiAgICBuelRpdGxlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxOelNhZmVBbnk+IHwgbnVsbDtcbiAgICBuekZvb3Rlcjogc3RyaW5nIHwgVGVtcGxhdGVSZWY8TnpTYWZlQW55PiB8IG51bGw7XG4gICAgbnpOb1Jlc3VsdDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8TnpTYWZlQW55PiB8IHVuZGVmaW5lZDtcbiAgICBuelBhZ2VTaXplT3B0aW9uczogbnVtYmVyW107XG4gICAgbnpWaXJ0dWFsSXRlbVNpemU6IG51bWJlcjtcbiAgICBuelZpcnR1YWxNYXhCdWZmZXJQeDogbnVtYmVyO1xuICAgIG56VmlydHVhbE1pbkJ1ZmZlclB4OiBudW1iZXI7XG4gICAgbnpWaXJ0dWFsRm9yVHJhY2tCeTogVHJhY2tCeUZ1bmN0aW9uPE56VGFibGVEYXRhPjtcbiAgICBuekxvYWRpbmdEZWxheTogbnVtYmVyO1xuICAgIG56UGFnZUluZGV4OiBudW1iZXI7XG4gICAgbnpQYWdlU2l6ZTogbnVtYmVyO1xuICAgIG56VG90YWw6IG51bWJlcjtcbiAgICBueldpZHRoQ29uZmlnOiBBcnJheTxzdHJpbmcgfCBudWxsPjtcbiAgICBuekRhdGE6IE56VGFibGVEYXRhW107XG4gICAgbnpQYWdpbmF0aW9uUG9zaXRpb246IE56VGFibGVQYWdpbmF0aW9uUG9zaXRpb247XG4gICAgbnpTY3JvbGw6IHtcbiAgICAgICAgeD86IHN0cmluZyB8IG51bGw7XG4gICAgICAgIHk/OiBzdHJpbmcgfCBudWxsO1xuICAgIH07XG4gICAgbnpGcm9udFBhZ2luYXRpb246IGJvb2xlYW47XG4gICAgbnpUZW1wbGF0ZU1vZGU6IGJvb2xlYW47XG4gICAgbnpTaG93UGFnaW5hdGlvbjogYm9vbGVhbjtcbiAgICBuekxvYWRpbmc6IGJvb2xlYW47XG4gICAgbnpCb3JkZXJlZDogYm9vbGVhbjtcbiAgICBuelNpemU6IE56VGFibGVTaXplO1xuICAgIG56U2hvd1NpemVDaGFuZ2VyOiBib29sZWFuO1xuICAgIG56SGlkZU9uU2luZ2xlUGFnZTogYm9vbGVhbjtcbiAgICBuelNob3dRdWlja0p1bXBlcjogYm9vbGVhbjtcbiAgICBuelNpbXBsZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBuelBhZ2VTaXplQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICByZWFkb25seSBuelBhZ2VJbmRleENoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgcmVhZG9ubHkgbnpRdWVyeVBhcmFtczogRXZlbnRFbWl0dGVyPE56VGFibGVRdWVyeVBhcmFtcz47XG4gICAgcmVhZG9ubHkgbnpDdXJyZW50UGFnZURhdGFDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnlbXT47XG4gICAgLyoqIHB1YmxpYyBkYXRhIGZvciBuZ0ZvciB0ciAqL1xuICAgIGRhdGE6IE56VGFibGVEYXRhW107XG4gICAgY2RrVmlydHVhbFNjcm9sbFZpZXdwb3J0OiBDZGtWaXJ0dWFsU2Nyb2xsVmlld3BvcnQ7XG4gICAgc2Nyb2xsWDogc3RyaW5nIHwgbnVsbDtcbiAgICBzY3JvbGxZOiBzdHJpbmcgfCBudWxsO1xuICAgIHRoZWFkVGVtcGxhdGU6IFRlbXBsYXRlUmVmPE56U2FmZUFueT4gfCBudWxsO1xuICAgIGxpc3RPZkNvbFdpZHRoOiBBcnJheTxzdHJpbmcgfCBudWxsPjtcbiAgICBoYXNGaXhMZWZ0OiBib29sZWFuO1xuICAgIGhhc0ZpeFJpZ2h0OiBib29sZWFuO1xuICAgIHByaXZhdGUgZGVzdHJveSQ7XG4gICAgcHJpdmF0ZSBsb2FkaW5nJDtcbiAgICBwcml2YXRlIHRlbXBsYXRlTW9kZSQ7XG4gICAgbnpWaXJ0dWFsU2Nyb2xsRGlyZWN0aXZlOiBOelRhYmxlVmlydHVhbFNjcm9sbERpcmVjdGl2ZTtcbiAgICBuelRhYmxlSW5uZXJTY3JvbGxDb21wb25lbnQ6IE56VGFibGVJbm5lclNjcm9sbENvbXBvbmVudDtcbiAgICB2ZXJ0aWNhbFNjcm9sbEJhcldpZHRoOiBudW1iZXI7XG4gICAgb25QYWdlU2l6ZUNoYW5nZShzaXplOiBudW1iZXIpOiB2b2lkO1xuICAgIG9uUGFnZUluZGV4Q2hhbmdlKGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIG56UmVzaXplT2JzZXJ2ZXI6IE56UmVzaXplT2JzZXJ2ZXIsIG56Q29uZmlnU2VydmljZTogTnpDb25maWdTZXJ2aWNlLCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCBuelRhYmxlU3R5bGVTZXJ2aWNlOiBOelRhYmxlU3R5bGVTZXJ2aWNlLCBuelRhYmxlRGF0YVNlcnZpY2U6IE56VGFibGVEYXRhU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19