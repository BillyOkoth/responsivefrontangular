/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Overlay } from '@angular/cdk/overlay';
import { Injector, OnDestroy } from '@angular/core';
import { NzSafeAny } from 'ng-zorro-antd/core/types';
import { Observable, Subject } from 'rxjs';
import { NzModalRef } from './modal-ref';
import { ConfirmType, ModalOptions } from './modal-types';
import * as ɵngcc0 from '@angular/core';
export declare class NzModalService implements OnDestroy {
    private overlay;
    private injector;
    private parentModal;
    private openModalsAtThisLevel;
    private readonly afterAllClosedAtThisLevel;
    get openModals(): NzModalRef[];
    get _afterAllClosed(): Subject<void>;
    readonly afterAllClose: Observable<void>;
    constructor(overlay: Overlay, injector: Injector, parentModal: NzModalService);
    create<T, R = NzSafeAny>(config: ModalOptions<T, R>): NzModalRef<T, R>;
    closeAll(): void;
    confirm<T>(options?: ModalOptions<T>, confirmType?: ConfirmType): NzModalRef<T>;
    info<T>(options?: ModalOptions<T>): NzModalRef<T>;
    success<T>(options?: ModalOptions<T>): NzModalRef<T>;
    error<T>(options?: ModalOptions<T>): NzModalRef<T>;
    warning<T>(options?: ModalOptions<T>): NzModalRef<T>;
    private open;
    private removeOpenModal;
    private closeModals;
    private createOverlay;
    private attachModalContainer;
    private attachModalContent;
    private createInjector;
    private confirmFactory;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzModalService, [null, null, { optional: true; skipSelf: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NzModalService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJtb2RhbC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWxpYmFiYS5jb20gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IE92ZXJsYXkgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBJbmplY3RvciwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOelNhZmVBbnkgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTnpNb2RhbFJlZiB9IGZyb20gJy4vbW9kYWwtcmVmJztcbmltcG9ydCB7IENvbmZpcm1UeXBlLCBNb2RhbE9wdGlvbnMgfSBmcm9tICcuL21vZGFsLXR5cGVzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE56TW9kYWxTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIG92ZXJsYXk7XG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcbiAgICBwcml2YXRlIHBhcmVudE1vZGFsO1xuICAgIHByaXZhdGUgb3Blbk1vZGFsc0F0VGhpc0xldmVsO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYWZ0ZXJBbGxDbG9zZWRBdFRoaXNMZXZlbDtcbiAgICBnZXQgb3Blbk1vZGFscygpOiBOek1vZGFsUmVmW107XG4gICAgZ2V0IF9hZnRlckFsbENsb3NlZCgpOiBTdWJqZWN0PHZvaWQ+O1xuICAgIHJlYWRvbmx5IGFmdGVyQWxsQ2xvc2U6IE9ic2VydmFibGU8dm9pZD47XG4gICAgY29uc3RydWN0b3Iob3ZlcmxheTogT3ZlcmxheSwgaW5qZWN0b3I6IEluamVjdG9yLCBwYXJlbnRNb2RhbDogTnpNb2RhbFNlcnZpY2UpO1xuICAgIGNyZWF0ZTxULCBSID0gTnpTYWZlQW55Pihjb25maWc6IE1vZGFsT3B0aW9uczxULCBSPik6IE56TW9kYWxSZWY8VCwgUj47XG4gICAgY2xvc2VBbGwoKTogdm9pZDtcbiAgICBjb25maXJtPFQ+KG9wdGlvbnM/OiBNb2RhbE9wdGlvbnM8VD4sIGNvbmZpcm1UeXBlPzogQ29uZmlybVR5cGUpOiBOek1vZGFsUmVmPFQ+O1xuICAgIGluZm88VD4ob3B0aW9ucz86IE1vZGFsT3B0aW9uczxUPik6IE56TW9kYWxSZWY8VD47XG4gICAgc3VjY2VzczxUPihvcHRpb25zPzogTW9kYWxPcHRpb25zPFQ+KTogTnpNb2RhbFJlZjxUPjtcbiAgICBlcnJvcjxUPihvcHRpb25zPzogTW9kYWxPcHRpb25zPFQ+KTogTnpNb2RhbFJlZjxUPjtcbiAgICB3YXJuaW5nPFQ+KG9wdGlvbnM/OiBNb2RhbE9wdGlvbnM8VD4pOiBOek1vZGFsUmVmPFQ+O1xuICAgIHByaXZhdGUgb3BlbjtcbiAgICBwcml2YXRlIHJlbW92ZU9wZW5Nb2RhbDtcbiAgICBwcml2YXRlIGNsb3NlTW9kYWxzO1xuICAgIHByaXZhdGUgY3JlYXRlT3ZlcmxheTtcbiAgICBwcml2YXRlIGF0dGFjaE1vZGFsQ29udGFpbmVyO1xuICAgIHByaXZhdGUgYXR0YWNoTW9kYWxDb250ZW50O1xuICAgIHByaXZhdGUgY3JlYXRlSW5qZWN0b3I7XG4gICAgcHJpdmF0ZSBjb25maXJtRmFjdG9yeTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19