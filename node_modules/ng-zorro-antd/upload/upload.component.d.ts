/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { BooleanInput, NumberInput, NzSafeAny } from 'ng-zorro-antd/core/types';
import { Observable, Subscription } from 'rxjs';
import { NzI18nService } from 'ng-zorro-antd/i18n';
import { ShowUploadListInterface, UploadChangeParam, UploadFile, UploadFilter, UploadListType, UploadTransformFileType, UploadType, UploadXHRArgs, ZipButtonOptions } from './interface';
import { NzUploadBtnComponent } from './upload-btn.component';
import { NzUploadListComponent } from './upload-list.component';
import * as ɵngcc0 from '@angular/core';
export declare class NzUploadComponent implements OnInit, OnChanges, OnDestroy {
    private cdr;
    private i18n;
    static ngAcceptInputType_nzLimit: NumberInput;
    static ngAcceptInputType_nzSize: NumberInput;
    static ngAcceptInputType_nzDirectory: BooleanInput;
    static ngAcceptInputType_nzOpenFileDialogOnClick: BooleanInput;
    static ngAcceptInputType_nzDisabled: BooleanInput;
    static ngAcceptInputType_nzMultiple: BooleanInput;
    static ngAcceptInputType_nzShowUploadList: BooleanInput | ShowUploadListInterface | undefined | null;
    static ngAcceptInputType_nzShowButton: BooleanInput;
    static ngAcceptInputType_nzWithCredentials: BooleanInput;
    private i18n$;
    uploadComp: NzUploadBtnComponent;
    listComp: NzUploadListComponent;
    locale: NzSafeAny;
    nzType: UploadType;
    nzLimit: number;
    nzSize: number;
    nzFileType: string;
    nzAccept: string | string[];
    nzAction: string | ((file: UploadFile) => string | Observable<string>);
    nzDirectory: boolean;
    nzOpenFileDialogOnClick: boolean;
    nzBeforeUpload: (file: UploadFile, fileList: UploadFile[]) => boolean | Observable<boolean>;
    nzCustomRequest: (item: UploadXHRArgs) => Subscription;
    nzData: {} | ((file: UploadFile) => {} | Observable<{}>);
    nzFilter: UploadFilter[];
    nzFileList: UploadFile[];
    nzDisabled: boolean;
    nzHeaders: {} | ((file: UploadFile) => {} | Observable<{}>);
    nzListType: UploadListType;
    nzMultiple: boolean;
    nzName: string;
    private _showUploadList;
    set nzShowUploadList(value: boolean | ShowUploadListInterface);
    get nzShowUploadList(): boolean | ShowUploadListInterface;
    nzShowButton: boolean;
    nzWithCredentials: boolean;
    nzRemove: (file: UploadFile) => boolean | Observable<boolean>;
    nzPreview: (file: UploadFile) => void;
    nzPreviewFile: (file: UploadFile) => Observable<string>;
    nzTransformFile: (file: UploadFile) => UploadTransformFileType;
    nzDownload: (file: UploadFile) => void;
    nzIconRender: TemplateRef<void>;
    readonly nzChange: EventEmitter<UploadChangeParam>;
    readonly nzFileListChange: EventEmitter<UploadFile[]>;
    _btnOptions: ZipButtonOptions;
    private zipOptions;
    constructor(cdr: ChangeDetectorRef, i18n: NzI18nService);
    private fileToObject;
    private getFileItem;
    private removeFileItem;
    private onStart;
    private onProgress;
    private onSuccess;
    private onError;
    private dragState;
    fileDrop(e: DragEvent): void;
    private detectChangesList;
    onRemove: (file: UploadFile) => void;
    private prefixCls;
    classList: string[];
    private setClassMap;
    ngOnInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzUploadComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzUploadComponent, "nz-upload", ["nzUpload"], { "nzType": "nzType"; "nzLimit": "nzLimit"; "nzSize": "nzSize"; "nzDirectory": "nzDirectory"; "nzOpenFileDialogOnClick": "nzOpenFileDialogOnClick"; "nzFilter": "nzFilter"; "nzFileList": "nzFileList"; "nzDisabled": "nzDisabled"; "nzListType": "nzListType"; "nzMultiple": "nzMultiple"; "nzName": "nzName"; "nzShowButton": "nzShowButton"; "nzWithCredentials": "nzWithCredentials"; "nzShowUploadList": "nzShowUploadList"; "nzFileType": "nzFileType"; "nzAccept": "nzAccept"; "nzAction": "nzAction"; "nzBeforeUpload": "nzBeforeUpload"; "nzCustomRequest": "nzCustomRequest"; "nzData": "nzData"; "nzHeaders": "nzHeaders"; "nzRemove": "nzRemove"; "nzPreview": "nzPreview"; "nzPreviewFile": "nzPreviewFile"; "nzTransformFile": "nzTransformFile"; "nzDownload": "nzDownload"; "nzIconRender": "nzIconRender"; }, { "nzChange": "nzChange"; "nzFileListChange": "nzFileListChange"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ1cGxvYWQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWxpYmFiYS5jb20gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCb29sZWFuSW5wdXQsIE51bWJlcklucHV0LCBOelNhZmVBbnkgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOekkxOG5TZXJ2aWNlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9pMThuJztcbmltcG9ydCB7IFNob3dVcGxvYWRMaXN0SW50ZXJmYWNlLCBVcGxvYWRDaGFuZ2VQYXJhbSwgVXBsb2FkRmlsZSwgVXBsb2FkRmlsdGVyLCBVcGxvYWRMaXN0VHlwZSwgVXBsb2FkVHJhbnNmb3JtRmlsZVR5cGUsIFVwbG9hZFR5cGUsIFVwbG9hZFhIUkFyZ3MsIFppcEJ1dHRvbk9wdGlvbnMgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBOelVwbG9hZEJ0bkNvbXBvbmVudCB9IGZyb20gJy4vdXBsb2FkLWJ0bi5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpVcGxvYWRMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi91cGxvYWQtbGlzdC5jb21wb25lbnQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnpVcGxvYWRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGNkcjtcbiAgICBwcml2YXRlIGkxOG47XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256TGltaXQ6IE51bWJlcklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uelNpemU6IE51bWJlcklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uekRpcmVjdG9yeTogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uek9wZW5GaWxlRGlhbG9nT25DbGljazogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uekRpc2FibGVkOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256TXVsdGlwbGU6IEJvb2xlYW5JbnB1dDtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpTaG93VXBsb2FkTGlzdDogQm9vbGVhbklucHV0IHwgU2hvd1VwbG9hZExpc3RJbnRlcmZhY2UgfCB1bmRlZmluZWQgfCBudWxsO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uelNob3dCdXR0b246IEJvb2xlYW5JbnB1dDtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpXaXRoQ3JlZGVudGlhbHM6IEJvb2xlYW5JbnB1dDtcbiAgICBwcml2YXRlIGkxOG4kO1xuICAgIHVwbG9hZENvbXA6IE56VXBsb2FkQnRuQ29tcG9uZW50O1xuICAgIGxpc3RDb21wOiBOelVwbG9hZExpc3RDb21wb25lbnQ7XG4gICAgbG9jYWxlOiBOelNhZmVBbnk7XG4gICAgbnpUeXBlOiBVcGxvYWRUeXBlO1xuICAgIG56TGltaXQ6IG51bWJlcjtcbiAgICBuelNpemU6IG51bWJlcjtcbiAgICBuekZpbGVUeXBlOiBzdHJpbmc7XG4gICAgbnpBY2NlcHQ6IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIG56QWN0aW9uOiBzdHJpbmcgfCAoKGZpbGU6IFVwbG9hZEZpbGUpID0+IHN0cmluZyB8IE9ic2VydmFibGU8c3RyaW5nPik7XG4gICAgbnpEaXJlY3Rvcnk6IGJvb2xlYW47XG4gICAgbnpPcGVuRmlsZURpYWxvZ09uQ2xpY2s6IGJvb2xlYW47XG4gICAgbnpCZWZvcmVVcGxvYWQ6IChmaWxlOiBVcGxvYWRGaWxlLCBmaWxlTGlzdDogVXBsb2FkRmlsZVtdKSA9PiBib29sZWFuIHwgT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgICBuekN1c3RvbVJlcXVlc3Q6IChpdGVtOiBVcGxvYWRYSFJBcmdzKSA9PiBTdWJzY3JpcHRpb247XG4gICAgbnpEYXRhOiB7fSB8ICgoZmlsZTogVXBsb2FkRmlsZSkgPT4ge30gfCBPYnNlcnZhYmxlPHt9Pik7XG4gICAgbnpGaWx0ZXI6IFVwbG9hZEZpbHRlcltdO1xuICAgIG56RmlsZUxpc3Q6IFVwbG9hZEZpbGVbXTtcbiAgICBuekRpc2FibGVkOiBib29sZWFuO1xuICAgIG56SGVhZGVyczoge30gfCAoKGZpbGU6IFVwbG9hZEZpbGUpID0+IHt9IHwgT2JzZXJ2YWJsZTx7fT4pO1xuICAgIG56TGlzdFR5cGU6IFVwbG9hZExpc3RUeXBlO1xuICAgIG56TXVsdGlwbGU6IGJvb2xlYW47XG4gICAgbnpOYW1lOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfc2hvd1VwbG9hZExpc3Q7XG4gICAgc2V0IG56U2hvd1VwbG9hZExpc3QodmFsdWU6IGJvb2xlYW4gfCBTaG93VXBsb2FkTGlzdEludGVyZmFjZSk7XG4gICAgZ2V0IG56U2hvd1VwbG9hZExpc3QoKTogYm9vbGVhbiB8IFNob3dVcGxvYWRMaXN0SW50ZXJmYWNlO1xuICAgIG56U2hvd0J1dHRvbjogYm9vbGVhbjtcbiAgICBueldpdGhDcmVkZW50aWFsczogYm9vbGVhbjtcbiAgICBuelJlbW92ZTogKGZpbGU6IFVwbG9hZEZpbGUpID0+IGJvb2xlYW4gfCBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICAgIG56UHJldmlldzogKGZpbGU6IFVwbG9hZEZpbGUpID0+IHZvaWQ7XG4gICAgbnpQcmV2aWV3RmlsZTogKGZpbGU6IFVwbG9hZEZpbGUpID0+IE9ic2VydmFibGU8c3RyaW5nPjtcbiAgICBuelRyYW5zZm9ybUZpbGU6IChmaWxlOiBVcGxvYWRGaWxlKSA9PiBVcGxvYWRUcmFuc2Zvcm1GaWxlVHlwZTtcbiAgICBuekRvd25sb2FkOiAoZmlsZTogVXBsb2FkRmlsZSkgPT4gdm9pZDtcbiAgICBuekljb25SZW5kZXI6IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICAgIHJlYWRvbmx5IG56Q2hhbmdlOiBFdmVudEVtaXR0ZXI8VXBsb2FkQ2hhbmdlUGFyYW0+O1xuICAgIHJlYWRvbmx5IG56RmlsZUxpc3RDaGFuZ2U6IEV2ZW50RW1pdHRlcjxVcGxvYWRGaWxlW10+O1xuICAgIF9idG5PcHRpb25zOiBaaXBCdXR0b25PcHRpb25zO1xuICAgIHByaXZhdGUgemlwT3B0aW9ucztcbiAgICBjb25zdHJ1Y3RvcihjZHI6IENoYW5nZURldGVjdG9yUmVmLCBpMThuOiBOekkxOG5TZXJ2aWNlKTtcbiAgICBwcml2YXRlIGZpbGVUb09iamVjdDtcbiAgICBwcml2YXRlIGdldEZpbGVJdGVtO1xuICAgIHByaXZhdGUgcmVtb3ZlRmlsZUl0ZW07XG4gICAgcHJpdmF0ZSBvblN0YXJ0O1xuICAgIHByaXZhdGUgb25Qcm9ncmVzcztcbiAgICBwcml2YXRlIG9uU3VjY2VzcztcbiAgICBwcml2YXRlIG9uRXJyb3I7XG4gICAgcHJpdmF0ZSBkcmFnU3RhdGU7XG4gICAgZmlsZURyb3AoZTogRHJhZ0V2ZW50KTogdm9pZDtcbiAgICBwcml2YXRlIGRldGVjdENoYW5nZXNMaXN0O1xuICAgIG9uUmVtb3ZlOiAoZmlsZTogVXBsb2FkRmlsZSkgPT4gdm9pZDtcbiAgICBwcml2YXRlIHByZWZpeENscztcbiAgICBjbGFzc0xpc3Q6IHN0cmluZ1tdO1xuICAgIHByaXZhdGUgc2V0Q2xhc3NNYXA7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=