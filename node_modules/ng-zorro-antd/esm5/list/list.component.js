/**
 * @fileoverview added by tsickle
 * Generated from: list.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __decorate, __metadata } from "tslib";
/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, ContentChild, Input, TemplateRef, ViewEncapsulation } from '@angular/core';
import { InputBoolean } from 'ng-zorro-antd/core/util';
import { BehaviorSubject } from 'rxjs';
import { NzListFooterComponent, NzListLoadMoreDirective, NzListPaginationComponent } from './list-cell';
var NzListComponent = /** @class */ (function () {
    function NzListComponent() {
        this.nzBordered = false;
        this.nzItemLayout = 'horizontal';
        this.nzLoading = false;
        this.nzSize = 'default';
        this.nzSplit = true;
        this.hasSomethingAfterLastItem = false;
        this.itemLayoutNotifySource = new BehaviorSubject(this.nzItemLayout);
    }
    Object.defineProperty(NzListComponent.prototype, "itemLayoutNotify$", {
        get: /**
         * @return {?}
         */
        function () {
            return this.itemLayoutNotifySource.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NzListComponent.prototype.getSomethingAfterLastItem = /**
     * @return {?}
     */
    function () {
        return !!(this.nzLoadMore ||
            this.nzPagination ||
            this.nzFooter ||
            this.nzListFooterComponent ||
            this.nzListPaginationComponent ||
            this.nzListLoadMoreDirective);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NzListComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.nzItemLayout) {
            this.itemLayoutNotifySource.next(this.nzItemLayout);
        }
    };
    /**
     * @return {?}
     */
    NzListComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.itemLayoutNotifySource.unsubscribe();
    };
    /**
     * @return {?}
     */
    NzListComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.hasSomethingAfterLastItem = this.getSomethingAfterLastItem();
    };
    NzListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nz-list, [nz-list]',
                    exportAs: 'nzList',
                    template: "\n    <ng-template #itemsTpl>\n      <div class=\"ant-list-items\">\n        <ng-container *ngFor=\"let item of nzDataSource; let index = index\">\n          <ng-template [ngTemplateOutlet]=\"nzRenderItem\" [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"></ng-template>\n        </ng-container>\n        <ng-content select=\"nz-list-item, [nz-list-item]\"></ng-content>\n      </div>\n    </ng-template>\n\n    <nz-list-header *ngIf=\"nzHeader\">\n      <ng-container *nzStringTemplateOutlet=\"nzHeader\">{{ nzHeader }}</ng-container>\n    </nz-list-header>\n    <ng-content select=\"nz-list-header\"></ng-content>\n\n    <nz-spin [nzSpinning]=\"nzLoading\">\n      <ng-container>\n        <div *ngIf=\"nzLoading && nzDataSource && nzDataSource.length === 0\" [style.min-height.px]=\"53\"></div>\n        <div *ngIf=\"nzGrid && nzDataSource; else itemsTpl\" nz-row [nzGutter]=\"nzGrid.gutter\">\n          <div\n            nz-col\n            [nzSpan]=\"nzGrid.span\"\n            [nzXs]=\"nzGrid.xs\"\n            [nzSm]=\"nzGrid.sm\"\n            [nzMd]=\"nzGrid.md\"\n            [nzLg]=\"nzGrid.lg\"\n            [nzXl]=\"nzGrid.xl\"\n            [nzXXl]=\"nzGrid.xxl\"\n            *ngFor=\"let item of nzDataSource; let index = index\"\n          >\n            <ng-template [ngTemplateOutlet]=\"nzRenderItem\" [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"></ng-template>\n          </div>\n        </div>\n        <nz-list-empty *ngIf=\"!nzLoading && nzDataSource && nzDataSource.length === 0\" [nzNoResult]=\"nzNoResult\"></nz-list-empty>\n      </ng-container>\n      <ng-content></ng-content>\n    </nz-spin>\n\n    <nz-list-footer *ngIf=\"nzFooter\">\n      <ng-container *nzStringTemplateOutlet=\"nzFooter\">{{ nzFooter }}</ng-container>\n    </nz-list-footer>\n    <ng-content select=\"nz-list-footer, [nz-list-footer]\"></ng-content>\n\n    <ng-template [ngTemplateOutlet]=\"nzLoadMore\"></ng-template>\n    <ng-content select=\"nz-list-load-more, [nz-list-load-more]\"></ng-content>\n\n    <nz-list-pagination *ngIf=\"nzPagination\">\n      <ng-template [ngTemplateOutlet]=\"nzPagination\"></ng-template>\n    </nz-list-pagination>\n    <ng-content select=\"nz-list-pagination, [nz-list-pagination]\"></ng-content>\n  ",
                    preserveWhitespaces: false,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.ant-list]': 'true',
                        '[class.ant-list-vertical]': 'nzItemLayout === "vertical"',
                        '[class.ant-list-lg]': 'nzSize === "large"',
                        '[class.ant-list-sm]': 'nzSize === "small"',
                        '[class.ant-list-split]': 'nzSplit',
                        '[class.ant-list-bordered]': 'nzBordered',
                        '[class.ant-list-loading]': 'nzLoading',
                        '[class.ant-list-something-after-last-item]': 'hasSomethingAfterLastItem'
                    }
                }] }
    ];
    /** @nocollapse */
    NzListComponent.ctorParameters = function () { return []; };
    NzListComponent.propDecorators = {
        nzDataSource: [{ type: Input }],
        nzBordered: [{ type: Input }],
        nzGrid: [{ type: Input }],
        nzHeader: [{ type: Input }],
        nzFooter: [{ type: Input }],
        nzItemLayout: [{ type: Input }],
        nzRenderItem: [{ type: Input }],
        nzLoading: [{ type: Input }],
        nzLoadMore: [{ type: Input }],
        nzPagination: [{ type: Input }],
        nzSize: [{ type: Input }],
        nzSplit: [{ type: Input }],
        nzNoResult: [{ type: Input }],
        nzListFooterComponent: [{ type: ContentChild, args: [NzListFooterComponent,] }],
        nzListPaginationComponent: [{ type: ContentChild, args: [NzListPaginationComponent,] }],
        nzListLoadMoreDirective: [{ type: ContentChild, args: [NzListLoadMoreDirective,] }]
    };
    __decorate([
        InputBoolean(),
        __metadata("design:type", Object)
    ], NzListComponent.prototype, "nzBordered", void 0);
    __decorate([
        InputBoolean(),
        __metadata("design:type", Object)
    ], NzListComponent.prototype, "nzLoading", void 0);
    __decorate([
        InputBoolean(),
        __metadata("design:type", Object)
    ], NzListComponent.prototype, "nzSplit", void 0);
    return NzListComponent;
}());
export { NzListComponent };
if (false) {
    /** @type {?} */
    NzListComponent.ngAcceptInputType_nzBordered;
    /** @type {?} */
    NzListComponent.ngAcceptInputType_nzLoading;
    /** @type {?} */
    NzListComponent.ngAcceptInputType_nzSplit;
    /** @type {?} */
    NzListComponent.prototype.nzDataSource;
    /** @type {?} */
    NzListComponent.prototype.nzBordered;
    /** @type {?} */
    NzListComponent.prototype.nzGrid;
    /** @type {?} */
    NzListComponent.prototype.nzHeader;
    /** @type {?} */
    NzListComponent.prototype.nzFooter;
    /** @type {?} */
    NzListComponent.prototype.nzItemLayout;
    /** @type {?} */
    NzListComponent.prototype.nzRenderItem;
    /** @type {?} */
    NzListComponent.prototype.nzLoading;
    /** @type {?} */
    NzListComponent.prototype.nzLoadMore;
    /** @type {?} */
    NzListComponent.prototype.nzPagination;
    /** @type {?} */
    NzListComponent.prototype.nzSize;
    /** @type {?} */
    NzListComponent.prototype.nzSplit;
    /** @type {?} */
    NzListComponent.prototype.nzNoResult;
    /** @type {?} */
    NzListComponent.prototype.nzListFooterComponent;
    /** @type {?} */
    NzListComponent.prototype.nzListPaginationComponent;
    /** @type {?} */
    NzListComponent.prototype.nzListLoadMoreDirective;
    /** @type {?} */
    NzListComponent.prototype.hasSomethingAfterLastItem;
    /**
     * @type {?}
     * @private
     */
    NzListComponent.prototype.itemLayoutNotifySource;
}
//# sourceMappingURL=data:application/json;base64,