/**
 * @fileoverview added by tsickle
 * Generated from: tree-node-checkbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
var NzTreeNodeCheckboxComponent = /** @class */ (function () {
    function NzTreeNodeCheckboxComponent() {
        this.nzSelectMode = false;
    }
    NzTreeNodeCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nz-tree-node-checkbox',
                    template: " <span [class.ant-tree-checkbox-inner]=\"!nzSelectMode\" [class.ant-select-tree-checkbox-inner]=\"nzSelectMode\"></span> ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    host: {
                        '[class.ant-select-tree-checkbox]': "nzSelectMode",
                        '[class.ant-select-tree-checkbox-checked]': "nzSelectMode && isChecked",
                        '[class.ant-select-tree-checkbox-indeterminate]': "nzSelectMode && isHalfChecked",
                        '[class.ant-select-tree-checkbox-disabled]': "nzSelectMode && (isDisabled || isDisableCheckbox)",
                        '[class.ant-tree-checkbox]': "!nzSelectMode",
                        '[class.ant-tree-checkbox-checked]': "!nzSelectMode && isChecked",
                        '[class.ant-tree-checkbox-indeterminate]': "!nzSelectMode && isHalfChecked",
                        '[class.ant-tree-checkbox-disabled]': "!nzSelectMode && (isDisabled || isDisableCheckbox)"
                    }
                }] }
    ];
    NzTreeNodeCheckboxComponent.propDecorators = {
        nzSelectMode: [{ type: Input }],
        isChecked: [{ type: Input }],
        isHalfChecked: [{ type: Input }],
        isDisabled: [{ type: Input }],
        isDisableCheckbox: [{ type: Input }]
    };
    return NzTreeNodeCheckboxComponent;
}());
export { NzTreeNodeCheckboxComponent };
if (false) {
    /** @type {?} */
    NzTreeNodeCheckboxComponent.prototype.nzSelectMode;
    /** @type {?} */
    NzTreeNodeCheckboxComponent.prototype.isChecked;
    /** @type {?} */
    NzTreeNodeCheckboxComponent.prototype.isHalfChecked;
    /** @type {?} */
    NzTreeNodeCheckboxComponent.prototype.isDisabled;
    /** @type {?} */
    NzTreeNodeCheckboxComponent.prototype.isDisableCheckbox;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLWNoZWNrYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXpvcnJvLWFudGQvdHJlZS8iLCJzb3VyY2VzIjpbInRyZWUtbm9kZS1jaGVja2JveC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUU7SUFBQTtRQWlCVyxpQkFBWSxHQUFHLEtBQUssQ0FBQztJQUtoQyxDQUFDOztnQkF0QkEsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFFBQVEsRUFBRSwySEFBdUg7b0JBQ2pJLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxtQkFBbUIsRUFBRSxLQUFLO29CQUMxQixJQUFJLEVBQUU7d0JBQ0osa0NBQWtDLEVBQUUsY0FBYzt3QkFDbEQsMENBQTBDLEVBQUUsMkJBQTJCO3dCQUN2RSxnREFBZ0QsRUFBRSwrQkFBK0I7d0JBQ2pGLDJDQUEyQyxFQUFFLG1EQUFtRDt3QkFDaEcsMkJBQTJCLEVBQUUsZUFBZTt3QkFDNUMsbUNBQW1DLEVBQUUsNEJBQTRCO3dCQUNqRSx5Q0FBeUMsRUFBRSxnQ0FBZ0M7d0JBQzNFLG9DQUFvQyxFQUFFLG9EQUFvRDtxQkFDM0Y7aUJBQ0Y7OzsrQkFFRSxLQUFLOzRCQUNMLEtBQUs7Z0NBQ0wsS0FBSzs2QkFDTCxLQUFLO29DQUNMLEtBQUs7O0lBQ1Isa0NBQUM7Q0FBQSxBQXRCRCxJQXNCQztTQU5ZLDJCQUEyQjs7O0lBQ3RDLG1EQUE4Qjs7SUFDOUIsZ0RBQTRCOztJQUM1QixvREFBZ0M7O0lBQ2hDLGlEQUE2Qjs7SUFDN0Isd0RBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFsaWJhYmEuY29tIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ256LXRyZWUtbm9kZS1jaGVja2JveCcsXG4gIHRlbXBsYXRlOiBgIDxzcGFuIFtjbGFzcy5hbnQtdHJlZS1jaGVja2JveC1pbm5lcl09XCIhbnpTZWxlY3RNb2RlXCIgW2NsYXNzLmFudC1zZWxlY3QtdHJlZS1jaGVja2JveC1pbm5lcl09XCJuelNlbGVjdE1vZGVcIj48L3NwYW4+IGAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuYW50LXNlbGVjdC10cmVlLWNoZWNrYm94XSc6IGBuelNlbGVjdE1vZGVgLFxuICAgICdbY2xhc3MuYW50LXNlbGVjdC10cmVlLWNoZWNrYm94LWNoZWNrZWRdJzogYG56U2VsZWN0TW9kZSAmJiBpc0NoZWNrZWRgLFxuICAgICdbY2xhc3MuYW50LXNlbGVjdC10cmVlLWNoZWNrYm94LWluZGV0ZXJtaW5hdGVdJzogYG56U2VsZWN0TW9kZSAmJiBpc0hhbGZDaGVja2VkYCxcbiAgICAnW2NsYXNzLmFudC1zZWxlY3QtdHJlZS1jaGVja2JveC1kaXNhYmxlZF0nOiBgbnpTZWxlY3RNb2RlICYmIChpc0Rpc2FibGVkIHx8IGlzRGlzYWJsZUNoZWNrYm94KWAsXG4gICAgJ1tjbGFzcy5hbnQtdHJlZS1jaGVja2JveF0nOiBgIW56U2VsZWN0TW9kZWAsXG4gICAgJ1tjbGFzcy5hbnQtdHJlZS1jaGVja2JveC1jaGVja2VkXSc6IGAhbnpTZWxlY3RNb2RlICYmIGlzQ2hlY2tlZGAsXG4gICAgJ1tjbGFzcy5hbnQtdHJlZS1jaGVja2JveC1pbmRldGVybWluYXRlXSc6IGAhbnpTZWxlY3RNb2RlICYmIGlzSGFsZkNoZWNrZWRgLFxuICAgICdbY2xhc3MuYW50LXRyZWUtY2hlY2tib3gtZGlzYWJsZWRdJzogYCFuelNlbGVjdE1vZGUgJiYgKGlzRGlzYWJsZWQgfHwgaXNEaXNhYmxlQ2hlY2tib3gpYFxuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56VHJlZU5vZGVDaGVja2JveENvbXBvbmVudCB7XG4gIEBJbnB1dCgpIG56U2VsZWN0TW9kZSA9IGZhbHNlO1xuICBASW5wdXQoKSBpc0NoZWNrZWQ6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGlzSGFsZkNoZWNrZWQ6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGlzRGlzYWJsZWQ6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGlzRGlzYWJsZUNoZWNrYm94OiBib29sZWFuO1xufVxuIl19