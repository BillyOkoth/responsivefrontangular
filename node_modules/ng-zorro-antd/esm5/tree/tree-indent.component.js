/**
 * @fileoverview added by tsickle
 * Generated from: tree-indent.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __read, __spread } from "tslib";
/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
var NzTreeIndentComponent = /** @class */ (function () {
    function NzTreeIndentComponent() {
        this.nzSelectMode = false;
        this.listOfUnit = [];
    }
    /**
     * @param {?} index
     * @return {?}
     */
    NzTreeIndentComponent.prototype.unitMapOfClass = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _a;
        return _a = {},
            _a["ant-tree-indent-unit"] = !this.nzSelectMode,
            _a["ant-tree-indent-unit-start"] = !this.nzSelectMode && this.nzIsStart[index + 1],
            _a["ant-tree-indent-unit-end"] = !this.nzSelectMode && this.nzIsEnd[index + 1],
            _a["ant-select-tree-indent-unit"] = this.nzSelectMode,
            _a["ant-select-tree-indent-unit-start"] = this.nzSelectMode && this.nzIsStart[index + 1],
            _a["ant-select-tree-indent-unit-end"] = this.nzSelectMode && this.nzIsEnd[index + 1],
            _a;
    };
    /**
     * @return {?}
     */
    NzTreeIndentComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} changes
     * @return {?}
     */
    NzTreeIndentComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var nzTreeLevel = changes.nzTreeLevel;
        if (nzTreeLevel) {
            this.listOfUnit = __spread(new Array(nzTreeLevel.currentValue || 0));
        }
    };
    NzTreeIndentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nz-tree-indent',
                    exportAs: 'nzTreeIndent',
                    template: " <span *ngFor=\"let i of listOfUnit; let index = index\" [ngClass]=\"unitMapOfClass(index)\"></span> ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    host: {
                        '[attr.aria-hidden]': 'true',
                        '[class.ant-tree-indent]': '!nzSelectMode',
                        '[class.ant-select-tree-indent]': 'nzSelectMode'
                    }
                }] }
    ];
    NzTreeIndentComponent.propDecorators = {
        nzTreeLevel: [{ type: Input }],
        nzIsStart: [{ type: Input }],
        nzIsEnd: [{ type: Input }],
        nzSelectMode: [{ type: Input }]
    };
    return NzTreeIndentComponent;
}());
export { NzTreeIndentComponent };
if (false) {
    /** @type {?} */
    NzTreeIndentComponent.prototype.nzTreeLevel;
    /** @type {?} */
    NzTreeIndentComponent.prototype.nzIsStart;
    /** @type {?} */
    NzTreeIndentComponent.prototype.nzIsEnd;
    /** @type {?} */
    NzTreeIndentComponent.prototype.nzSelectMode;
    /** @type {?} */
    NzTreeIndentComponent.prototype.listOfUnit;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1pbmRlbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctem9ycm8tYW50ZC90cmVlLyIsInNvdXJjZXMiOlsidHJlZS1pbmRlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBb0MsTUFBTSxlQUFlLENBQUM7QUFFNUc7SUFBQTtRQWdCVyxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUU5QixlQUFVLEdBQWEsRUFBRSxDQUFDO0lBcUI1QixDQUFDOzs7OztJQW5CQyw4Q0FBYzs7OztJQUFkLFVBQWUsS0FBYTs7UUFDMUI7WUFDRSxHQUFDLHNCQUFzQixJQUFHLENBQUMsSUFBSSxDQUFDLFlBQVk7WUFDNUMsR0FBQyw0QkFBNEIsSUFBRyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQy9FLEdBQUMsMEJBQTBCLElBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztZQUMzRSxHQUFDLDZCQUE2QixJQUFHLElBQUksQ0FBQyxZQUFZO1lBQ2xELEdBQUMsbUNBQW1DLElBQUcsSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDckYsR0FBQyxpQ0FBaUMsSUFBRyxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztlQUNqRjtJQUNKLENBQUM7Ozs7SUFFRCx3Q0FBUTs7O0lBQVIsY0FBa0IsQ0FBQzs7Ozs7SUFFbkIsMkNBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQ3hCLElBQUEsaUNBQVc7UUFDbkIsSUFBSSxXQUFXLEVBQUU7WUFDZixJQUFJLENBQUMsVUFBVSxZQUFPLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqRTtJQUNILENBQUM7O2dCQXRDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLFFBQVEsRUFBRSx1R0FBbUc7b0JBQzdHLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxtQkFBbUIsRUFBRSxLQUFLO29CQUMxQixJQUFJLEVBQUU7d0JBQ0osb0JBQW9CLEVBQUUsTUFBTTt3QkFDNUIseUJBQXlCLEVBQUUsZUFBZTt3QkFDMUMsZ0NBQWdDLEVBQUUsY0FBYztxQkFDakQ7aUJBQ0Y7Ozs4QkFFRSxLQUFLOzRCQUNMLEtBQUs7MEJBQ0wsS0FBSzsrQkFDTCxLQUFLOztJQXVCUiw0QkFBQztDQUFBLEFBdkNELElBdUNDO1NBM0JZLHFCQUFxQjs7O0lBQ2hDLDRDQUE2Qjs7SUFDN0IsMENBQThCOztJQUM5Qix3Q0FBNEI7O0lBQzVCLDZDQUE4Qjs7SUFFOUIsMkNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFsaWJhYmEuY29tIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduei10cmVlLWluZGVudCcsXG4gIGV4cG9ydEFzOiAnbnpUcmVlSW5kZW50JyxcbiAgdGVtcGxhdGU6IGAgPHNwYW4gKm5nRm9yPVwibGV0IGkgb2YgbGlzdE9mVW5pdDsgbGV0IGluZGV4ID0gaW5kZXhcIiBbbmdDbGFzc109XCJ1bml0TWFwT2ZDbGFzcyhpbmRleClcIj48L3NwYW4+IGAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5hcmlhLWhpZGRlbl0nOiAndHJ1ZScsXG4gICAgJ1tjbGFzcy5hbnQtdHJlZS1pbmRlbnRdJzogJyFuelNlbGVjdE1vZGUnLFxuICAgICdbY2xhc3MuYW50LXNlbGVjdC10cmVlLWluZGVudF0nOiAnbnpTZWxlY3RNb2RlJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56VHJlZUluZGVudENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgbnpUcmVlTGV2ZWw6IG51bWJlcjtcbiAgQElucHV0KCkgbnpJc1N0YXJ0OiBib29sZWFuW107XG4gIEBJbnB1dCgpIG56SXNFbmQ6IGJvb2xlYW5bXTtcbiAgQElucHV0KCkgbnpTZWxlY3RNb2RlID0gZmFsc2U7XG5cbiAgbGlzdE9mVW5pdDogbnVtYmVyW10gPSBbXTtcblxuICB1bml0TWFwT2ZDbGFzcyhpbmRleDogbnVtYmVyKTogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0ge1xuICAgIHJldHVybiB7XG4gICAgICBbYGFudC10cmVlLWluZGVudC11bml0YF06ICF0aGlzLm56U2VsZWN0TW9kZSxcbiAgICAgIFtgYW50LXRyZWUtaW5kZW50LXVuaXQtc3RhcnRgXTogIXRoaXMubnpTZWxlY3RNb2RlICYmIHRoaXMubnpJc1N0YXJ0W2luZGV4ICsgMV0sXG4gICAgICBbYGFudC10cmVlLWluZGVudC11bml0LWVuZGBdOiAhdGhpcy5uelNlbGVjdE1vZGUgJiYgdGhpcy5ueklzRW5kW2luZGV4ICsgMV0sXG4gICAgICBbYGFudC1zZWxlY3QtdHJlZS1pbmRlbnQtdW5pdGBdOiB0aGlzLm56U2VsZWN0TW9kZSxcbiAgICAgIFtgYW50LXNlbGVjdC10cmVlLWluZGVudC11bml0LXN0YXJ0YF06IHRoaXMubnpTZWxlY3RNb2RlICYmIHRoaXMubnpJc1N0YXJ0W2luZGV4ICsgMV0sXG4gICAgICBbYGFudC1zZWxlY3QtdHJlZS1pbmRlbnQtdW5pdC1lbmRgXTogdGhpcy5uelNlbGVjdE1vZGUgJiYgdGhpcy5ueklzRW5kW2luZGV4ICsgMV1cbiAgICB9O1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBjb25zdCB7IG56VHJlZUxldmVsIH0gPSBjaGFuZ2VzO1xuICAgIGlmIChuelRyZWVMZXZlbCkge1xuICAgICAgdGhpcy5saXN0T2ZVbml0ID0gWy4uLm5ldyBBcnJheShuelRyZWVMZXZlbC5jdXJyZW50VmFsdWUgfHwgMCldO1xuICAgIH1cbiAgfVxufVxuIl19