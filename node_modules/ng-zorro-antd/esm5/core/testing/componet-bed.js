/**
 * @fileoverview added by tsickle
 * Generated from: componet-bed.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __read, __spread } from "tslib";
import { CommonModule } from '@angular/common';
import { NO_ERRORS_SCHEMA } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
/**
 * @record
 * @template T
 */
export function ComponentBed() { }
if (false) {
    /** @type {?} */
    ComponentBed.prototype.bed;
    /** @type {?} */
    ComponentBed.prototype.fixture;
    /** @type {?} */
    ComponentBed.prototype.nativeElement;
    /** @type {?} */
    ComponentBed.prototype.debugElement;
    /** @type {?} */
    ComponentBed.prototype.component;
}
/**
 * @template T
 * @param {?} component
 * @param {?=} options
 * @return {?}
 */
export function createComponentBed(component, options) {
    if (options === void 0) { options = {
        providers: [],
        declarations: [],
        imports: []
    }; }
    var imports = options.imports, declarations = options.declarations, providers = options.providers;
    /** @type {?} */
    var config = {
        imports: __spread([NoopAnimationsModule, CommonModule], (imports || [])),
        declarations: __spread([component], (declarations || [])),
        schemas: [NO_ERRORS_SCHEMA],
        providers: providers || []
    };
    /** @type {?} */
    var bed = TestBed.configureTestingModule(config);
    /** @type {?} */
    var fixture = TestBed.createComponent(component);
    fixture.detectChanges();
    return {
        bed: bed,
        fixture: fixture,
        nativeElement: fixture.nativeElement,
        debugElement: fixture.debugElement,
        component: fixture.componentInstance
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZXQtYmVkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctem9ycm8tYW50ZC9jb3JlL3Rlc3RpbmcvIiwic291cmNlcyI6WyJjb21wb25ldC1iZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBcUMsZ0JBQWdCLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQ3BHLE9BQU8sRUFBb0IsT0FBTyxFQUFpQixNQUFNLHVCQUF1QixDQUFDO0FBQ2pGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDOzs7OztBQUk1RSxrQ0FNQzs7O0lBTEMsMkJBQW1COztJQUNuQiwrQkFBNkI7O0lBQzdCLHFDQUEyQjs7SUFDM0Isb0NBQTJCOztJQUMzQixpQ0FBYTs7Ozs7Ozs7QUFFZixNQUFNLFVBQVUsa0JBQWtCLENBQ2hDLFNBQWtCLEVBQ2xCLE9BUUM7SUFSRCx3QkFBQSxFQUFBO1FBS0UsU0FBUyxFQUFFLEVBQUU7UUFDYixZQUFZLEVBQUUsRUFBRTtRQUNoQixPQUFPLEVBQUUsRUFBRTtLQUNaO0lBRU8sSUFBQSx5QkFBTyxFQUFFLG1DQUFZLEVBQUUsNkJBQVM7O1FBQ2xDLE1BQU0sR0FBRztRQUNiLE9BQU8sWUFBRyxvQkFBb0IsRUFBRSxZQUFZLEdBQUssQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLENBQUM7UUFDakUsWUFBWSxZQUFHLFNBQVMsR0FBSyxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNsRCxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUMzQixTQUFTLEVBQUUsU0FBUyxJQUFJLEVBQUU7S0FDM0I7O1FBQ0ssR0FBRyxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUM7O1FBQzVDLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFJLFNBQVMsQ0FBQztJQUNyRCxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDeEIsT0FBTztRQUNMLEdBQUcsS0FBQTtRQUNILE9BQU8sU0FBQTtRQUNQLGFBQWEsRUFBRSxPQUFPLENBQUMsYUFBYTtRQUNwQyxZQUFZLEVBQUUsT0FBTyxDQUFDLFlBQVk7UUFDbEMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxpQkFBaUI7S0FDckMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgRGVidWdFbGVtZW50LCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOT19FUlJPUlNfU0NIRU1BLCBQcm92aWRlciwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50Rml4dHVyZSwgVGVzdEJlZCwgVGVzdEJlZFN0YXRpYyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBOb29wQW5pbWF0aW9uc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBOelNhZmVBbnkgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHlwZXMnO1xuXG50eXBlIENvbXBvbmVudERlcHMgPSBBcnJheTxUeXBlPE56U2FmZUFueT4gfCBNb2R1bGVXaXRoUHJvdmlkZXJzPjtcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9uZW50QmVkPFQ+IHtcbiAgYmVkOiBUZXN0QmVkU3RhdGljO1xuICBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPFQ+O1xuICBuYXRpdmVFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgZGVidWdFbGVtZW50OiBEZWJ1Z0VsZW1lbnQ7XG4gIGNvbXBvbmVudDogVDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnRCZWQ8VD4oXG4gIGNvbXBvbmVudDogVHlwZTxUPixcbiAgb3B0aW9uczoge1xuICAgIHByb3ZpZGVycz86IFByb3ZpZGVyW107XG4gICAgZGVjbGFyYXRpb25zPzogQ29tcG9uZW50RGVwcztcbiAgICBpbXBvcnRzPzogQ29tcG9uZW50RGVwcztcbiAgfSA9IHtcbiAgICBwcm92aWRlcnM6IFtdLFxuICAgIGRlY2xhcmF0aW9uczogW10sXG4gICAgaW1wb3J0czogW11cbiAgfVxuKTogQ29tcG9uZW50QmVkPFQ+IHtcbiAgY29uc3QgeyBpbXBvcnRzLCBkZWNsYXJhdGlvbnMsIHByb3ZpZGVycyB9ID0gb3B0aW9ucztcbiAgY29uc3QgY29uZmlnID0ge1xuICAgIGltcG9ydHM6IFtOb29wQW5pbWF0aW9uc01vZHVsZSwgQ29tbW9uTW9kdWxlLCAuLi4oaW1wb3J0cyB8fCBbXSldLFxuICAgIGRlY2xhcmF0aW9uczogW2NvbXBvbmVudCwgLi4uKGRlY2xhcmF0aW9ucyB8fCBbXSldLFxuICAgIHNjaGVtYXM6IFtOT19FUlJPUlNfU0NIRU1BXSxcbiAgICBwcm92aWRlcnM6IHByb3ZpZGVycyB8fCBbXVxuICB9O1xuICBjb25zdCBiZWQgPSBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoY29uZmlnKTtcbiAgY29uc3QgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50PFQ+KGNvbXBvbmVudCk7XG4gIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xuICByZXR1cm4ge1xuICAgIGJlZCxcbiAgICBmaXh0dXJlLFxuICAgIG5hdGl2ZUVsZW1lbnQ6IGZpeHR1cmUubmF0aXZlRWxlbWVudCxcbiAgICBkZWJ1Z0VsZW1lbnQ6IGZpeHR1cmUuZGVidWdFbGVtZW50LFxuICAgIGNvbXBvbmVudDogZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZVxuICB9O1xufVxuIl19