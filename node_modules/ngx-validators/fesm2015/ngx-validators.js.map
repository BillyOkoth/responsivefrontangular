{"version":3,"file":"ngx-validators.js.map","sources":["ng://ngx-validators/components/abstract-control-util.ts","ng://ngx-validators/components/password/password-validators.ts","ng://ngx-validators/components/email/email-util.ts","ng://ngx-validators/components/email/email-validators.ts","ng://ngx-validators/components/universal/universal-validators.ts","ng://ngx-validators/components/creditcard/creditcard-validators.ts","ng://ngx-validators/components/password/password.directive.ts","ng://ngx-validators/components/email/email.directive.ts","ng://ngx-validators/components/universal/universal.directive.ts","ng://ngx-validators/components/creditcard/creditcard.directive.ts","ng://ngx-validators/components/equal-to/equal-to.directive.ts","ng://ngx-validators/components/validators.module.ts","ng://ngx-validators/components/equal-to/equal-to-validator.ts"],"sourcesContent":["import { AbstractControl } from '@angular/forms';\n\nexport class AbstractControlUtil {\n    static isNotPresent(control: AbstractControl): boolean {\n        let value = control.value;\n        if (value === undefined || value === null) {\n            return true;\n        }\n        return value !== '' ? false : true;\n    };\n\n    static addError(control: AbstractControl, errorId: string, value: any) {\n        if (!control.errors) {\n            control.setErrors({ [errorId]: value });\n        } else if (!control.hasError(errorId)) {\n            control.errors[errorId] = value;\n        }\n    }\n\n    static removeError(control: AbstractControl, errorId: string) {\n        if (control.errors && control.hasError(errorId)) {\n            if (Object.keys(control.errors).length > 1) {\n                delete control.errors[errorId];\n            } else {\n                control.setErrors(null);\n            }\n        }\n    }\n}\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\nimport { AbstractControlUtil } from './../abstract-control-util';\n\n// tslint:disable-next-line:variable-name\nexport class PasswordValidators {\n\n    public static repeatCharacterRegexRule(repeatCount: number) {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let repeatDec = repeatCount - 1;\n            let pattern = '([^\\\\x00-\\\\x1F])\\\\1{' + repeatDec + '}';\n            if (control.value !== '' && new RegExp(pattern).test(control.value)) {\n                return { 'repeatCharacterRegexRule': { 'repeatCount': repeatCount } };\n            }\n            return undefined;\n        };\n        return validator;\n    };\n\n    public static allowedCharacterRule(allowedChars: string[]): ValidatorFn {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            let valid = true;\n            let invalidChars: string[] = [];\n\n            for (let char of value) {\n                if (allowedChars.indexOf(char) === -1) {\n                    valid = false;\n                    if (invalidChars.indexOf(char) === -1) {\n                        invalidChars.push(char);\n                    }\n                }\n            }\n            if (!valid) {\n                return { 'allowedCharacterRule': { 'invalidChars': invalidChars, 'allowedChars': allowedChars } };\n            }\n            return undefined;\n        };\n        return validator;\n    };\n\n    public static alphabeticalCharacterRule(amount: number): ValidatorFn {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (value.length === 0) {\n                return undefined;\n            }\n            let pattern = /[^A-Za-z]+/g;\n            let stripped = value.replace(pattern, '');\n            if (stripped.length < amount) {\n                return { 'alphabeticalCharacterRule': { 'required': amount, 'actual': stripped.length } };\n            }\n            return undefined;\n        };\n        return validator;\n    };\n\n    public static digitCharacterRule(amount: number): ValidatorFn {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (value.length === 0) {\n                return undefined;\n            }\n            let pattern = /[^0-9\\.]+/g;\n            let stripped = value.replace(pattern, '');\n            if (stripped.length < amount) {\n                return { 'digitCharacterRule': { 'required': amount, 'actual': stripped.length } };\n            }\n            return undefined;\n        };\n        return validator;\n    };\n\n    public static lowercaseCharacterRule(amount: number): ValidatorFn {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (value.length === 0) {\n                return undefined;\n            }\n            let pattern = /[^a-z]+/g;\n            let stripped = value.replace(pattern, '');\n            if (stripped.length < amount) {\n                return { 'lowercaseCharacterRule': { 'required': amount, 'actual': stripped.length } };\n            }\n            return undefined;\n        };\n        return validator;\n    };\n\n    public static uppercaseCharacterRule(amount: number): ValidatorFn {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (value.length === 0) {\n                return undefined;\n            }\n            let pattern = /[^A-Z]+/g;\n            let stripped = value.replace(pattern, '');\n            if (stripped.length < amount) {\n                return { 'uppercaseCharacterRule': { 'required': amount, 'actual': stripped.length } };\n            }\n            return undefined;\n        };\n        return validator;\n    };\n\n    public static specialCharacterRule(amount: number): ValidatorFn {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (value.length === 0) {\n                return undefined;\n            }\n            let pattern = /[\\w\\s]+/g;\n            let stripped = value.replace(pattern, '');\n            if (stripped.length < amount) {\n                return { 'specialCharacterRule': { 'required': amount, 'actual': stripped.length } };\n            }\n            return undefined;\n        };\n        return validator;\n    };\n\n    public static mismatchedPasswords(passwordControlName?: string, confirmPasswordControlName?: string): ValidatorFn {\n        const validator = (group: AbstractControl): { [key: string]: any } => {\n            let newPasswordValue = group.get(passwordControlName ? passwordControlName : 'newPassword').value;\n            let newPasswordConfirmValue = group.get(confirmPasswordControlName ? confirmPasswordControlName : 'confirmPassword').value;\n            if (newPasswordValue !== newPasswordConfirmValue) {\n                AbstractControlUtil.addError(group.get(confirmPasswordControlName ? confirmPasswordControlName : 'confirmPassword'), 'mismatchedPasswords', true)\n\n                return { 'mismatchedPasswords': true };\n            } else {\n                AbstractControlUtil.removeError(group.get(confirmPasswordControlName ? confirmPasswordControlName : 'confirmPassword'), 'mismatchedPasswords');\n            }\n            return undefined;\n\n        };\n        return validator;\n    };\n\n}\n","import { Injectable } from \"@angular/core\";\n\n/*\n * Code fromMailcheck https://github.com/mailcheck/mailcheck\n * Author\n * Derrick Ko (@derrickko)\n *\n * Released under the MIT License.\n *\n * v 1.1.2\n */\n\nexport interface EmailOptions {\n    domains: string[],\n    secondLevelDomains: string[],\n    topLevelDomains: string[]\n}\n\nexport interface SplittedEmail {\n    topLevelDomain: string,\n    secondLevelDomain: string,\n    domain: string,\n    address: string\n}\n\nexport interface Suggestion {\n    address: string,\n    domain: string,\n    full: string\n}\n\ninterface Offset {\n    c1: number,\n    c2: number,\n    trans: boolean\n}\n\nexport class EmailSuggestion {\n\n    private defaultOptions: EmailOptions = {\n        domains: ['msn.com', 'bellsouth.net',\n            'telus.net', 'comcast.net', 'optusnet.com.au',\n            'earthlink.net', 'qq.com', 'sky.com', 'icloud.com',\n            'mac.com', 'sympatico.ca', 'googlemail.com',\n            'att.net', 'xtra.co.nz', 'web.de',\n            'cox.net', 'gmail.com', 'ymail.com', 'yahoo.com',\n            'aim.com', 'rogers.com', 'verizon.net',\n            'rocketmail.com', 'google.com', 'optonline.net',\n            'sbcglobal.net', 'aol.com', 'me.com', 'btinternet.com',\n            'charter.net', 'shaw.ca'],\n        secondLevelDomains: [\"yahoo\", \"hotmail\", \"mail\", \"live\", \"outlook\", \"gmx\"],\n        topLevelDomains: [\"com\", \"com.au\", \"com.tw\", \"ca\", \"co.nz\", \"co.uk\", \"de\",\n            \"fr\", \"it\", \"ru\", \"net\", \"org\", \"edu\", \"gov\", \"jp\", \"nl\", \"kr\", \"se\", \"eu\",\n            \"ie\", \"co.il\", \"us\", \"at\", \"be\", \"dk\", \"hk\", \"es\", \"gr\", \"ch\", \"no\", \"cz\",\n            \"in\", \"net\", \"net.au\", \"info\", \"biz\", \"mil\", \"co.jp\", \"sg\", \"hu\", \"uk\"]\n    }\n\n    public suggest(email: string, options?: EmailOptions): { [key: string]: Suggestion } {\n        let opt = this.defaultOptions;\n        if (options != undefined) {\n            opt = options;\n        }\n        let emailParts = this.splitEmail(email.toLowerCase());\n\n        if (!emailParts) {\n            return undefined;\n        }\n\n        if (opt.secondLevelDomains && opt.topLevelDomains) {\n            // If the email is a valid 2nd-level + top-level, do not suggest anything.\n            if (opt.secondLevelDomains.indexOf(emailParts.secondLevelDomain) !== -1 && opt.topLevelDomains.indexOf(emailParts.topLevelDomain) !== -1) {\n                return undefined;\n            }\n        }\n\n        let closestDomain = this.findClosestDomain(emailParts.domain, opt.domains, 2);\n        if (closestDomain) {\n            if (closestDomain == emailParts.domain) {\n                // The email address exactly matches one of the supplied domains; do not return a suggestion.\n                return undefined;\n            } else {\n                // The email address closely matches one of the supplied domains; return a suggestion\n                return { suggestion: { address: emailParts.address, domain: closestDomain, full: emailParts.address + \"@\" + closestDomain } };\n            }\n        }\n\n        let closestSecondLevelDomain = this.findClosestDomain(emailParts.secondLevelDomain, opt.secondLevelDomains, 2);\n        let closestTopLevelDomain = this.findClosestDomain(emailParts.topLevelDomain, opt.topLevelDomains, 2);\n\n        if (emailParts.domain) {\n            closestDomain = emailParts.domain;\n            let rtrn = false;\n\n            if (closestSecondLevelDomain && closestSecondLevelDomain != emailParts.secondLevelDomain) {\n                // The email address may have a mispelled second-level domain; return a suggestion\n                closestDomain = closestDomain.replace(emailParts.secondLevelDomain, closestSecondLevelDomain);\n                rtrn = true;\n            }\n\n            if (closestTopLevelDomain && closestTopLevelDomain != emailParts.topLevelDomain && emailParts.secondLevelDomain !== '') {\n                // The email address may have a mispelled top-level domain; return a suggestion\n                closestDomain = closestDomain.replace(new RegExp(emailParts.topLevelDomain + \"$\"), closestTopLevelDomain);\n                rtrn = true;\n            }\n\n            if (rtrn) {\n                return { suggestion: { address: emailParts.address, domain: closestDomain, full: emailParts.address + \"@\" + closestDomain } };\n            }\n        }\n\n        /* The email address exactly matches one of the supplied domains, does not closely\n         * match any domain and does not appear to simply have a mispelled top-level domain,\n         * or is an invalid email address; do not return a suggestion.\n         */\n        return undefined;\n\n    };\n\n    public splitEmail(email: string) {\n\n        let parts = email.trim().split('@');\n\n        if (parts.length < 2) {\n            return undefined;\n        }\n\n        for (var i = 0; i < parts.length; i++) {\n            if (parts[i] === '') {\n                return undefined;\n            }\n        }\n\n        let result = {\n            topLevelDomain: \"\",\n            secondLevelDomain: \"\",\n            domain: parts.pop(),\n            address: ''\n        }\n\n        let domainParts = result.domain.split('.');\n\n        if (domainParts.length === 0) {\n            return undefined;\n        } else if (domainParts.length == 1) {\n            result.topLevelDomain = domainParts[0];\n        } else {\n            // The address has a domain and a top-level domain\n            result.secondLevelDomain = domainParts[0];\n            for (let j = 1; j < domainParts.length; j++) {\n                result.topLevelDomain += domainParts[j] + '.';\n            }\n            result.topLevelDomain = result.topLevelDomain.substring(0, result.topLevelDomain.length - 1);\n        }\n\n        result.address = parts.join('@');\n\n        return result;\n\n    }\n\n    private findClosestDomain(domain: string, domains: string[], threshold: number): string {\n        let dist;\n        let minDist = Infinity;\n        let closestDomain = null;\n\n        if (!domain || !domains) {\n            return undefined;\n        }\n\n        for (let i = 0; i < domains.length; i++) {\n            if (domain === domains[i]) {\n                return domain;\n            }\n            dist = this.sift4Distance(domain, domains[i], 5);\n            if (dist < minDist) {\n                minDist = dist;\n                closestDomain = domains[i];\n            }\n        }\n\n        if (minDist <= threshold && closestDomain !== null) {\n            return closestDomain;\n        } else {\n            return undefined;\n        }\n    }\n\n    private sift4Distance(s1: string, s2: string, maxOffset: number): number {\n        // sift4: https://siderite.blogspot.com/2014/11/super-fast-and-accurate-string-distance.html\n        if (maxOffset === undefined) {\n            maxOffset = 5; //default\n        }\n\n        if (!s1 || !s1.length) {\n            if (!s2) {\n                return 0;\n            }\n            return s2.length;\n        }\n\n        if (!s2 || !s2.length) {\n            return s1.length;\n        }\n\n        let l1 = s1.length;\n        let l2 = s2.length;\n\n        let c1 = 0;  //cursor for string 1\n        let c2 = 0;  //cursor for string 2\n        let lcss = 0;  //largest common subsequence\n        let local_cs = 0; //local common substring\n        let trans = 0;  //number of transpositions ('ab' vs 'ba')\n        let offset_arr: Offset[] = [];  //offset pair array, for computing the transpositions\n\n        while ((c1 < l1) && (c2 < l2)) {\n            if (s1.charAt(c1) == s2.charAt(c2)) {\n                local_cs++;\n                let isTrans = false;\n                //see if current match is a transposition\n                let i = 0;\n                while (i < offset_arr.length) {\n                    let ofs = offset_arr[i];\n                    if (c1 <= ofs.c1 || c2 <= ofs.c2) {\n                        // when two matches cross, the one considered a transposition is the one with the largest difference in offsets\n                        isTrans = Math.abs(c2 - c1) >= Math.abs(ofs.c2 - ofs.c1);\n                        if (isTrans) {\n                            trans++;\n                        } else {\n                            if (!ofs.trans) {\n                                ofs.trans = true;\n                                trans++;\n                            }\n                        }\n                        break;\n                    } else {\n                        if (c1 > ofs.c2 && c2 > ofs.c1) {\n                            offset_arr.splice(i, 1);\n                        } else {\n                            i++;\n                        }\n                    }\n                }\n                offset_arr.push({\n                    c1: c1,\n                    c2: c2,\n                    trans: isTrans\n                });\n            } else {\n                lcss += local_cs;\n                local_cs = 0;\n                if (c1 != c2) {\n                    c1 = c2 = Math.min(c1, c2);  //using min allows the computation of transpositions\n                }\n                //if matching characters are found, remove 1 from both cursors (they get incremented at the end of the loop)\n                //so that we can have only one code block handling matches \n                for (let j = 0; j < maxOffset && (c1 + j < l1 || c2 + j < l2); j++) {\n                    if ((c1 + j < l1) && (s1.charAt(c1 + j) == s2.charAt(c2))) {\n                        c1 += j - 1;\n                        c2--;\n                        break;\n                    }\n                    if ((c2 + j < l2) && (s1.charAt(c1) == s2.charAt(c2 + j))) {\n                        c1--;\n                        c2 += j - 1;\n                        break;\n                    }\n                }\n            }\n            c1++;\n            c2++;\n            // this covers the case where the last match is on the last token in list, so that it can compute transpositions correctly\n            if ((c1 >= l1) || (c2 >= l2)) {\n                lcss += local_cs;\n                local_cs = 0;\n                c1 = c2 = Math.min(c1, c2);\n            }\n        }\n        lcss += local_cs;\n        return Math.round(Math.max(l1, l2) - lcss + trans); //add the cost of transpositions to the final result\n    }\n}","import { AbstractControl, ValidatorFn } from '@angular/forms';\nimport { AbstractControlUtil } from './../abstract-control-util';\nimport { EmailSuggestion, EmailOptions } from './email-util';\n\nexport class EmailValidators {\n    private static emailSuggestion: EmailSuggestion = new EmailSuggestion();\n\n    public static simple(control: AbstractControl): { [key: string]: boolean } {\n        if (AbstractControlUtil.isNotPresent(control)) {\n            return undefined\n        };\n\n        let pattern = /.+@.+\\..+/i;\n        if (pattern.test(control.value)) {\n            return undefined;\n        }\n        return { 'simpleEmailRule': true };\n    };\n\n    // https://www.w3.org/TR/html5/forms.html#valid-e-mail-address\n    public static normal(control: AbstractControl): { [key: string]: boolean } {\n        if (AbstractControlUtil.isNotPresent(control)) {\n            return undefined\n        };\n        // tslint:disable-next-line:max-line-length\n        let pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n        if (pattern.test(control.value)) {\n            return undefined;\n        }\n        return { 'normalEmailRule': true };\n    };\n\n    public static suggest(options?: EmailOptions): ValidatorFn {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) {\n                return undefined\n            };\n            return this.emailSuggestion.suggest(control.value, options)\n        };\n        return validator;\n    };\n\n}\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\nimport { AbstractControlUtil } from '../abstract-control-util';\n\nexport class UniversalValidators {\n\n    public static noWhitespace(control: AbstractControl): { [key: string]: boolean } {\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        let pattern = '\\\\s';\n        if (new RegExp(pattern).test(control.value)) {\n            return { 'noWhitespaceRequired': true };\n        }\n        return undefined;\n    };\n\n    public static noEmptyString(control: AbstractControl): { [key: string]: boolean } {\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (control.value.trim().length === 0) {\n            return { 'noEmptyString': true };\n        }\n        return undefined;\n    };\n\n    public static isNumber(control: AbstractControl): { [key: string]: boolean } {\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (isNaN(control.value)) {\n            return { 'numberRequired': true };\n        }\n        return undefined;\n    };\n\n    public static isInRange(minValue: number, maxValue: number): ValidatorFn {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            if (isNaN(control.value)) {\n                return { 'numberRequired': true };\n            }\n            if (+control.value < minValue) {\n                return { 'rangeValueToSmall': { 'requiredMinValue': minValue, 'requiredMaxValue': maxValue, 'actual': control.value } };\n            }\n\n            if (+control.value > maxValue) {\n                return { 'rangeValueToBig': { 'requiredMinValue': minValue, 'requiredMaxValue': maxValue, 'actual': control.value } };\n            } else {\n                return undefined;\n            }\n        };\n        return validator;\n    };\n\n    public static minLength(minLength: number) {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (value.length >= minLength) {\n                return undefined;\n            }\n            return { 'minLength': { 'requiredMinLength': minLength, 'actualLength': value.length } };\n        };\n        return validator;\n    };\n\n    public static maxLength(maxLength: number) {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (maxLength >= value.length) {\n                return undefined;\n            }\n            return { 'maxLength': { 'requiredMaxLength': maxLength, 'actualLength': value.length } };\n        };\n        return validator;\n    };\n\n    public static min(min: number) {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (isNaN(control.value)) {\n                return { 'numberRequired': true };\n            }\n            if (+value >= min) {\n                return undefined;\n            }\n            return { 'min': { 'required': min, 'actual': control.value } };\n        };\n        return validator;\n    };\n\n    public static max(max: number) {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (isNaN(control.value)) {\n                return { 'numberRequired': true };\n            }\n            if (max >= +value) {\n                return undefined;\n            }\n            return { 'max': { 'required': max, 'actual': control.value } };\n        };\n        return validator;\n    };\n\n}\n","import { AbstractControl } from '@angular/forms';\nimport { AbstractControlUtil } from './../abstract-control-util';\n\nconst visaRegex = '^(?:4[0-9]{12})(?:[0-9]{3})?$';\nconst americanExpressRegex = '^(?:3[47][0-9]{13})$';\nconst maestroRegex = '^(?:(?:5[0678]\\\\d\\\\d|6304|6390|67\\\\d\\\\d)\\\\d{8,15})$';\nconst jcbRegex = '^(?:(?:2131|1800|35\\\\d{3})\\\\d{11})$';\nconst discoverRegex = '^(?:6(?:011|5[0-9]{2})(?:[0-9]{12}))$';\nconst dinersclubRegex = '^(?:3(?:0[0-5]|[68][0-9])[0-9]{11})$';\nconst mastercardRegex = '^(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$';\n\nexport class CreditCardValidators {\n\n    public static isCreditCard(control: AbstractControl): { [key: string]: boolean } {\n\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (new RegExp(americanExpressRegex + '|' +\n            visaRegex + '|' +\n            maestroRegex + '|' +\n            jcbRegex + '|' +\n            discoverRegex + '|' +\n            mastercardRegex + '|' +\n            dinersclubRegex\n        ).test(control.value)) {\n            return undefined;\n        }\n        return { 'creditcard': true };\n    };\n\n    public static americanExpress(control: AbstractControl): { [key: string]: boolean } {\n\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (new RegExp(americanExpressRegex).test(control.value)) {\n            return undefined;\n        }\n        return { 'americanExpress': true };\n    };\n\n    public static dinersclub(control: AbstractControl): { [key: string]: boolean } {\n\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (new RegExp(dinersclubRegex).test(control.value)) {\n            return undefined;\n        }\n        return { 'dinersclub': true };\n    };\n\n    public static discover(control: AbstractControl): { [key: string]: boolean } {\n\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (new RegExp(discoverRegex).test(control.value)) {\n            return undefined;\n        }\n        return { 'discover': true };\n    };\n    public static jcb(control: AbstractControl): { [key: string]: boolean } {\n\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (new RegExp(jcbRegex).test(control.value)) {\n            return undefined;\n        }\n        return { 'jcb': true };\n    };\n    public static maestro(control: AbstractControl): { [key: string]: boolean } {\n\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (new RegExp(maestroRegex).test(control.value)) {\n            return undefined;\n        }\n        return { 'maestro': true };\n    };\n\n    public static mastercard(control: AbstractControl): { [key: string]: boolean } {\n\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (new RegExp(mastercardRegex).test(control.value)) {\n            return undefined;\n        }\n        return { 'mastercard': true };\n    };\n\n    public static visa(control: AbstractControl): { [key: string]: boolean } {\n\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (new RegExp(visaRegex).test(control.value)) {\n            return undefined;\n        }\n        return { 'visa': true };\n    };\n}\n","import { Directive, Input, forwardRef, OnInit } from '@angular/core';\nimport { NG_VALIDATORS, Validator, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { PasswordValidators } from './password-validators';\n\n@Directive({\n    selector: '[password][formControlName],[password][formControl],[password][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => PasswordValidatorDirective),\n        multi: true\n    }]\n})\nexport class PasswordValidatorDirective implements Validator, OnInit {\n    @Input() repeatCharacter: number = 4;\n    @Input() alphabeticalCharacter: number = 1;\n    @Input() digitCharacter: number = 1;\n    @Input() lowercaseCharacter: number = 1;\n    @Input() uppercaseCharacter: number = 1;\n\n    private repeatCharacterValidator: ValidatorFn;\n    private alphabeticalCharacterValidator: ValidatorFn;\n    private digitCharacterValidator: ValidatorFn;\n    private lowercaseCharacterValidator: ValidatorFn;\n    private uppercaseCharacterValidator: ValidatorFn;\n\n    ngOnInit() {\n        this.repeatCharacterValidator = PasswordValidators.repeatCharacterRegexRule(this.repeatCharacter);\n        this.alphabeticalCharacterValidator = PasswordValidators.alphabeticalCharacterRule(this.alphabeticalCharacter);\n        this.digitCharacterValidator = PasswordValidators.digitCharacterRule(this.digitCharacter);\n        this.lowercaseCharacterValidator = PasswordValidators.lowercaseCharacterRule(this.lowercaseCharacter);\n        this.uppercaseCharacterValidator = PasswordValidators.uppercaseCharacterRule(this.uppercaseCharacter);\n\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        let compose: ValidatorFn = Validators.compose([this.repeatCharacterValidator,\n        this.digitCharacterValidator, this.alphabeticalCharacterValidator,\n        this.lowercaseCharacterValidator, this.uppercaseCharacterValidator]);\n        return compose(c);\n    }\n}","import { EmailSuggestion, EmailOptions } from './email-util';\nimport { Directive, Input, forwardRef, OnInit } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { EmailValidators } from './email-validators';\n\n@Directive({\n    selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => EmailValidatorDirective),\n        multi: true\n    }]\n})\nexport class EmailValidatorDirective implements Validator, OnInit {\n    @Input() email: string = 'normal';\n\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        switch (this.email) {\n            case 'simple':\n                this.validator = EmailValidators.simple;\n                break;\n            case 'normal':\n                this.validator = EmailValidators.normal;\n                break;\n            default:\n                this.validator = EmailValidators.normal;\n                break;\n        }\n\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n\n@Directive({\n    selector: '[emailSuggest][formControlName],[emailSuggest][formControl],[emailSuggest][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => EmailSuggestValidatorDirective),\n        multi: true\n    }]\n})\nexport class EmailSuggestValidatorDirective implements Validator, OnInit {\n    @Input() emailSuggest: EmailOptions;\n\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        this.validator = EmailValidators.suggest(this.emailSuggest);\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n","import { Directive, forwardRef, Input, OnInit } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, Validator, ValidatorFn } from '@angular/forms';\n\nimport { UniversalValidators } from './universal-validators';\n\n@Directive({\n    selector: '[noWhitespace][formControlName],[noWhitespace][formControl],[noWhitespace][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => WhiteSpaceValidatorDirective),\n        multi: true\n    }]\n})\nexport class WhiteSpaceValidatorDirective implements Validator, OnInit {\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        this.validator = UniversalValidators.noWhitespace;\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n\n@Directive({\n    selector: '[noEmptyString][formControlName],[noEmptyString][formControl],[noEmptyString][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => EmptyStringValidatorDirective),\n        multi: true\n    }]\n})\nexport class EmptyStringValidatorDirective implements Validator, OnInit {\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        this.validator = UniversalValidators.noEmptyString;\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n\n@Directive({\n    selector: '[isNumber][formControlName],[isNumber][formControl],[isNumber][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => IsNumberValidatorDirective),\n        multi: true\n    }]\n})\nexport class IsNumberValidatorDirective implements Validator, OnInit {\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        this.validator = UniversalValidators.isNumber;\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n\n@Directive({\n    selector: '[isInRange][formControlName],[isInRange][formControl],[isInRange][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => IsInRangeValidatorDirective),\n        multi: true\n    }]\n})\nexport class IsInRangeValidatorDirective implements Validator, OnInit {\n    @Input() minValue: number;\n    @Input() maxValue: number;\n\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        this.validator = UniversalValidators.isInRange(this.minValue, this.maxValue);\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n\n@Directive({\n    selector: 'input[type=text][max][formControlName],input[type=text][max][formControl],input[type=text][max][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => MaxValidatorDirective),\n        multi: true\n    }]\n})\nexport class MaxValidatorDirective implements Validator, OnInit {\n    @Input() max: number;\n\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        this.validator = UniversalValidators.max(this.max);\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n\n@Directive({\n    selector: 'input[type=text][min][formControlName],input[type=text][min][formControl],input[type=text][min][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => MinValidatorDirective),\n        multi: true\n    }]\n})\nexport class MinValidatorDirective implements Validator, OnInit {\n    @Input() min: number;\n\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        this.validator = UniversalValidators.min(this.min);\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n","import { Directive, Input, forwardRef, OnInit } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { CreditCardValidators } from './creditcard-validators';\n\n@Directive({\n    selector: '[creditCard][formControlName],[creditCard][formControl],[creditCard][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => CreditCardValidatorDirective),\n        multi: true\n    }]\n})\n\nexport class CreditCardValidatorDirective implements Validator, OnInit {\n    @Input() creditCard: string = 'all';\n\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        switch (this.creditCard) {\n            case 'all':\n                this.validator = CreditCardValidators.isCreditCard;\n                break;\n            case 'americanExpress':\n                this.validator = CreditCardValidators.americanExpress;\n                break;\n            case 'dinersclub':\n                this.validator = CreditCardValidators.dinersclub;\n                break;\n            case 'discover':\n                this.validator = CreditCardValidators.discover;\n                break;\n            case 'jcb':\n                this.validator = CreditCardValidators.jcb;\n                break;\n            case 'maestro':\n                this.validator = CreditCardValidators.maestro;\n                break;\n            case 'mastercard':\n                this.validator = CreditCardValidators.mastercard;\n                break;\n            case 'visa':\n                this.validator = CreditCardValidators.visa;\n                break;\n            default:\n                this.validator = CreditCardValidators.isCreditCard;\n                break;\n        }\n\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n","import { Directive, forwardRef, Input, OnDestroy } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\n@Directive({\n  selector: '[equalTo][ngModel], [equalTo][formControlName], [equalTo][formControl]',\n  providers: [{\n    provide: NG_VALIDATORS,\n    // tslint:disable-next-line:no-forward-ref\n    useExisting: forwardRef(() => EqualToDirective),\n    multi: true\n  }]\n})\nexport class EqualToDirective implements Validator, OnDestroy {\n\n  @Input() equalTo: string | AbstractControl;\n\n  private subscription: Subscription;\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    const otherControl = typeof this.equalTo === 'string' ? c.parent.get(this.equalTo) : this.equalTo;\n    if (!this.subscription) {\n      this.subscription = otherControl.valueChanges\n        .pipe(delay(1)).subscribe(() => {\n          c.updateValueAndValidity()\n        });\n    }\n    return c.value !== otherControl.value ? {notEqualTo: true} : null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  EmptyStringValidatorDirective,\n  IsInRangeValidatorDirective,\n  IsNumberValidatorDirective,\n  MaxValidatorDirective,\n  MinValidatorDirective,\n  WhiteSpaceValidatorDirective\n} from './universal/universal.directive';\nimport { NgModule } from '@angular/core';\n\nimport { CreditCardValidatorDirective } from './creditcard/creditcard.directive';\nimport { EmailValidatorDirective, EmailSuggestValidatorDirective } from './email/email.directive';\nimport { PasswordValidatorDirective } from './password/password.directive';\nimport { EqualToDirective } from './equal-to/equal-to.directive';\n\n@NgModule({\n  declarations: [\n    CreditCardValidatorDirective,\n    EmailValidatorDirective,\n    EmailSuggestValidatorDirective,\n    PasswordValidatorDirective,\n    IsInRangeValidatorDirective,\n    IsNumberValidatorDirective,\n    MaxValidatorDirective,\n    MinValidatorDirective,\n    WhiteSpaceValidatorDirective,\n    EmptyStringValidatorDirective,\n    EqualToDirective\n  ],\n  exports: [\n    CreditCardValidatorDirective,\n    EmailValidatorDirective,\n    EmailSuggestValidatorDirective,\n    PasswordValidatorDirective,\n    IsInRangeValidatorDirective,\n    IsNumberValidatorDirective,\n    MaxValidatorDirective,\n    MinValidatorDirective,\n    WhiteSpaceValidatorDirective,\n    EmptyStringValidatorDirective,\n    EqualToDirective\n  ]\n})\nexport class ValidatorsModule { }\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\nimport { AbstractControlUtil } from '../abstract-control-util';\n\nexport class EqualToValidator {\n  static equalTo(c1Name: string, c2Name: string): ValidatorFn {\n    const validator = (parent: AbstractControl): any => {\n      const c1 =parent.get(c1Name);\n      const c2 = parent.get(c2Name);\n\n      if (c1.value === c2.value) {\n        AbstractControlUtil.removeError(c2, 'notEqualTo');\n      } else {\n        AbstractControlUtil.addError(c2, 'notEqualTo', true);\n      }\n    };\n    return validator;\n  }\n}\n"],"names":[],"mappings":"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"}
