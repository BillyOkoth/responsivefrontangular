/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { AbstractControlUtil } from './../abstract-control-util';
import { EmailSuggestion } from './email-util';
export class EmailValidators {
    /**
     * @param {?} control
     * @return {?}
     */
    static simple(control) {
        if (AbstractControlUtil.isNotPresent(control)) {
            return undefined;
        }
        ;
        /** @type {?} */
        let pattern = /.+@.+\..+/i;
        if (pattern.test(control.value)) {
            return undefined;
        }
        return { 'simpleEmailRule': true };
    }
    ;
    // https://www.w3.org/TR/html5/forms.html#valid-e-mail-address
    /**
     * @param {?} control
     * @return {?}
     */
    static normal(control) {
        if (AbstractControlUtil.isNotPresent(control)) {
            return undefined;
        }
        ;
        // tslint:disable-next-line:max-line-length
        /** @type {?} */
        let pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
        if (pattern.test(control.value)) {
            return undefined;
        }
        return { 'normalEmailRule': true };
    }
    ;
    /**
     * @param {?=} options
     * @return {?}
     */
    static suggest(options) {
        /** @type {?} */
        const validator = (control) => {
            if (AbstractControlUtil.isNotPresent(control)) {
                return undefined;
            }
            ;
            return this.emailSuggestion.suggest(control.value, options);
        };
        return validator;
    }
    ;
}
EmailValidators.emailSuggestion = new EmailSuggestion();
if (false) {
    /** @type {?} */
    EmailValidators.emailSuggestion;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWwtdmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsiY29tcG9uZW50cy9lbWFpbC9lbWFpbC12YWxpZGF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZUFBZSxFQUFnQixNQUFNLGNBQWMsQ0FBQztBQUU3RCxNQUFNLE9BQU8sZUFBZTs7Ozs7SUFHakIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUF3QjtRQUN6QyxJQUFJLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMzQyxPQUFPLFNBQVMsQ0FBQTtTQUNuQjtRQUFBLENBQUM7O1lBRUUsT0FBTyxHQUFHLFlBQVk7UUFDMUIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM3QixPQUFPLFNBQVMsQ0FBQztTQUNwQjtRQUNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBQUEsQ0FBQzs7Ozs7O0lBR0ssTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUF3QjtRQUN6QyxJQUFJLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMzQyxPQUFPLFNBQVMsQ0FBQTtTQUNuQjtRQUFBLENBQUM7OztZQUVFLE9BQU8sR0FBRyxzSUFBc0k7UUFDcEosSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM3QixPQUFPLFNBQVMsQ0FBQztTQUNwQjtRQUNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBQUEsQ0FBQzs7Ozs7SUFFSyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQXNCOztjQUNsQyxTQUFTLEdBQUcsQ0FBQyxPQUF3QixFQUEwQixFQUFFO1lBQ25FLElBQUksbUJBQW1CLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUMzQyxPQUFPLFNBQVMsQ0FBQTthQUNuQjtZQUFBLENBQUM7WUFDRixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDL0QsQ0FBQztRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFBQSxDQUFDOztBQW5DYSwrQkFBZSxHQUFvQixJQUFJLGVBQWUsRUFBRSxDQUFDOzs7SUFBeEUsZ0NBQXdFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0b3JGbiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbFV0aWwgfSBmcm9tICcuLy4uL2Fic3RyYWN0LWNvbnRyb2wtdXRpbCc7XG5pbXBvcnQgeyBFbWFpbFN1Z2dlc3Rpb24sIEVtYWlsT3B0aW9ucyB9IGZyb20gJy4vZW1haWwtdXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBFbWFpbFZhbGlkYXRvcnMge1xuICAgIHByaXZhdGUgc3RhdGljIGVtYWlsU3VnZ2VzdGlvbjogRW1haWxTdWdnZXN0aW9uID0gbmV3IEVtYWlsU3VnZ2VzdGlvbigpO1xuXG4gICAgcHVibGljIHN0YXRpYyBzaW1wbGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0ge1xuICAgICAgICBpZiAoQWJzdHJhY3RDb250cm9sVXRpbC5pc05vdFByZXNlbnQoY29udHJvbCkpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgcGF0dGVybiA9IC8uK0AuK1xcLi4rL2k7XG4gICAgICAgIGlmIChwYXR0ZXJuLnRlc3QoY29udHJvbC52YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgJ3NpbXBsZUVtYWlsUnVsZSc6IHRydWUgfTtcbiAgICB9O1xuXG4gICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L2Zvcm1zLmh0bWwjdmFsaWQtZS1tYWlsLWFkZHJlc3NcbiAgICBwdWJsaWMgc3RhdGljIG5vcm1hbChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSB7XG4gICAgICAgIGlmIChBYnN0cmFjdENvbnRyb2xVdGlsLmlzTm90UHJlc2VudChjb250cm9sKSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG4gICAgICAgIGxldCBwYXR0ZXJuID0gL15bYS16QS1aMC05LiEjJCUmJyorLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKiQvO1xuICAgICAgICBpZiAocGF0dGVybi50ZXN0KGNvbnRyb2wudmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7ICdub3JtYWxFbWFpbFJ1bGUnOiB0cnVlIH07XG4gICAgfTtcblxuICAgIHB1YmxpYyBzdGF0aWMgc3VnZ2VzdChvcHRpb25zPzogRW1haWxPcHRpb25zKTogVmFsaWRhdG9yRm4ge1xuICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9PiB7XG4gICAgICAgICAgICBpZiAoQWJzdHJhY3RDb250cm9sVXRpbC5pc05vdFByZXNlbnQoY29udHJvbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1haWxTdWdnZXN0aW9uLnN1Z2dlc3QoY29udHJvbC52YWx1ZSwgb3B0aW9ucylcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRvcjtcbiAgICB9O1xuXG59XG4iXX0=