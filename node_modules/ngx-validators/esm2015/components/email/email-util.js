/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function EmailOptions() { }
if (false) {
    /** @type {?} */
    EmailOptions.prototype.domains;
    /** @type {?} */
    EmailOptions.prototype.secondLevelDomains;
    /** @type {?} */
    EmailOptions.prototype.topLevelDomains;
}
/**
 * @record
 */
export function SplittedEmail() { }
if (false) {
    /** @type {?} */
    SplittedEmail.prototype.topLevelDomain;
    /** @type {?} */
    SplittedEmail.prototype.secondLevelDomain;
    /** @type {?} */
    SplittedEmail.prototype.domain;
    /** @type {?} */
    SplittedEmail.prototype.address;
}
/**
 * @record
 */
export function Suggestion() { }
if (false) {
    /** @type {?} */
    Suggestion.prototype.address;
    /** @type {?} */
    Suggestion.prototype.domain;
    /** @type {?} */
    Suggestion.prototype.full;
}
/**
 * @record
 */
function Offset() { }
if (false) {
    /** @type {?} */
    Offset.prototype.c1;
    /** @type {?} */
    Offset.prototype.c2;
    /** @type {?} */
    Offset.prototype.trans;
}
export class EmailSuggestion {
    constructor() {
        this.defaultOptions = {
            domains: ['msn.com', 'bellsouth.net',
                'telus.net', 'comcast.net', 'optusnet.com.au',
                'earthlink.net', 'qq.com', 'sky.com', 'icloud.com',
                'mac.com', 'sympatico.ca', 'googlemail.com',
                'att.net', 'xtra.co.nz', 'web.de',
                'cox.net', 'gmail.com', 'ymail.com', 'yahoo.com',
                'aim.com', 'rogers.com', 'verizon.net',
                'rocketmail.com', 'google.com', 'optonline.net',
                'sbcglobal.net', 'aol.com', 'me.com', 'btinternet.com',
                'charter.net', 'shaw.ca'],
            secondLevelDomains: ["yahoo", "hotmail", "mail", "live", "outlook", "gmx"],
            topLevelDomains: ["com", "com.au", "com.tw", "ca", "co.nz", "co.uk", "de",
                "fr", "it", "ru", "net", "org", "edu", "gov", "jp", "nl", "kr", "se", "eu",
                "ie", "co.il", "us", "at", "be", "dk", "hk", "es", "gr", "ch", "no", "cz",
                "in", "net", "net.au", "info", "biz", "mil", "co.jp", "sg", "hu", "uk"]
        };
    }
    /**
     * @param {?} email
     * @param {?=} options
     * @return {?}
     */
    suggest(email, options) {
        /** @type {?} */
        let opt = this.defaultOptions;
        if (options != undefined) {
            opt = options;
        }
        /** @type {?} */
        let emailParts = this.splitEmail(email.toLowerCase());
        if (!emailParts) {
            return undefined;
        }
        if (opt.secondLevelDomains && opt.topLevelDomains) {
            // If the email is a valid 2nd-level + top-level, do not suggest anything.
            if (opt.secondLevelDomains.indexOf(emailParts.secondLevelDomain) !== -1 && opt.topLevelDomains.indexOf(emailParts.topLevelDomain) !== -1) {
                return undefined;
            }
        }
        /** @type {?} */
        let closestDomain = this.findClosestDomain(emailParts.domain, opt.domains, 2);
        if (closestDomain) {
            if (closestDomain == emailParts.domain) {
                // The email address exactly matches one of the supplied domains; do not return a suggestion.
                return undefined;
            }
            else {
                // The email address closely matches one of the supplied domains; return a suggestion
                return { suggestion: { address: emailParts.address, domain: closestDomain, full: emailParts.address + "@" + closestDomain } };
            }
        }
        /** @type {?} */
        let closestSecondLevelDomain = this.findClosestDomain(emailParts.secondLevelDomain, opt.secondLevelDomains, 2);
        /** @type {?} */
        let closestTopLevelDomain = this.findClosestDomain(emailParts.topLevelDomain, opt.topLevelDomains, 2);
        if (emailParts.domain) {
            closestDomain = emailParts.domain;
            /** @type {?} */
            let rtrn = false;
            if (closestSecondLevelDomain && closestSecondLevelDomain != emailParts.secondLevelDomain) {
                // The email address may have a mispelled second-level domain; return a suggestion
                closestDomain = closestDomain.replace(emailParts.secondLevelDomain, closestSecondLevelDomain);
                rtrn = true;
            }
            if (closestTopLevelDomain && closestTopLevelDomain != emailParts.topLevelDomain && emailParts.secondLevelDomain !== '') {
                // The email address may have a mispelled top-level domain; return a suggestion
                closestDomain = closestDomain.replace(new RegExp(emailParts.topLevelDomain + "$"), closestTopLevelDomain);
                rtrn = true;
            }
            if (rtrn) {
                return { suggestion: { address: emailParts.address, domain: closestDomain, full: emailParts.address + "@" + closestDomain } };
            }
        }
        /* The email address exactly matches one of the supplied domains, does not closely
         * match any domain and does not appear to simply have a mispelled top-level domain,
         * or is an invalid email address; do not return a suggestion.
         */
        return undefined;
    }
    ;
    /**
     * @param {?} email
     * @return {?}
     */
    splitEmail(email) {
        /** @type {?} */
        let parts = email.trim().split('@');
        if (parts.length < 2) {
            return undefined;
        }
        for (var i = 0; i < parts.length; i++) {
            if (parts[i] === '') {
                return undefined;
            }
        }
        /** @type {?} */
        let result = {
            topLevelDomain: "",
            secondLevelDomain: "",
            domain: parts.pop(),
            address: ''
        };
        /** @type {?} */
        let domainParts = result.domain.split('.');
        if (domainParts.length === 0) {
            return undefined;
        }
        else if (domainParts.length == 1) {
            result.topLevelDomain = domainParts[0];
        }
        else {
            // The address has a domain and a top-level domain
            result.secondLevelDomain = domainParts[0];
            for (let j = 1; j < domainParts.length; j++) {
                result.topLevelDomain += domainParts[j] + '.';
            }
            result.topLevelDomain = result.topLevelDomain.substring(0, result.topLevelDomain.length - 1);
        }
        result.address = parts.join('@');
        return result;
    }
    /**
     * @param {?} domain
     * @param {?} domains
     * @param {?} threshold
     * @return {?}
     */
    findClosestDomain(domain, domains, threshold) {
        /** @type {?} */
        let dist;
        /** @type {?} */
        let minDist = Infinity;
        /** @type {?} */
        let closestDomain = null;
        if (!domain || !domains) {
            return undefined;
        }
        for (let i = 0; i < domains.length; i++) {
            if (domain === domains[i]) {
                return domain;
            }
            dist = this.sift4Distance(domain, domains[i], 5);
            if (dist < minDist) {
                minDist = dist;
                closestDomain = domains[i];
            }
        }
        if (minDist <= threshold && closestDomain !== null) {
            return closestDomain;
        }
        else {
            return undefined;
        }
    }
    /**
     * @param {?} s1
     * @param {?} s2
     * @param {?} maxOffset
     * @return {?}
     */
    sift4Distance(s1, s2, maxOffset) {
        // sift4: https://siderite.blogspot.com/2014/11/super-fast-and-accurate-string-distance.html
        if (maxOffset === undefined) {
            maxOffset = 5; //default
        }
        if (!s1 || !s1.length) {
            if (!s2) {
                return 0;
            }
            return s2.length;
        }
        if (!s2 || !s2.length) {
            return s1.length;
        }
        /** @type {?} */
        let l1 = s1.length;
        /** @type {?} */
        let l2 = s2.length;
        /** @type {?} */
        let c1 = 0;
        //cursor for string 1
        /** @type {?} */
        let c2 = 0;
        //cursor for string 2
        /** @type {?} */
        let lcss = 0;
        //largest common subsequence
        /** @type {?} */
        let local_cs = 0;
        //local common substring
        /** @type {?} */
        let trans = 0;
        //number of transpositions ('ab' vs 'ba')
        /** @type {?} */
        let offset_arr = [];
        while ((c1 < l1) && (c2 < l2)) {
            if (s1.charAt(c1) == s2.charAt(c2)) {
                local_cs++;
                /** @type {?} */
                let isTrans = false;
                //see if current match is a transposition
                /** @type {?} */
                let i = 0;
                while (i < offset_arr.length) {
                    /** @type {?} */
                    let ofs = offset_arr[i];
                    if (c1 <= ofs.c1 || c2 <= ofs.c2) {
                        // when two matches cross, the one considered a transposition is the one with the largest difference in offsets
                        isTrans = Math.abs(c2 - c1) >= Math.abs(ofs.c2 - ofs.c1);
                        if (isTrans) {
                            trans++;
                        }
                        else {
                            if (!ofs.trans) {
                                ofs.trans = true;
                                trans++;
                            }
                        }
                        break;
                    }
                    else {
                        if (c1 > ofs.c2 && c2 > ofs.c1) {
                            offset_arr.splice(i, 1);
                        }
                        else {
                            i++;
                        }
                    }
                }
                offset_arr.push({
                    c1: c1,
                    c2: c2,
                    trans: isTrans
                });
            }
            else {
                lcss += local_cs;
                local_cs = 0;
                if (c1 != c2) {
                    c1 = c2 = Math.min(c1, c2); //using min allows the computation of transpositions
                }
                //if matching characters are found, remove 1 from both cursors (they get incremented at the end of the loop)
                //so that we can have only one code block handling matches 
                for (let j = 0; j < maxOffset && (c1 + j < l1 || c2 + j < l2); j++) {
                    if ((c1 + j < l1) && (s1.charAt(c1 + j) == s2.charAt(c2))) {
                        c1 += j - 1;
                        c2--;
                        break;
                    }
                    if ((c2 + j < l2) && (s1.charAt(c1) == s2.charAt(c2 + j))) {
                        c1--;
                        c2 += j - 1;
                        break;
                    }
                }
            }
            c1++;
            c2++;
            // this covers the case where the last match is on the last token in list, so that it can compute transpositions correctly
            if ((c1 >= l1) || (c2 >= l2)) {
                lcss += local_cs;
                local_cs = 0;
                c1 = c2 = Math.min(c1, c2);
            }
        }
        lcss += local_cs;
        return Math.round(Math.max(l1, l2) - lcss + trans); //add the cost of transpositions to the final result
    }
}
if (false) {
    /** @type {?} */
    EmailSuggestion.prototype.defaultOptions;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,