/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, Input, forwardRef } from '@angular/core';
import { NG_VALIDATORS, Validators } from '@angular/forms';
import { PasswordValidators } from './password-validators';
export class PasswordValidatorDirective {
    constructor() {
        this.repeatCharacter = 4;
        this.alphabeticalCharacter = 1;
        this.digitCharacter = 1;
        this.lowercaseCharacter = 1;
        this.uppercaseCharacter = 1;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.repeatCharacterValidator = PasswordValidators.repeatCharacterRegexRule(this.repeatCharacter);
        this.alphabeticalCharacterValidator = PasswordValidators.alphabeticalCharacterRule(this.alphabeticalCharacter);
        this.digitCharacterValidator = PasswordValidators.digitCharacterRule(this.digitCharacter);
        this.lowercaseCharacterValidator = PasswordValidators.lowercaseCharacterRule(this.lowercaseCharacter);
        this.uppercaseCharacterValidator = PasswordValidators.uppercaseCharacterRule(this.uppercaseCharacter);
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        /** @type {?} */
        let compose = Validators.compose([this.repeatCharacterValidator,
            this.digitCharacterValidator, this.alphabeticalCharacterValidator,
            this.lowercaseCharacterValidator, this.uppercaseCharacterValidator]);
        return compose(c);
    }
}
PasswordValidatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[password][formControlName],[password][formControl],[password][ngModel]',
                providers: [{
                        provide: NG_VALIDATORS,
                        // tslint:disable-next-line:no-forward-ref
                        useExisting: forwardRef(() => PasswordValidatorDirective),
                        multi: true
                    }]
            },] }
];
PasswordValidatorDirective.propDecorators = {
    repeatCharacter: [{ type: Input }],
    alphabeticalCharacter: [{ type: Input }],
    digitCharacter: [{ type: Input }],
    lowercaseCharacter: [{ type: Input }],
    uppercaseCharacter: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PasswordValidatorDirective.prototype.repeatCharacter;
    /** @type {?} */
    PasswordValidatorDirective.prototype.alphabeticalCharacter;
    /** @type {?} */
    PasswordValidatorDirective.prototype.digitCharacter;
    /** @type {?} */
    PasswordValidatorDirective.prototype.lowercaseCharacter;
    /** @type {?} */
    PasswordValidatorDirective.prototype.uppercaseCharacter;
    /** @type {?} */
    PasswordValidatorDirective.prototype.repeatCharacterValidator;
    /** @type {?} */
    PasswordValidatorDirective.prototype.alphabeticalCharacterValidator;
    /** @type {?} */
    PasswordValidatorDirective.prototype.digitCharacterValidator;
    /** @type {?} */
    PasswordValidatorDirective.prototype.lowercaseCharacterValidator;
    /** @type {?} */
    PasswordValidatorDirective.prototype.uppercaseCharacterValidator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJjb21wb25lbnRzL3Bhc3N3b3JkL3Bhc3N3b3JkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxhQUFhLEVBQWEsVUFBVSxFQUFnQyxNQUFNLGdCQUFnQixDQUFDO0FBRXBHLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBVzNELE1BQU0sT0FBTywwQkFBMEI7SUFUdkM7UUFVYSxvQkFBZSxHQUFXLENBQUMsQ0FBQztRQUM1QiwwQkFBcUIsR0FBVyxDQUFDLENBQUM7UUFDbEMsbUJBQWMsR0FBVyxDQUFDLENBQUM7UUFDM0IsdUJBQWtCLEdBQVcsQ0FBQyxDQUFDO1FBQy9CLHVCQUFrQixHQUFXLENBQUMsQ0FBQztJQXVCNUMsQ0FBQzs7OztJQWZHLFFBQVE7UUFDSixJQUFJLENBQUMsd0JBQXdCLEdBQUcsa0JBQWtCLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ2xHLElBQUksQ0FBQyw4QkFBOEIsR0FBRyxrQkFBa0IsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUMvRyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsa0JBQWtCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzFGLElBQUksQ0FBQywyQkFBMkIsR0FBRyxrQkFBa0IsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUN0RyxJQUFJLENBQUMsMkJBQTJCLEdBQUcsa0JBQWtCLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFFMUcsQ0FBQzs7Ozs7SUFFRCxRQUFRLENBQUMsQ0FBa0I7O1lBQ25CLE9BQU8sR0FBZ0IsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyx3QkFBd0I7WUFDNUUsSUFBSSxDQUFDLHVCQUF1QixFQUFFLElBQUksQ0FBQyw4QkFBOEI7WUFDakUsSUFBSSxDQUFDLDJCQUEyQixFQUFFLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ3BFLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7OztZQXBDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHlFQUF5RTtnQkFDbkYsU0FBUyxFQUFFLENBQUM7d0JBQ1IsT0FBTyxFQUFFLGFBQWE7O3dCQUV0QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLDBCQUEwQixDQUFDO3dCQUN6RCxLQUFLLEVBQUUsSUFBSTtxQkFDZCxDQUFDO2FBQ0w7Ozs4QkFFSSxLQUFLO29DQUNMLEtBQUs7NkJBQ0wsS0FBSztpQ0FDTCxLQUFLO2lDQUNMLEtBQUs7Ozs7SUFKTixxREFBcUM7O0lBQ3JDLDJEQUEyQzs7SUFDM0Msb0RBQW9DOztJQUNwQyx3REFBd0M7O0lBQ3hDLHdEQUF3Qzs7SUFFeEMsOERBQThDOztJQUM5QyxvRUFBb0Q7O0lBQ3BELDZEQUE2Qzs7SUFDN0MsaUVBQWlEOztJQUNqRCxpRUFBaUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBmb3J3YXJkUmVmLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTElEQVRPUlMsIFZhbGlkYXRvciwgVmFsaWRhdG9ycywgVmFsaWRhdG9yRm4sIEFic3RyYWN0Q29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgUGFzc3dvcmRWYWxpZGF0b3JzIH0gZnJvbSAnLi9wYXNzd29yZC12YWxpZGF0b3JzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbcGFzc3dvcmRdW2Zvcm1Db250cm9sTmFtZV0sW3Bhc3N3b3JkXVtmb3JtQ29udHJvbF0sW3Bhc3N3b3JkXVtuZ01vZGVsXScsXG4gICAgcHJvdmlkZXJzOiBbe1xuICAgICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZm9yd2FyZC1yZWZcbiAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gUGFzc3dvcmRWYWxpZGF0b3JEaXJlY3RpdmUpLFxuICAgICAgICBtdWx0aTogdHJ1ZVxuICAgIH1dXG59KVxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yLCBPbkluaXQge1xuICAgIEBJbnB1dCgpIHJlcGVhdENoYXJhY3RlcjogbnVtYmVyID0gNDtcbiAgICBASW5wdXQoKSBhbHBoYWJldGljYWxDaGFyYWN0ZXI6IG51bWJlciA9IDE7XG4gICAgQElucHV0KCkgZGlnaXRDaGFyYWN0ZXI6IG51bWJlciA9IDE7XG4gICAgQElucHV0KCkgbG93ZXJjYXNlQ2hhcmFjdGVyOiBudW1iZXIgPSAxO1xuICAgIEBJbnB1dCgpIHVwcGVyY2FzZUNoYXJhY3RlcjogbnVtYmVyID0gMTtcblxuICAgIHByaXZhdGUgcmVwZWF0Q2hhcmFjdGVyVmFsaWRhdG9yOiBWYWxpZGF0b3JGbjtcbiAgICBwcml2YXRlIGFscGhhYmV0aWNhbENoYXJhY3RlclZhbGlkYXRvcjogVmFsaWRhdG9yRm47XG4gICAgcHJpdmF0ZSBkaWdpdENoYXJhY3RlclZhbGlkYXRvcjogVmFsaWRhdG9yRm47XG4gICAgcHJpdmF0ZSBsb3dlcmNhc2VDaGFyYWN0ZXJWYWxpZGF0b3I6IFZhbGlkYXRvckZuO1xuICAgIHByaXZhdGUgdXBwZXJjYXNlQ2hhcmFjdGVyVmFsaWRhdG9yOiBWYWxpZGF0b3JGbjtcblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnJlcGVhdENoYXJhY3RlclZhbGlkYXRvciA9IFBhc3N3b3JkVmFsaWRhdG9ycy5yZXBlYXRDaGFyYWN0ZXJSZWdleFJ1bGUodGhpcy5yZXBlYXRDaGFyYWN0ZXIpO1xuICAgICAgICB0aGlzLmFscGhhYmV0aWNhbENoYXJhY3RlclZhbGlkYXRvciA9IFBhc3N3b3JkVmFsaWRhdG9ycy5hbHBoYWJldGljYWxDaGFyYWN0ZXJSdWxlKHRoaXMuYWxwaGFiZXRpY2FsQ2hhcmFjdGVyKTtcbiAgICAgICAgdGhpcy5kaWdpdENoYXJhY3RlclZhbGlkYXRvciA9IFBhc3N3b3JkVmFsaWRhdG9ycy5kaWdpdENoYXJhY3RlclJ1bGUodGhpcy5kaWdpdENoYXJhY3Rlcik7XG4gICAgICAgIHRoaXMubG93ZXJjYXNlQ2hhcmFjdGVyVmFsaWRhdG9yID0gUGFzc3dvcmRWYWxpZGF0b3JzLmxvd2VyY2FzZUNoYXJhY3RlclJ1bGUodGhpcy5sb3dlcmNhc2VDaGFyYWN0ZXIpO1xuICAgICAgICB0aGlzLnVwcGVyY2FzZUNoYXJhY3RlclZhbGlkYXRvciA9IFBhc3N3b3JkVmFsaWRhdG9ycy51cHBlcmNhc2VDaGFyYWN0ZXJSdWxlKHRoaXMudXBwZXJjYXNlQ2hhcmFjdGVyKTtcblxuICAgIH1cblxuICAgIHZhbGlkYXRlKGM6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xuICAgICAgICBsZXQgY29tcG9zZTogVmFsaWRhdG9yRm4gPSBWYWxpZGF0b3JzLmNvbXBvc2UoW3RoaXMucmVwZWF0Q2hhcmFjdGVyVmFsaWRhdG9yLFxuICAgICAgICB0aGlzLmRpZ2l0Q2hhcmFjdGVyVmFsaWRhdG9yLCB0aGlzLmFscGhhYmV0aWNhbENoYXJhY3RlclZhbGlkYXRvcixcbiAgICAgICAgdGhpcy5sb3dlcmNhc2VDaGFyYWN0ZXJWYWxpZGF0b3IsIHRoaXMudXBwZXJjYXNlQ2hhcmFjdGVyVmFsaWRhdG9yXSk7XG4gICAgICAgIHJldHVybiBjb21wb3NlKGMpO1xuICAgIH1cbn0iXX0=