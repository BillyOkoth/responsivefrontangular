/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { AbstractControlUtil } from './../abstract-control-util';
// tslint:disable-next-line:variable-name
export class PasswordValidators {
    /**
     * @param {?} repeatCount
     * @return {?}
     */
    static repeatCharacterRegexRule(repeatCount) {
        /** @type {?} */
        const validator = (control) => {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            let repeatDec = repeatCount - 1;
            /** @type {?} */
            let pattern = '([^\\x00-\\x1F])\\1{' + repeatDec + '}';
            if (control.value !== '' && new RegExp(pattern).test(control.value)) {
                return { 'repeatCharacterRegexRule': { 'repeatCount': repeatCount } };
            }
            return undefined;
        };
        return validator;
    }
    ;
    /**
     * @param {?} allowedChars
     * @return {?}
     */
    static allowedCharacterRule(allowedChars) {
        /** @type {?} */
        const validator = (control) => {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            let value = control.value;
            /** @type {?} */
            let valid = true;
            /** @type {?} */
            let invalidChars = [];
            for (let char of value) {
                if (allowedChars.indexOf(char) === -1) {
                    valid = false;
                    if (invalidChars.indexOf(char) === -1) {
                        invalidChars.push(char);
                    }
                }
            }
            if (!valid) {
                return { 'allowedCharacterRule': { 'invalidChars': invalidChars, 'allowedChars': allowedChars } };
            }
            return undefined;
        };
        return validator;
    }
    ;
    /**
     * @param {?} amount
     * @return {?}
     */
    static alphabeticalCharacterRule(amount) {
        /** @type {?} */
        const validator = (control) => {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            let value = control.value;
            if (value.length === 0) {
                return undefined;
            }
            /** @type {?} */
            let pattern = /[^A-Za-z]+/g;
            /** @type {?} */
            let stripped = value.replace(pattern, '');
            if (stripped.length < amount) {
                return { 'alphabeticalCharacterRule': { 'required': amount, 'actual': stripped.length } };
            }
            return undefined;
        };
        return validator;
    }
    ;
    /**
     * @param {?} amount
     * @return {?}
     */
    static digitCharacterRule(amount) {
        /** @type {?} */
        const validator = (control) => {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            let value = control.value;
            if (value.length === 0) {
                return undefined;
            }
            /** @type {?} */
            let pattern = /[^0-9\.]+/g;
            /** @type {?} */
            let stripped = value.replace(pattern, '');
            if (stripped.length < amount) {
                return { 'digitCharacterRule': { 'required': amount, 'actual': stripped.length } };
            }
            return undefined;
        };
        return validator;
    }
    ;
    /**
     * @param {?} amount
     * @return {?}
     */
    static lowercaseCharacterRule(amount) {
        /** @type {?} */
        const validator = (control) => {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            let value = control.value;
            if (value.length === 0) {
                return undefined;
            }
            /** @type {?} */
            let pattern = /[^a-z]+/g;
            /** @type {?} */
            let stripped = value.replace(pattern, '');
            if (stripped.length < amount) {
                return { 'lowercaseCharacterRule': { 'required': amount, 'actual': stripped.length } };
            }
            return undefined;
        };
        return validator;
    }
    ;
    /**
     * @param {?} amount
     * @return {?}
     */
    static uppercaseCharacterRule(amount) {
        /** @type {?} */
        const validator = (control) => {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            let value = control.value;
            if (value.length === 0) {
                return undefined;
            }
            /** @type {?} */
            let pattern = /[^A-Z]+/g;
            /** @type {?} */
            let stripped = value.replace(pattern, '');
            if (stripped.length < amount) {
                return { 'uppercaseCharacterRule': { 'required': amount, 'actual': stripped.length } };
            }
            return undefined;
        };
        return validator;
    }
    ;
    /**
     * @param {?} amount
     * @return {?}
     */
    static specialCharacterRule(amount) {
        /** @type {?} */
        const validator = (control) => {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            let value = control.value;
            if (value.length === 0) {
                return undefined;
            }
            /** @type {?} */
            let pattern = /[\w\s]+/g;
            /** @type {?} */
            let stripped = value.replace(pattern, '');
            if (stripped.length < amount) {
                return { 'specialCharacterRule': { 'required': amount, 'actual': stripped.length } };
            }
            return undefined;
        };
        return validator;
    }
    ;
    /**
     * @param {?=} passwordControlName
     * @param {?=} confirmPasswordControlName
     * @return {?}
     */
    static mismatchedPasswords(passwordControlName, confirmPasswordControlName) {
        /** @type {?} */
        const validator = (group) => {
            /** @type {?} */
            let newPasswordValue = group.get(passwordControlName ? passwordControlName : 'newPassword').value;
            /** @type {?} */
            let newPasswordConfirmValue = group.get(confirmPasswordControlName ? confirmPasswordControlName : 'confirmPassword').value;
            if (newPasswordValue !== newPasswordConfirmValue) {
                AbstractControlUtil.addError(group.get(confirmPasswordControlName ? confirmPasswordControlName : 'confirmPassword'), 'mismatchedPasswords', true);
                return { 'mismatchedPasswords': true };
            }
            else {
                AbstractControlUtil.removeError(group.get(confirmPasswordControlName ? confirmPasswordControlName : 'confirmPassword'), 'mismatchedPasswords');
            }
            return undefined;
        };
        return validator;
    }
    ;
}
//# sourceMappingURL=data:application/json;base64,