/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { EmptyStringValidatorDirective, IsInRangeValidatorDirective, IsNumberValidatorDirective, MaxValidatorDirective, MinValidatorDirective, WhiteSpaceValidatorDirective } from './universal/universal.directive';
import { NgModule } from '@angular/core';
import { CreditCardValidatorDirective } from './creditcard/creditcard.directive';
import { EmailValidatorDirective, EmailSuggestValidatorDirective } from './email/email.directive';
import { PasswordValidatorDirective } from './password/password.directive';
import { EqualToDirective } from './equal-to/equal-to.directive';
export class ValidatorsModule {
}
ValidatorsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    CreditCardValidatorDirective,
                    EmailValidatorDirective,
                    EmailSuggestValidatorDirective,
                    PasswordValidatorDirective,
                    IsInRangeValidatorDirective,
                    IsNumberValidatorDirective,
                    MaxValidatorDirective,
                    MinValidatorDirective,
                    WhiteSpaceValidatorDirective,
                    EmptyStringValidatorDirective,
                    EqualToDirective
                ],
                exports: [
                    CreditCardValidatorDirective,
                    EmailValidatorDirective,
                    EmailSuggestValidatorDirective,
                    PasswordValidatorDirective,
                    IsInRangeValidatorDirective,
                    IsNumberValidatorDirective,
                    MaxValidatorDirective,
                    MinValidatorDirective,
                    WhiteSpaceValidatorDirective,
                    EmptyStringValidatorDirective,
                    EqualToDirective
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9ycy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvdmFsaWRhdG9ycy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCw2QkFBNkIsRUFDN0IsMkJBQTJCLEVBQzNCLDBCQUEwQixFQUMxQixxQkFBcUIsRUFDckIscUJBQXFCLEVBQ3JCLDRCQUE0QixFQUM3QixNQUFNLGlDQUFpQyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDakYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLDhCQUE4QixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDbEcsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDM0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUE4QmpFLE1BQU0sT0FBTyxnQkFBZ0I7OztZQTVCNUIsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRTtvQkFDWiw0QkFBNEI7b0JBQzVCLHVCQUF1QjtvQkFDdkIsOEJBQThCO29CQUM5QiwwQkFBMEI7b0JBQzFCLDJCQUEyQjtvQkFDM0IsMEJBQTBCO29CQUMxQixxQkFBcUI7b0JBQ3JCLHFCQUFxQjtvQkFDckIsNEJBQTRCO29CQUM1Qiw2QkFBNkI7b0JBQzdCLGdCQUFnQjtpQkFDakI7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLDRCQUE0QjtvQkFDNUIsdUJBQXVCO29CQUN2Qiw4QkFBOEI7b0JBQzlCLDBCQUEwQjtvQkFDMUIsMkJBQTJCO29CQUMzQiwwQkFBMEI7b0JBQzFCLHFCQUFxQjtvQkFDckIscUJBQXFCO29CQUNyQiw0QkFBNEI7b0JBQzVCLDZCQUE2QjtvQkFDN0IsZ0JBQWdCO2lCQUNqQjthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRW1wdHlTdHJpbmdWYWxpZGF0b3JEaXJlY3RpdmUsXG4gIElzSW5SYW5nZVZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgSXNOdW1iZXJWYWxpZGF0b3JEaXJlY3RpdmUsXG4gIE1heFZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgTWluVmFsaWRhdG9yRGlyZWN0aXZlLFxuICBXaGl0ZVNwYWNlVmFsaWRhdG9yRGlyZWN0aXZlXG59IGZyb20gJy4vdW5pdmVyc2FsL3VuaXZlcnNhbC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ3JlZGl0Q2FyZFZhbGlkYXRvckRpcmVjdGl2ZSB9IGZyb20gJy4vY3JlZGl0Y2FyZC9jcmVkaXRjYXJkLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBFbWFpbFZhbGlkYXRvckRpcmVjdGl2ZSwgRW1haWxTdWdnZXN0VmFsaWRhdG9yRGlyZWN0aXZlIH0gZnJvbSAnLi9lbWFpbC9lbWFpbC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUGFzc3dvcmRWYWxpZGF0b3JEaXJlY3RpdmUgfSBmcm9tICcuL3Bhc3N3b3JkL3Bhc3N3b3JkLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBFcXVhbFRvRGlyZWN0aXZlIH0gZnJvbSAnLi9lcXVhbC10by9lcXVhbC10by5kaXJlY3RpdmUnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBDcmVkaXRDYXJkVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIEVtYWlsVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIEVtYWlsU3VnZ2VzdFZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBQYXNzd29yZFZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBJc0luUmFuZ2VWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgSXNOdW1iZXJWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgTWF4VmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIE1pblZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBXaGl0ZVNwYWNlVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIEVtcHR5U3RyaW5nVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIEVxdWFsVG9EaXJlY3RpdmVcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIENyZWRpdENhcmRWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgRW1haWxWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgRW1haWxTdWdnZXN0VmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIFBhc3N3b3JkVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIElzSW5SYW5nZVZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBJc051bWJlclZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBNYXhWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgTWluVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIFdoaXRlU3BhY2VWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgRW1wdHlTdHJpbmdWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgRXF1YWxUb0RpcmVjdGl2ZVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFZhbGlkYXRvcnNNb2R1bGUgeyB9XG4iXX0=