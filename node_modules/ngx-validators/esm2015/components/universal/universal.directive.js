/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { UniversalValidators } from './universal-validators';
export class WhiteSpaceValidatorDirective {
    /**
     * @return {?}
     */
    ngOnInit() {
        this.validator = UniversalValidators.noWhitespace;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return this.validator(c);
    }
}
WhiteSpaceValidatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[noWhitespace][formControlName],[noWhitespace][formControl],[noWhitespace][ngModel]',
                providers: [{
                        provide: NG_VALIDATORS,
                        // tslint:disable-next-line:no-forward-ref
                        useExisting: forwardRef(() => WhiteSpaceValidatorDirective),
                        multi: true
                    }]
            },] }
];
if (false) {
    /** @type {?} */
    WhiteSpaceValidatorDirective.prototype.validator;
}
export class EmptyStringValidatorDirective {
    /**
     * @return {?}
     */
    ngOnInit() {
        this.validator = UniversalValidators.noEmptyString;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return this.validator(c);
    }
}
EmptyStringValidatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[noEmptyString][formControlName],[noEmptyString][formControl],[noEmptyString][ngModel]',
                providers: [{
                        provide: NG_VALIDATORS,
                        // tslint:disable-next-line:no-forward-ref
                        useExisting: forwardRef(() => EmptyStringValidatorDirective),
                        multi: true
                    }]
            },] }
];
if (false) {
    /** @type {?} */
    EmptyStringValidatorDirective.prototype.validator;
}
export class IsNumberValidatorDirective {
    /**
     * @return {?}
     */
    ngOnInit() {
        this.validator = UniversalValidators.isNumber;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return this.validator(c);
    }
}
IsNumberValidatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[isNumber][formControlName],[isNumber][formControl],[isNumber][ngModel]',
                providers: [{
                        provide: NG_VALIDATORS,
                        // tslint:disable-next-line:no-forward-ref
                        useExisting: forwardRef(() => IsNumberValidatorDirective),
                        multi: true
                    }]
            },] }
];
if (false) {
    /** @type {?} */
    IsNumberValidatorDirective.prototype.validator;
}
export class IsInRangeValidatorDirective {
    /**
     * @return {?}
     */
    ngOnInit() {
        this.validator = UniversalValidators.isInRange(this.minValue, this.maxValue);
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return this.validator(c);
    }
}
IsInRangeValidatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[isInRange][formControlName],[isInRange][formControl],[isInRange][ngModel]',
                providers: [{
                        provide: NG_VALIDATORS,
                        // tslint:disable-next-line:no-forward-ref
                        useExisting: forwardRef(() => IsInRangeValidatorDirective),
                        multi: true
                    }]
            },] }
];
IsInRangeValidatorDirective.propDecorators = {
    minValue: [{ type: Input }],
    maxValue: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    IsInRangeValidatorDirective.prototype.minValue;
    /** @type {?} */
    IsInRangeValidatorDirective.prototype.maxValue;
    /** @type {?} */
    IsInRangeValidatorDirective.prototype.validator;
}
export class MaxValidatorDirective {
    /**
     * @return {?}
     */
    ngOnInit() {
        this.validator = UniversalValidators.max(this.max);
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return this.validator(c);
    }
}
MaxValidatorDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[type=text][max][formControlName],input[type=text][max][formControl],input[type=text][max][ngModel]',
                providers: [{
                        provide: NG_VALIDATORS,
                        // tslint:disable-next-line:no-forward-ref
                        useExisting: forwardRef(() => MaxValidatorDirective),
                        multi: true
                    }]
            },] }
];
MaxValidatorDirective.propDecorators = {
    max: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MaxValidatorDirective.prototype.max;
    /** @type {?} */
    MaxValidatorDirective.prototype.validator;
}
export class MinValidatorDirective {
    /**
     * @return {?}
     */
    ngOnInit() {
        this.validator = UniversalValidators.min(this.min);
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return this.validator(c);
    }
}
MinValidatorDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[type=text][min][formControlName],input[type=text][min][formControl],input[type=text][min][ngModel]',
                providers: [{
                        provide: NG_VALIDATORS,
                        // tslint:disable-next-line:no-forward-ref
                        useExisting: forwardRef(() => MinValidatorDirective),
                        multi: true
                    }]
            },] }
];
MinValidatorDirective.propDecorators = {
    min: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MinValidatorDirective.prototype.min;
    /** @type {?} */
    MinValidatorDirective.prototype.validator;
}
//# sourceMappingURL=data:application/json;base64,