/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, Input, forwardRef } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { CreditCardValidators } from './creditcard-validators';
export class CreditCardValidatorDirective {
    constructor() {
        this.creditCard = 'all';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        switch (this.creditCard) {
            case 'all':
                this.validator = CreditCardValidators.isCreditCard;
                break;
            case 'americanExpress':
                this.validator = CreditCardValidators.americanExpress;
                break;
            case 'dinersclub':
                this.validator = CreditCardValidators.dinersclub;
                break;
            case 'discover':
                this.validator = CreditCardValidators.discover;
                break;
            case 'jcb':
                this.validator = CreditCardValidators.jcb;
                break;
            case 'maestro':
                this.validator = CreditCardValidators.maestro;
                break;
            case 'mastercard':
                this.validator = CreditCardValidators.mastercard;
                break;
            case 'visa':
                this.validator = CreditCardValidators.visa;
                break;
            default:
                this.validator = CreditCardValidators.isCreditCard;
                break;
        }
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return this.validator(c);
    }
}
CreditCardValidatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[creditCard][formControlName],[creditCard][formControl],[creditCard][ngModel]',
                providers: [{
                        provide: NG_VALIDATORS,
                        // tslint:disable-next-line:no-forward-ref
                        useExisting: forwardRef(() => CreditCardValidatorDirective),
                        multi: true
                    }]
            },] }
];
CreditCardValidatorDirective.propDecorators = {
    creditCard: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CreditCardValidatorDirective.prototype.creditCard;
    /** @type {?} */
    CreditCardValidatorDirective.prototype.validator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGl0Y2FyZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvY3JlZGl0Y2FyZC9jcmVkaXRjYXJkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxhQUFhLEVBQTJDLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFZL0QsTUFBTSxPQUFPLDRCQUE0QjtJQVZ6QztRQVdhLGVBQVUsR0FBVyxLQUFLLENBQUM7SUF3Q3hDLENBQUM7Ozs7SUFwQ0csUUFBUTtRQUNKLFFBQVEsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNyQixLQUFLLEtBQUs7Z0JBQ04sSUFBSSxDQUFDLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxZQUFZLENBQUM7Z0JBQ25ELE1BQU07WUFDVixLQUFLLGlCQUFpQjtnQkFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxlQUFlLENBQUM7Z0JBQ3RELE1BQU07WUFDVixLQUFLLFlBQVk7Z0JBQ2IsSUFBSSxDQUFDLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxVQUFVLENBQUM7Z0JBQ2pELE1BQU07WUFDVixLQUFLLFVBQVU7Z0JBQ1gsSUFBSSxDQUFDLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxRQUFRLENBQUM7Z0JBQy9DLE1BQU07WUFDVixLQUFLLEtBQUs7Z0JBQ04sSUFBSSxDQUFDLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxHQUFHLENBQUM7Z0JBQzFDLE1BQU07WUFDVixLQUFLLFNBQVM7Z0JBQ1YsSUFBSSxDQUFDLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxPQUFPLENBQUM7Z0JBQzlDLE1BQU07WUFDVixLQUFLLFlBQVk7Z0JBQ2IsSUFBSSxDQUFDLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxVQUFVLENBQUM7Z0JBQ2pELE1BQU07WUFDVixLQUFLLE1BQU07Z0JBQ1AsSUFBSSxDQUFDLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUM7Z0JBQzNDLE1BQU07WUFDVjtnQkFDSSxJQUFJLENBQUMsU0FBUyxHQUFHLG9CQUFvQixDQUFDLFlBQVksQ0FBQztnQkFDbkQsTUFBTTtTQUNiO0lBRUwsQ0FBQzs7Ozs7SUFFRCxRQUFRLENBQUMsQ0FBa0I7UUFDdkIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdCLENBQUM7OztZQWxESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLCtFQUErRTtnQkFDekYsU0FBUyxFQUFFLENBQUM7d0JBQ1IsT0FBTyxFQUFFLGFBQWE7O3dCQUV0QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLDRCQUE0QixDQUFDO3dCQUMzRCxLQUFLLEVBQUUsSUFBSTtxQkFDZCxDQUFDO2FBQ0w7Ozt5QkFHSSxLQUFLOzs7O0lBQU4sa0RBQW9DOztJQUVwQyxpREFBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBmb3J3YXJkUmVmLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTElEQVRPUlMsIFZhbGlkYXRvciwgVmFsaWRhdG9yRm4sIEFic3RyYWN0Q29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgQ3JlZGl0Q2FyZFZhbGlkYXRvcnMgfSBmcm9tICcuL2NyZWRpdGNhcmQtdmFsaWRhdG9ycyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2NyZWRpdENhcmRdW2Zvcm1Db250cm9sTmFtZV0sW2NyZWRpdENhcmRdW2Zvcm1Db250cm9sXSxbY3JlZGl0Q2FyZF1bbmdNb2RlbF0nLFxuICAgIHByb3ZpZGVyczogW3tcbiAgICAgICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZvcndhcmQtcmVmXG4gICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IENyZWRpdENhcmRWYWxpZGF0b3JEaXJlY3RpdmUpLFxuICAgICAgICBtdWx0aTogdHJ1ZVxuICAgIH1dXG59KVxuXG5leHBvcnQgY2xhc3MgQ3JlZGl0Q2FyZFZhbGlkYXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvciwgT25Jbml0IHtcbiAgICBASW5wdXQoKSBjcmVkaXRDYXJkOiBzdHJpbmcgPSAnYWxsJztcblxuICAgIHByaXZhdGUgdmFsaWRhdG9yOiBWYWxpZGF0b3JGbjtcblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuY3JlZGl0Q2FyZCkge1xuICAgICAgICAgICAgY2FzZSAnYWxsJzpcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRvciA9IENyZWRpdENhcmRWYWxpZGF0b3JzLmlzQ3JlZGl0Q2FyZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2FtZXJpY2FuRXhwcmVzcyc6XG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0b3IgPSBDcmVkaXRDYXJkVmFsaWRhdG9ycy5hbWVyaWNhbkV4cHJlc3M7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkaW5lcnNjbHViJzpcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRvciA9IENyZWRpdENhcmRWYWxpZGF0b3JzLmRpbmVyc2NsdWI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkaXNjb3Zlcic6XG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0b3IgPSBDcmVkaXRDYXJkVmFsaWRhdG9ycy5kaXNjb3ZlcjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2pjYic6XG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0b3IgPSBDcmVkaXRDYXJkVmFsaWRhdG9ycy5qY2I7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtYWVzdHJvJzpcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRvciA9IENyZWRpdENhcmRWYWxpZGF0b3JzLm1hZXN0cm87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtYXN0ZXJjYXJkJzpcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRvciA9IENyZWRpdENhcmRWYWxpZGF0b3JzLm1hc3RlcmNhcmQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd2aXNhJzpcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRvciA9IENyZWRpdENhcmRWYWxpZGF0b3JzLnZpc2E7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdG9yID0gQ3JlZGl0Q2FyZFZhbGlkYXRvcnMuaXNDcmVkaXRDYXJkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICB2YWxpZGF0ZShjOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdG9yKGMpO1xuICAgIH1cbn1cbiJdfQ==