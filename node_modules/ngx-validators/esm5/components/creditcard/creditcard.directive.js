/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, Input, forwardRef } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { CreditCardValidators } from './creditcard-validators';
var CreditCardValidatorDirective = /** @class */ (function () {
    function CreditCardValidatorDirective() {
        this.creditCard = 'all';
    }
    /**
     * @return {?}
     */
    CreditCardValidatorDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        switch (this.creditCard) {
            case 'all':
                this.validator = CreditCardValidators.isCreditCard;
                break;
            case 'americanExpress':
                this.validator = CreditCardValidators.americanExpress;
                break;
            case 'dinersclub':
                this.validator = CreditCardValidators.dinersclub;
                break;
            case 'discover':
                this.validator = CreditCardValidators.discover;
                break;
            case 'jcb':
                this.validator = CreditCardValidators.jcb;
                break;
            case 'maestro':
                this.validator = CreditCardValidators.maestro;
                break;
            case 'mastercard':
                this.validator = CreditCardValidators.mastercard;
                break;
            case 'visa':
                this.validator = CreditCardValidators.visa;
                break;
            default:
                this.validator = CreditCardValidators.isCreditCard;
                break;
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    CreditCardValidatorDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.validator(c);
    };
    CreditCardValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[creditCard][formControlName],[creditCard][formControl],[creditCard][ngModel]',
                    providers: [{
                            provide: NG_VALIDATORS,
                            // tslint:disable-next-line:no-forward-ref
                            useExisting: forwardRef(function () { return CreditCardValidatorDirective; }),
                            multi: true
                        }]
                },] }
    ];
    CreditCardValidatorDirective.propDecorators = {
        creditCard: [{ type: Input }]
    };
    return CreditCardValidatorDirective;
}());
export { CreditCardValidatorDirective };
if (false) {
    /** @type {?} */
    CreditCardValidatorDirective.prototype.creditCard;
    /** @type {?} */
    CreditCardValidatorDirective.prototype.validator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGl0Y2FyZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvY3JlZGl0Y2FyZC9jcmVkaXRjYXJkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxhQUFhLEVBQTJDLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFL0Q7SUFBQTtRQVdhLGVBQVUsR0FBVyxLQUFLLENBQUM7SUF3Q3hDLENBQUM7Ozs7SUFwQ0csK0NBQVE7OztJQUFSO1FBQ0ksUUFBUSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3JCLEtBQUssS0FBSztnQkFDTixJQUFJLENBQUMsU0FBUyxHQUFHLG9CQUFvQixDQUFDLFlBQVksQ0FBQztnQkFDbkQsTUFBTTtZQUNWLEtBQUssaUJBQWlCO2dCQUNsQixJQUFJLENBQUMsU0FBUyxHQUFHLG9CQUFvQixDQUFDLGVBQWUsQ0FBQztnQkFDdEQsTUFBTTtZQUNWLEtBQUssWUFBWTtnQkFDYixJQUFJLENBQUMsU0FBUyxHQUFHLG9CQUFvQixDQUFDLFVBQVUsQ0FBQztnQkFDakQsTUFBTTtZQUNWLEtBQUssVUFBVTtnQkFDWCxJQUFJLENBQUMsU0FBUyxHQUFHLG9CQUFvQixDQUFDLFFBQVEsQ0FBQztnQkFDL0MsTUFBTTtZQUNWLEtBQUssS0FBSztnQkFDTixJQUFJLENBQUMsU0FBUyxHQUFHLG9CQUFvQixDQUFDLEdBQUcsQ0FBQztnQkFDMUMsTUFBTTtZQUNWLEtBQUssU0FBUztnQkFDVixJQUFJLENBQUMsU0FBUyxHQUFHLG9CQUFvQixDQUFDLE9BQU8sQ0FBQztnQkFDOUMsTUFBTTtZQUNWLEtBQUssWUFBWTtnQkFDYixJQUFJLENBQUMsU0FBUyxHQUFHLG9CQUFvQixDQUFDLFVBQVUsQ0FBQztnQkFDakQsTUFBTTtZQUNWLEtBQUssTUFBTTtnQkFDUCxJQUFJLENBQUMsU0FBUyxHQUFHLG9CQUFvQixDQUFDLElBQUksQ0FBQztnQkFDM0MsTUFBTTtZQUNWO2dCQUNJLElBQUksQ0FBQyxTQUFTLEdBQUcsb0JBQW9CLENBQUMsWUFBWSxDQUFDO2dCQUNuRCxNQUFNO1NBQ2I7SUFFTCxDQUFDOzs7OztJQUVELCtDQUFROzs7O0lBQVIsVUFBUyxDQUFrQjtRQUN2QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Z0JBbERKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsK0VBQStFO29CQUN6RixTQUFTLEVBQUUsQ0FBQzs0QkFDUixPQUFPLEVBQUUsYUFBYTs7NEJBRXRCLFdBQVcsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLDRCQUE0QixFQUE1QixDQUE0QixDQUFDOzRCQUMzRCxLQUFLLEVBQUUsSUFBSTt5QkFDZCxDQUFDO2lCQUNMOzs7NkJBR0ksS0FBSzs7SUF3Q1YsbUNBQUM7Q0FBQSxBQW5ERCxJQW1EQztTQXpDWSw0QkFBNEI7OztJQUNyQyxrREFBb0M7O0lBRXBDLGlEQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIGZvcndhcmRSZWYsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMSURBVE9SUywgVmFsaWRhdG9yLCBWYWxpZGF0b3JGbiwgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBDcmVkaXRDYXJkVmFsaWRhdG9ycyB9IGZyb20gJy4vY3JlZGl0Y2FyZC12YWxpZGF0b3JzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbY3JlZGl0Q2FyZF1bZm9ybUNvbnRyb2xOYW1lXSxbY3JlZGl0Q2FyZF1bZm9ybUNvbnRyb2xdLFtjcmVkaXRDYXJkXVtuZ01vZGVsXScsXG4gICAgcHJvdmlkZXJzOiBbe1xuICAgICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZm9yd2FyZC1yZWZcbiAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gQ3JlZGl0Q2FyZFZhbGlkYXRvckRpcmVjdGl2ZSksXG4gICAgICAgIG11bHRpOiB0cnVlXG4gICAgfV1cbn0pXG5cbmV4cG9ydCBjbGFzcyBDcmVkaXRDYXJkVmFsaWRhdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yLCBPbkluaXQge1xuICAgIEBJbnB1dCgpIGNyZWRpdENhcmQ6IHN0cmluZyA9ICdhbGwnO1xuXG4gICAgcHJpdmF0ZSB2YWxpZGF0b3I6IFZhbGlkYXRvckZuO1xuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5jcmVkaXRDYXJkKSB7XG4gICAgICAgICAgICBjYXNlICdhbGwnOlxuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdG9yID0gQ3JlZGl0Q2FyZFZhbGlkYXRvcnMuaXNDcmVkaXRDYXJkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYW1lcmljYW5FeHByZXNzJzpcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRvciA9IENyZWRpdENhcmRWYWxpZGF0b3JzLmFtZXJpY2FuRXhwcmVzcztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RpbmVyc2NsdWInOlxuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdG9yID0gQ3JlZGl0Q2FyZFZhbGlkYXRvcnMuZGluZXJzY2x1YjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Rpc2NvdmVyJzpcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRvciA9IENyZWRpdENhcmRWYWxpZGF0b3JzLmRpc2NvdmVyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnamNiJzpcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRvciA9IENyZWRpdENhcmRWYWxpZGF0b3JzLmpjYjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21hZXN0cm8nOlxuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdG9yID0gQ3JlZGl0Q2FyZFZhbGlkYXRvcnMubWFlc3RybztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21hc3RlcmNhcmQnOlxuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdG9yID0gQ3JlZGl0Q2FyZFZhbGlkYXRvcnMubWFzdGVyY2FyZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3Zpc2EnOlxuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdG9yID0gQ3JlZGl0Q2FyZFZhbGlkYXRvcnMudmlzYTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0b3IgPSBDcmVkaXRDYXJkVmFsaWRhdG9ycy5pc0NyZWRpdENhcmQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHZhbGlkYXRlKGM6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0b3IoYyk7XG4gICAgfVxufVxuIl19