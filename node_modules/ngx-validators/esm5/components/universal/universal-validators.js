/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { AbstractControlUtil } from '../abstract-control-util';
var UniversalValidators = /** @class */ (function () {
    function UniversalValidators() {
    }
    /**
     * @param {?} control
     * @return {?}
     */
    UniversalValidators.noWhitespace = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        /** @type {?} */
        var pattern = '\\s';
        if (new RegExp(pattern).test(control.value)) {
            return { 'noWhitespaceRequired': true };
        }
        return undefined;
    };
    ;
    /**
     * @param {?} control
     * @return {?}
     */
    UniversalValidators.noEmptyString = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        if (control.value.trim().length === 0) {
            return { 'noEmptyString': true };
        }
        return undefined;
    };
    ;
    /**
     * @param {?} control
     * @return {?}
     */
    UniversalValidators.isNumber = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        if (AbstractControlUtil.isNotPresent(control))
            return undefined;
        if (isNaN(control.value)) {
            return { 'numberRequired': true };
        }
        return undefined;
    };
    ;
    /**
     * @param {?} minValue
     * @param {?} maxValue
     * @return {?}
     */
    UniversalValidators.isInRange = /**
     * @param {?} minValue
     * @param {?} maxValue
     * @return {?}
     */
    function (minValue, maxValue) {
        /** @type {?} */
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            if (isNaN(control.value)) {
                return { 'numberRequired': true };
            }
            if (+control.value < minValue) {
                return { 'rangeValueToSmall': { 'requiredMinValue': minValue, 'requiredMaxValue': maxValue, 'actual': control.value } };
            }
            if (+control.value > maxValue) {
                return { 'rangeValueToBig': { 'requiredMinValue': minValue, 'requiredMaxValue': maxValue, 'actual': control.value } };
            }
            else {
                return undefined;
            }
        };
        return validator;
    };
    ;
    /**
     * @param {?} minLength
     * @return {?}
     */
    UniversalValidators.minLength = /**
     * @param {?} minLength
     * @return {?}
     */
    function (minLength) {
        /** @type {?} */
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            var value = control.value;
            if (value.length >= minLength) {
                return undefined;
            }
            return { 'minLength': { 'requiredMinLength': minLength, 'actualLength': value.length } };
        };
        return validator;
    };
    ;
    /**
     * @param {?} maxLength
     * @return {?}
     */
    UniversalValidators.maxLength = /**
     * @param {?} maxLength
     * @return {?}
     */
    function (maxLength) {
        /** @type {?} */
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            var value = control.value;
            if (maxLength >= value.length) {
                return undefined;
            }
            return { 'maxLength': { 'requiredMaxLength': maxLength, 'actualLength': value.length } };
        };
        return validator;
    };
    ;
    /**
     * @param {?} min
     * @return {?}
     */
    UniversalValidators.min = /**
     * @param {?} min
     * @return {?}
     */
    function (min) {
        /** @type {?} */
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            var value = control.value;
            if (isNaN(control.value)) {
                return { 'numberRequired': true };
            }
            if (+value >= min) {
                return undefined;
            }
            return { 'min': { 'required': min, 'actual': control.value } };
        };
        return validator;
    };
    ;
    /**
     * @param {?} max
     * @return {?}
     */
    UniversalValidators.max = /**
     * @param {?} max
     * @return {?}
     */
    function (max) {
        /** @type {?} */
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            var value = control.value;
            if (isNaN(control.value)) {
                return { 'numberRequired': true };
            }
            if (max >= +value) {
                return undefined;
            }
            return { 'max': { 'required': max, 'actual': control.value } };
        };
        return validator;
    };
    ;
    return UniversalValidators;
}());
export { UniversalValidators };
//# sourceMappingURL=data:application/json;base64,