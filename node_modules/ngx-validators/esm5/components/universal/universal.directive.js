/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { UniversalValidators } from './universal-validators';
var WhiteSpaceValidatorDirective = /** @class */ (function () {
    function WhiteSpaceValidatorDirective() {
    }
    /**
     * @return {?}
     */
    WhiteSpaceValidatorDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.validator = UniversalValidators.noWhitespace;
    };
    /**
     * @param {?} c
     * @return {?}
     */
    WhiteSpaceValidatorDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.validator(c);
    };
    WhiteSpaceValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[noWhitespace][formControlName],[noWhitespace][formControl],[noWhitespace][ngModel]',
                    providers: [{
                            provide: NG_VALIDATORS,
                            // tslint:disable-next-line:no-forward-ref
                            useExisting: forwardRef(function () { return WhiteSpaceValidatorDirective; }),
                            multi: true
                        }]
                },] }
    ];
    return WhiteSpaceValidatorDirective;
}());
export { WhiteSpaceValidatorDirective };
if (false) {
    /** @type {?} */
    WhiteSpaceValidatorDirective.prototype.validator;
}
var EmptyStringValidatorDirective = /** @class */ (function () {
    function EmptyStringValidatorDirective() {
    }
    /**
     * @return {?}
     */
    EmptyStringValidatorDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.validator = UniversalValidators.noEmptyString;
    };
    /**
     * @param {?} c
     * @return {?}
     */
    EmptyStringValidatorDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.validator(c);
    };
    EmptyStringValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[noEmptyString][formControlName],[noEmptyString][formControl],[noEmptyString][ngModel]',
                    providers: [{
                            provide: NG_VALIDATORS,
                            // tslint:disable-next-line:no-forward-ref
                            useExisting: forwardRef(function () { return EmptyStringValidatorDirective; }),
                            multi: true
                        }]
                },] }
    ];
    return EmptyStringValidatorDirective;
}());
export { EmptyStringValidatorDirective };
if (false) {
    /** @type {?} */
    EmptyStringValidatorDirective.prototype.validator;
}
var IsNumberValidatorDirective = /** @class */ (function () {
    function IsNumberValidatorDirective() {
    }
    /**
     * @return {?}
     */
    IsNumberValidatorDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.validator = UniversalValidators.isNumber;
    };
    /**
     * @param {?} c
     * @return {?}
     */
    IsNumberValidatorDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.validator(c);
    };
    IsNumberValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[isNumber][formControlName],[isNumber][formControl],[isNumber][ngModel]',
                    providers: [{
                            provide: NG_VALIDATORS,
                            // tslint:disable-next-line:no-forward-ref
                            useExisting: forwardRef(function () { return IsNumberValidatorDirective; }),
                            multi: true
                        }]
                },] }
    ];
    return IsNumberValidatorDirective;
}());
export { IsNumberValidatorDirective };
if (false) {
    /** @type {?} */
    IsNumberValidatorDirective.prototype.validator;
}
var IsInRangeValidatorDirective = /** @class */ (function () {
    function IsInRangeValidatorDirective() {
    }
    /**
     * @return {?}
     */
    IsInRangeValidatorDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.validator = UniversalValidators.isInRange(this.minValue, this.maxValue);
    };
    /**
     * @param {?} c
     * @return {?}
     */
    IsInRangeValidatorDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.validator(c);
    };
    IsInRangeValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[isInRange][formControlName],[isInRange][formControl],[isInRange][ngModel]',
                    providers: [{
                            provide: NG_VALIDATORS,
                            // tslint:disable-next-line:no-forward-ref
                            useExisting: forwardRef(function () { return IsInRangeValidatorDirective; }),
                            multi: true
                        }]
                },] }
    ];
    IsInRangeValidatorDirective.propDecorators = {
        minValue: [{ type: Input }],
        maxValue: [{ type: Input }]
    };
    return IsInRangeValidatorDirective;
}());
export { IsInRangeValidatorDirective };
if (false) {
    /** @type {?} */
    IsInRangeValidatorDirective.prototype.minValue;
    /** @type {?} */
    IsInRangeValidatorDirective.prototype.maxValue;
    /** @type {?} */
    IsInRangeValidatorDirective.prototype.validator;
}
var MaxValidatorDirective = /** @class */ (function () {
    function MaxValidatorDirective() {
    }
    /**
     * @return {?}
     */
    MaxValidatorDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.validator = UniversalValidators.max(this.max);
    };
    /**
     * @param {?} c
     * @return {?}
     */
    MaxValidatorDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.validator(c);
    };
    MaxValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[type=text][max][formControlName],input[type=text][max][formControl],input[type=text][max][ngModel]',
                    providers: [{
                            provide: NG_VALIDATORS,
                            // tslint:disable-next-line:no-forward-ref
                            useExisting: forwardRef(function () { return MaxValidatorDirective; }),
                            multi: true
                        }]
                },] }
    ];
    MaxValidatorDirective.propDecorators = {
        max: [{ type: Input }]
    };
    return MaxValidatorDirective;
}());
export { MaxValidatorDirective };
if (false) {
    /** @type {?} */
    MaxValidatorDirective.prototype.max;
    /** @type {?} */
    MaxValidatorDirective.prototype.validator;
}
var MinValidatorDirective = /** @class */ (function () {
    function MinValidatorDirective() {
    }
    /**
     * @return {?}
     */
    MinValidatorDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.validator = UniversalValidators.min(this.min);
    };
    /**
     * @param {?} c
     * @return {?}
     */
    MinValidatorDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.validator(c);
    };
    MinValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'input[type=text][min][formControlName],input[type=text][min][formControl],input[type=text][min][ngModel]',
                    providers: [{
                            provide: NG_VALIDATORS,
                            // tslint:disable-next-line:no-forward-ref
                            useExisting: forwardRef(function () { return MinValidatorDirective; }),
                            multi: true
                        }]
                },] }
    ];
    MinValidatorDirective.propDecorators = {
        min: [{ type: Input }]
    };
    return MinValidatorDirective;
}());
export { MinValidatorDirective };
if (false) {
    /** @type {?} */
    MinValidatorDirective.prototype.min;
    /** @type {?} */
    MinValidatorDirective.prototype.validator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdmVyc2FsLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsiY29tcG9uZW50cy91bml2ZXJzYWwvdW5pdmVyc2FsLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBbUIsYUFBYSxFQUEwQixNQUFNLGdCQUFnQixDQUFDO0FBRXhGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTdEO0lBQUE7SUFtQkEsQ0FBQzs7OztJQVBHLCtDQUFROzs7SUFBUjtRQUNJLElBQUksQ0FBQyxTQUFTLEdBQUcsbUJBQW1CLENBQUMsWUFBWSxDQUFDO0lBQ3RELENBQUM7Ozs7O0lBRUQsK0NBQVE7Ozs7SUFBUixVQUFTLENBQWtCO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3QixDQUFDOztnQkFsQkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxxRkFBcUY7b0JBQy9GLFNBQVMsRUFBRSxDQUFDOzRCQUNSLE9BQU8sRUFBRSxhQUFhOzs0QkFFdEIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxjQUFNLE9BQUEsNEJBQTRCLEVBQTVCLENBQTRCLENBQUM7NEJBQzNELEtBQUssRUFBRSxJQUFJO3lCQUNkLENBQUM7aUJBQ0w7O0lBV0QsbUNBQUM7Q0FBQSxBQW5CRCxJQW1CQztTQVZZLDRCQUE0Qjs7O0lBQ3JDLGlEQUErQjs7QUFXbkM7SUFBQTtJQW1CQSxDQUFDOzs7O0lBUEcsZ0RBQVE7OztJQUFSO1FBQ0ksSUFBSSxDQUFDLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyxhQUFhLENBQUM7SUFDdkQsQ0FBQzs7Ozs7SUFFRCxnREFBUTs7OztJQUFSLFVBQVMsQ0FBa0I7UUFDdkIsT0FBTyxJQUFJ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QUcsbUJBQW1CLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2RCxDQUFDOzs7OztJQUVELHdDQUFROzs7O0lBQVIsVUFBUyxDQUFrQjtRQUN2QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Z0JBcEJKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsMEdBQTBHO29CQUNwSCxTQUFTLEVBQUUsQ0FBQzs0QkFDUixPQUFPLEVBQUUsYUFBYTs7NEJBRXRCLFdBQVcsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLHFCQUFxQixFQUFyQixDQUFxQixDQUFDOzRCQUNwRCxLQUFLLEVBQUUsSUFBSTt5QkFDZCxDQUFDO2lCQUNMOzs7c0JBRUksS0FBSzs7SUFXViw0QkFBQztDQUFBLEFBckJELElBcUJDO1NBWlkscUJBQXFCOzs7SUFDOUIsb0NBQXFCOztJQUVyQiwwQ0FBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIGZvcndhcmRSZWYsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgTkdfVkFMSURBVE9SUywgVmFsaWRhdG9yLCBWYWxpZGF0b3JGbiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgVW5pdmVyc2FsVmFsaWRhdG9ycyB9IGZyb20gJy4vdW5pdmVyc2FsLXZhbGlkYXRvcnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tub1doaXRlc3BhY2VdW2Zvcm1Db250cm9sTmFtZV0sW25vV2hpdGVzcGFjZV1bZm9ybUNvbnRyb2xdLFtub1doaXRlc3BhY2VdW25nTW9kZWxdJyxcbiAgICBwcm92aWRlcnM6IFt7XG4gICAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1mb3J3YXJkLXJlZlxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBXaGl0ZVNwYWNlVmFsaWRhdG9yRGlyZWN0aXZlKSxcbiAgICAgICAgbXVsdGk6IHRydWVcbiAgICB9XVxufSlcbmV4cG9ydCBjbGFzcyBXaGl0ZVNwYWNlVmFsaWRhdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yLCBPbkluaXQge1xuICAgIHByaXZhdGUgdmFsaWRhdG9yOiBWYWxpZGF0b3JGbjtcblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnZhbGlkYXRvciA9IFVuaXZlcnNhbFZhbGlkYXRvcnMubm9XaGl0ZXNwYWNlO1xuICAgIH1cblxuICAgIHZhbGlkYXRlKGM6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0b3IoYyk7XG4gICAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tub0VtcHR5U3RyaW5nXVtmb3JtQ29udHJvbE5hbWVdLFtub0VtcHR5U3RyaW5nXVtmb3JtQ29udHJvbF0sW25vRW1wdHlTdHJpbmddW25nTW9kZWxdJyxcbiAgICBwcm92aWRlcnM6IFt7XG4gICAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1mb3J3YXJkLXJlZlxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBFbXB0eVN0cmluZ1ZhbGlkYXRvckRpcmVjdGl2ZSksXG4gICAgICAgIG11bHRpOiB0cnVlXG4gICAgfV1cbn0pXG5leHBvcnQgY2xhc3MgRW1wdHlTdHJpbmdWYWxpZGF0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3IsIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSB2YWxpZGF0b3I6IFZhbGlkYXRvckZuO1xuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdG9yID0gVW5pdmVyc2FsVmFsaWRhdG9ycy5ub0VtcHR5U3RyaW5nO1xuICAgIH1cblxuICAgIHZhbGlkYXRlKGM6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0b3IoYyk7XG4gICAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpc051bWJlcl1bZm9ybUNvbnRyb2xOYW1lXSxbaXNOdW1iZXJdW2Zvcm1Db250cm9sXSxbaXNOdW1iZXJdW25nTW9kZWxdJyxcbiAgICBwcm92aWRlcnM6IFt7XG4gICAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1mb3J3YXJkLXJlZlxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBJc051bWJlclZhbGlkYXRvckRpcmVjdGl2ZSksXG4gICAgICAgIG11bHRpOiB0cnVlXG4gICAgfV1cbn0pXG5leHBvcnQgY2xhc3MgSXNOdW1iZXJWYWxpZGF0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3IsIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSB2YWxpZGF0b3I6IFZhbGlkYXRvckZuO1xuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdG9yID0gVW5pdmVyc2FsVmFsaWRhdG9ycy5pc051bWJlcjtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZShjOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdG9yKGMpO1xuICAgIH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaXNJblJhbmdlXVtmb3JtQ29udHJvbE5hbWVdLFtpc0luUmFuZ2VdW2Zvcm1Db250cm9sXSxbaXNJblJhbmdlXVtuZ01vZGVsXScsXG4gICAgcHJvdmlkZXJzOiBbe1xuICAgICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZm9yd2FyZC1yZWZcbiAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gSXNJblJhbmdlVmFsaWRhdG9yRGlyZWN0aXZlKSxcbiAgICAgICAgbXVsdGk6IHRydWVcbiAgICB9XVxufSlcbmV4cG9ydCBjbGFzcyBJc0luUmFuZ2VWYWxpZGF0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3IsIE9uSW5pdCB7XG4gICAgQElucHV0KCkgbWluVmFsdWU6IG51bWJlcjtcbiAgICBASW5wdXQoKSBtYXhWYWx1ZTogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSB2YWxpZGF0b3I6IFZhbGlkYXRvckZuO1xuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdG9yID0gVW5pdmVyc2FsVmFsaWRhdG9ycy5pc0luUmFuZ2UodGhpcy5taW5WYWx1ZSwgdGhpcy5tYXhWYWx1ZSk7XG4gICAgfVxuXG4gICAgdmFsaWRhdGUoYzogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRvcihjKTtcbiAgICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnaW5wdXRbdHlwZT10ZXh0XVttYXhdW2Zvcm1Db250cm9sTmFtZV0saW5wdXRbdHlwZT10ZXh0XVttYXhdW2Zvcm1Db250cm9sXSxpbnB1dFt0eXBlPXRleHRdW21heF1bbmdNb2RlbF0nLFxuICAgIHByb3ZpZGVyczogW3tcbiAgICAgICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZvcndhcmQtcmVmXG4gICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE1heFZhbGlkYXRvckRpcmVjdGl2ZSksXG4gICAgICAgIG11bHRpOiB0cnVlXG4gICAgfV1cbn0pXG5leHBvcnQgY2xhc3MgTWF4VmFsaWRhdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yLCBPbkluaXQge1xuICAgIEBJbnB1dCgpIG1heDogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSB2YWxpZGF0b3I6IFZhbGlkYXRvckZuO1xuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdG9yID0gVW5pdmVyc2FsVmFsaWRhdG9ycy5tYXgodGhpcy5tYXgpO1xuICAgIH1cblxuICAgIHZhbGlkYXRlKGM6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0b3IoYyk7XG4gICAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2lucHV0W3R5cGU9dGV4dF1bbWluXVtmb3JtQ29udHJvbE5hbWVdLGlucHV0W3R5cGU9dGV4dF1bbWluXVtmb3JtQ29udHJvbF0saW5wdXRbdHlwZT10ZXh0XVttaW5dW25nTW9kZWxdJyxcbiAgICBwcm92aWRlcnM6IFt7XG4gICAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1mb3J3YXJkLXJlZlxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBNaW5WYWxpZGF0b3JEaXJlY3RpdmUpLFxuICAgICAgICBtdWx0aTogdHJ1ZVxuICAgIH1dXG59KVxuZXhwb3J0IGNsYXNzIE1pblZhbGlkYXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvciwgT25Jbml0IHtcbiAgICBASW5wdXQoKSBtaW46IG51bWJlcjtcblxuICAgIHByaXZhdGUgdmFsaWRhdG9yOiBWYWxpZGF0b3JGbjtcblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnZhbGlkYXRvciA9IFVuaXZlcnNhbFZhbGlkYXRvcnMubWluKHRoaXMubWluKTtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZShjOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdG9yKGMpO1xuICAgIH1cbn1cbiJdfQ==