/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, Input, forwardRef } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { EmailValidators } from './email-validators';
var EmailValidatorDirective = /** @class */ (function () {
    function EmailValidatorDirective() {
        this.email = 'normal';
    }
    /**
     * @return {?}
     */
    EmailValidatorDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        switch (this.email) {
            case 'simple':
                this.validator = EmailValidators.simple;
                break;
            case 'normal':
                this.validator = EmailValidators.normal;
                break;
            default:
                this.validator = EmailValidators.normal;
                break;
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    EmailValidatorDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.validator(c);
    };
    EmailValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[email][formControlName],[email][formControl],[email][ngModel]',
                    providers: [{
                            provide: NG_VALIDATORS,
                            // tslint:disable-next-line:no-forward-ref
                            useExisting: forwardRef(function () { return EmailValidatorDirective; }),
                            multi: true
                        }]
                },] }
    ];
    EmailValidatorDirective.propDecorators = {
        email: [{ type: Input }]
    };
    return EmailValidatorDirective;
}());
export { EmailValidatorDirective };
if (false) {
    /** @type {?} */
    EmailValidatorDirective.prototype.email;
    /** @type {?} */
    EmailValidatorDirective.prototype.validator;
}
var EmailSuggestValidatorDirective = /** @class */ (function () {
    function EmailSuggestValidatorDirective() {
    }
    /**
     * @return {?}
     */
    EmailSuggestValidatorDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.validator = EmailValidators.suggest(this.emailSuggest);
    };
    /**
     * @param {?} c
     * @return {?}
     */
    EmailSuggestValidatorDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.validator(c);
    };
    EmailSuggestValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[emailSuggest][formControlName],[emailSuggest][formControl],[emailSuggest][ngModel]',
                    providers: [{
                            provide: NG_VALIDATORS,
                            // tslint:disable-next-line:no-forward-ref
                            useExisting: forwardRef(function () { return EmailSuggestValidatorDirective; }),
                            multi: true
                        }]
                },] }
    ];
    EmailSuggestValidatorDirective.propDecorators = {
        emailSuggest: [{ type: Input }]
    };
    return EmailSuggestValidatorDirective;
}());
export { EmailSuggestValidatorDirective };
if (false) {
    /** @type {?} */
    EmailSuggestValidatorDirective.prototype.emailSuggest;
    /** @type {?} */
    EmailSuggestValidatorDirective.prototype.validator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWwuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJjb21wb25lbnRzL2VtYWlsL2VtYWlsLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxhQUFhLEVBQTJDLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXJEO0lBQUE7UUFVYSxVQUFLLEdBQVcsUUFBUSxDQUFDO0lBc0J0QyxDQUFDOzs7O0lBbEJHLDBDQUFROzs7SUFBUjtRQUNJLFFBQVEsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNoQixLQUFLLFFBQVE7Z0JBQ1QsSUFBSSxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDO2dCQUN4QyxNQUFNO1lBQ1YsS0FBSyxRQUFRO2dCQUNULElBQUksQ0FBQyxTQUFTLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQztnQkFDeEMsTUFBTTtZQUNWO2dCQUNJLElBQUksQ0FBQyxTQUFTLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQztnQkFDeEMsTUFBTTtTQUNiO0lBRUwsQ0FBQzs7Ozs7SUFFRCwwQ0FBUTs7OztJQUFSLFVBQVMsQ0FBa0I7UUFDdkIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdCLENBQUM7O2dCQS9CSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGdFQUFnRTtvQkFDMUUsU0FBUyxFQUFFLENBQUM7NEJBQ1IsT0FBTyxFQUFFLGFBQWE7OzRCQUV0QixXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSx1QkFBdUIsRUFBdkIsQ0FBdUIsQ0FBQzs0QkFDdEQsS0FBSyxFQUFFLElBQUk7eUJBQ2QsQ0FBQztpQkFDTDs7O3dCQUVJLEtBQUs7O0lBc0JWLDhCQUFDO0NBQUEsQUFoQ0QsSUFnQ0M7U0F2QlksdUJBQXVCOzs7SUFDaEMsd0NBQWtDOztJQUVsQyw0Q0FBK0I7O0FBc0JuQztJQUFBO0lBcUJBLENBQUM7Ozs7SUFQRyxpREFBUTs7O0lBQVI7UUFDSSxJQUFJLENBQUMsU0FBUyxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2hFLENBQUM7Ozs7O0lBRUQsaURBQVE7Ozs7SUFBUixVQUFTLENBQWtCO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3QixDQUFDOztnQkFwQkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxxRkFBcUY7b0JBQy9GLFNBQVMsRUFBRSxDQUFDOzRCQUNSLE9BQU8sRUFBRSxhQUFhOzs0QkFFdEIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxjQUFNLE9BQUEsOEJBQThCLEVBQTlCLENBQThCLENBQUM7NEJBQzdELEtBQUssRUFBRSxJQUFJO3lCQUNkLENBQUM7aUJBQ0w7OzsrQkFFSSxLQUFLOztJQVdWLHFDQUFDO0NBQUEsQUFyQkQsSUFxQkM7U0FaWSw4QkFBOEI7OztJQUN2QyxzREFBb0M7O0lBRXBDLG1EQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVtYWlsU3VnZ2VzdGlvbiwgRW1haWxPcHRpb25zIH0gZnJvbSAnLi9lbWFpbC11dGlsJztcbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIGZvcndhcmRSZWYsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMSURBVE9SUywgVmFsaWRhdG9yLCBWYWxpZGF0b3JGbiwgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBFbWFpbFZhbGlkYXRvcnMgfSBmcm9tICcuL2VtYWlsLXZhbGlkYXRvcnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tlbWFpbF1bZm9ybUNvbnRyb2xOYW1lXSxbZW1haWxdW2Zvcm1Db250cm9sXSxbZW1haWxdW25nTW9kZWxdJyxcbiAgICBwcm92aWRlcnM6IFt7XG4gICAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1mb3J3YXJkLXJlZlxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBFbWFpbFZhbGlkYXRvckRpcmVjdGl2ZSksXG4gICAgICAgIG11bHRpOiB0cnVlXG4gICAgfV1cbn0pXG5leHBvcnQgY2xhc3MgRW1haWxWYWxpZGF0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3IsIE9uSW5pdCB7XG4gICAgQElucHV0KCkgZW1haWw6IHN0cmluZyA9ICdub3JtYWwnO1xuXG4gICAgcHJpdmF0ZSB2YWxpZGF0b3I6IFZhbGlkYXRvckZuO1xuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5lbWFpbCkge1xuICAgICAgICAgICAgY2FzZSAnc2ltcGxlJzpcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRvciA9IEVtYWlsVmFsaWRhdG9ycy5zaW1wbGU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdub3JtYWwnOlxuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdG9yID0gRW1haWxWYWxpZGF0b3JzLm5vcm1hbDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0b3IgPSBFbWFpbFZhbGlkYXRvcnMubm9ybWFsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICB2YWxpZGF0ZShjOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdG9yKGMpO1xuICAgIH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbZW1haWxTdWdnZXN0XVtmb3JtQ29udHJvbE5hbWVdLFtlbWFpbFN1Z2dlc3RdW2Zvcm1Db250cm9sXSxbZW1haWxTdWdnZXN0XVtuZ01vZGVsXScsXG4gICAgcHJvdmlkZXJzOiBbe1xuICAgICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZm9yd2FyZC1yZWZcbiAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gRW1haWxTdWdnZXN0VmFsaWRhdG9yRGlyZWN0aXZlKSxcbiAgICAgICAgbXVsdGk6IHRydWVcbiAgICB9XVxufSlcbmV4cG9ydCBjbGFzcyBFbWFpbFN1Z2dlc3RWYWxpZGF0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3IsIE9uSW5pdCB7XG4gICAgQElucHV0KCkgZW1haWxTdWdnZXN0OiBFbWFpbE9wdGlvbnM7XG5cbiAgICBwcml2YXRlIHZhbGlkYXRvcjogVmFsaWRhdG9yRm47XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0b3IgPSBFbWFpbFZhbGlkYXRvcnMuc3VnZ2VzdCh0aGlzLmVtYWlsU3VnZ2VzdCk7XG4gICAgfVxuXG4gICAgdmFsaWRhdGUoYzogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRvcihjKTtcbiAgICB9XG59XG4iXX0=