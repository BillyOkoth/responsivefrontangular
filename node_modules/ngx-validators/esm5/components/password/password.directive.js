/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, Input, forwardRef } from '@angular/core';
import { NG_VALIDATORS, Validators } from '@angular/forms';
import { PasswordValidators } from './password-validators';
var PasswordValidatorDirective = /** @class */ (function () {
    function PasswordValidatorDirective() {
        this.repeatCharacter = 4;
        this.alphabeticalCharacter = 1;
        this.digitCharacter = 1;
        this.lowercaseCharacter = 1;
        this.uppercaseCharacter = 1;
    }
    /**
     * @return {?}
     */
    PasswordValidatorDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.repeatCharacterValidator = PasswordValidators.repeatCharacterRegexRule(this.repeatCharacter);
        this.alphabeticalCharacterValidator = PasswordValidators.alphabeticalCharacterRule(this.alphabeticalCharacter);
        this.digitCharacterValidator = PasswordValidators.digitCharacterRule(this.digitCharacter);
        this.lowercaseCharacterValidator = PasswordValidators.lowercaseCharacterRule(this.lowercaseCharacter);
        this.uppercaseCharacterValidator = PasswordValidators.uppercaseCharacterRule(this.uppercaseCharacter);
    };
    /**
     * @param {?} c
     * @return {?}
     */
    PasswordValidatorDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        /** @type {?} */
        var compose = Validators.compose([this.repeatCharacterValidator,
            this.digitCharacterValidator, this.alphabeticalCharacterValidator,
            this.lowercaseCharacterValidator, this.uppercaseCharacterValidator]);
        return compose(c);
    };
    PasswordValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[password][formControlName],[password][formControl],[password][ngModel]',
                    providers: [{
                            provide: NG_VALIDATORS,
                            // tslint:disable-next-line:no-forward-ref
                            useExisting: forwardRef(function () { return PasswordValidatorDirective; }),
                            multi: true
                        }]
                },] }
    ];
    PasswordValidatorDirective.propDecorators = {
        repeatCharacter: [{ type: Input }],
        alphabeticalCharacter: [{ type: Input }],
        digitCharacter: [{ type: Input }],
        lowercaseCharacter: [{ type: Input }],
        uppercaseCharacter: [{ type: Input }]
    };
    return PasswordValidatorDirective;
}());
export { PasswordValidatorDirective };
if (false) {
    /** @type {?} */
    PasswordValidatorDirective.prototype.repeatCharacter;
    /** @type {?} */
    PasswordValidatorDirective.prototype.alphabeticalCharacter;
    /** @type {?} */
    PasswordValidatorDirective.prototype.digitCharacter;
    /** @type {?} */
    PasswordValidatorDirective.prototype.lowercaseCharacter;
    /** @type {?} */
    PasswordValidatorDirective.prototype.uppercaseCharacter;
    /** @type {?} */
    PasswordValidatorDirective.prototype.repeatCharacterValidator;
    /** @type {?} */
    PasswordValidatorDirective.prototype.alphabeticalCharacterValidator;
    /** @type {?} */
    PasswordValidatorDirective.prototype.digitCharacterValidator;
    /** @type {?} */
    PasswordValidatorDirective.prototype.lowercaseCharacterValidator;
    /** @type {?} */
    PasswordValidatorDirective.prototype.uppercaseCharacterValidator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJjb21wb25lbnRzL3Bhc3N3b3JkL3Bhc3N3b3JkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxhQUFhLEVBQWEsVUFBVSxFQUFnQyxNQUFNLGdCQUFnQixDQUFDO0FBRXBHLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTNEO0lBQUE7UUFVYSxvQkFBZSxHQUFXLENBQUMsQ0FBQztRQUM1QiwwQkFBcUIsR0FBVyxDQUFDLENBQUM7UUFDbEMsbUJBQWMsR0FBVyxDQUFDLENBQUM7UUFDM0IsdUJBQWtCLEdBQVcsQ0FBQyxDQUFDO1FBQy9CLHVCQUFrQixHQUFXLENBQUMsQ0FBQztJQXVCNUMsQ0FBQzs7OztJQWZHLDZDQUFROzs7SUFBUjtRQUNJLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxrQkFBa0IsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDbEcsSUFBSSxDQUFDLDhCQUE4QixHQUFHLGtCQUFrQixDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQy9HLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDMUYsSUFBSSxDQUFDLDJCQUEyQixHQUFHLGtCQUFrQixDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3RHLElBQUksQ0FBQywyQkFBMkIsR0FBRyxrQkFBa0IsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUUxRyxDQUFDOzs7OztJQUVELDZDQUFROzs7O0lBQVIsVUFBUyxDQUFrQjs7WUFDbkIsT0FBTyxHQUFnQixVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLHdCQUF3QjtZQUM1RSxJQUFJLENBQUMsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLDhCQUE4QjtZQUNqRSxJQUFJLENBQUMsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDcEUsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEIsQ0FBQzs7Z0JBcENKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUseUVBQXlFO29CQUNuRixTQUFTLEVBQUUsQ0FBQzs0QkFDUixPQUFPLEVBQUUsYUFBYTs7NEJBRXRCLFdBQVcsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLDBCQUEwQixFQUExQixDQUEwQixDQUFDOzRCQUN6RCxLQUFLLEVBQUUsSUFBSTt5QkFDZCxDQUFDO2lCQUNMOzs7a0NBRUksS0FBSzt3Q0FDTCxLQUFLO2lDQUNMLEtBQUs7cUNBQ0wsS0FBSztxQ0FDTCxLQUFLOztJQXVCVixpQ0FBQztDQUFBLEFBckNELElBcUNDO1NBNUJZLDBCQUEwQjs7O0lBQ25DLHFEQUFxQzs7SUFDckMsMkRBQTJDOztJQUMzQyxvREFBb0M7O0lBQ3BDLHdEQUF3Qzs7SUFDeEMsd0RBQXdDOztJQUV4Qyw4REFBOEM7O0lBQzlDLG9FQUFvRDs7SUFDcEQsNkRBQTZDOztJQUM3QyxpRUFBaUQ7O0lBQ2pELGlFQUFpRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIGZvcndhcmRSZWYsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMSURBVE9SUywgVmFsaWRhdG9yLCBWYWxpZGF0b3JzLCBWYWxpZGF0b3JGbiwgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBQYXNzd29yZFZhbGlkYXRvcnMgfSBmcm9tICcuL3Bhc3N3b3JkLXZhbGlkYXRvcnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1twYXNzd29yZF1bZm9ybUNvbnRyb2xOYW1lXSxbcGFzc3dvcmRdW2Zvcm1Db250cm9sXSxbcGFzc3dvcmRdW25nTW9kZWxdJyxcbiAgICBwcm92aWRlcnM6IFt7XG4gICAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1mb3J3YXJkLXJlZlxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBQYXNzd29yZFZhbGlkYXRvckRpcmVjdGl2ZSksXG4gICAgICAgIG11bHRpOiB0cnVlXG4gICAgfV1cbn0pXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRWYWxpZGF0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3IsIE9uSW5pdCB7XG4gICAgQElucHV0KCkgcmVwZWF0Q2hhcmFjdGVyOiBudW1iZXIgPSA0O1xuICAgIEBJbnB1dCgpIGFscGhhYmV0aWNhbENoYXJhY3RlcjogbnVtYmVyID0gMTtcbiAgICBASW5wdXQoKSBkaWdpdENoYXJhY3RlcjogbnVtYmVyID0gMTtcbiAgICBASW5wdXQoKSBsb3dlcmNhc2VDaGFyYWN0ZXI6IG51bWJlciA9IDE7XG4gICAgQElucHV0KCkgdXBwZXJjYXNlQ2hhcmFjdGVyOiBudW1iZXIgPSAxO1xuXG4gICAgcHJpdmF0ZSByZXBlYXRDaGFyYWN0ZXJWYWxpZGF0b3I6IFZhbGlkYXRvckZuO1xuICAgIHByaXZhdGUgYWxwaGFiZXRpY2FsQ2hhcmFjdGVyVmFsaWRhdG9yOiBWYWxpZGF0b3JGbjtcbiAgICBwcml2YXRlIGRpZ2l0Q2hhcmFjdGVyVmFsaWRhdG9yOiBWYWxpZGF0b3JGbjtcbiAgICBwcml2YXRlIGxvd2VyY2FzZUNoYXJhY3RlclZhbGlkYXRvcjogVmFsaWRhdG9yRm47XG4gICAgcHJpdmF0ZSB1cHBlcmNhc2VDaGFyYWN0ZXJWYWxpZGF0b3I6IFZhbGlkYXRvckZuO1xuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMucmVwZWF0Q2hhcmFjdGVyVmFsaWRhdG9yID0gUGFzc3dvcmRWYWxpZGF0b3JzLnJlcGVhdENoYXJhY3RlclJlZ2V4UnVsZSh0aGlzLnJlcGVhdENoYXJhY3Rlcik7XG4gICAgICAgIHRoaXMuYWxwaGFiZXRpY2FsQ2hhcmFjdGVyVmFsaWRhdG9yID0gUGFzc3dvcmRWYWxpZGF0b3JzLmFscGhhYmV0aWNhbENoYXJhY3RlclJ1bGUodGhpcy5hbHBoYWJldGljYWxDaGFyYWN0ZXIpO1xuICAgICAgICB0aGlzLmRpZ2l0Q2hhcmFjdGVyVmFsaWRhdG9yID0gUGFzc3dvcmRWYWxpZGF0b3JzLmRpZ2l0Q2hhcmFjdGVyUnVsZSh0aGlzLmRpZ2l0Q2hhcmFjdGVyKTtcbiAgICAgICAgdGhpcy5sb3dlcmNhc2VDaGFyYWN0ZXJWYWxpZGF0b3IgPSBQYXNzd29yZFZhbGlkYXRvcnMubG93ZXJjYXNlQ2hhcmFjdGVyUnVsZSh0aGlzLmxvd2VyY2FzZUNoYXJhY3Rlcik7XG4gICAgICAgIHRoaXMudXBwZXJjYXNlQ2hhcmFjdGVyVmFsaWRhdG9yID0gUGFzc3dvcmRWYWxpZGF0b3JzLnVwcGVyY2FzZUNoYXJhY3RlclJ1bGUodGhpcy51cHBlcmNhc2VDaGFyYWN0ZXIpO1xuXG4gICAgfVxuXG4gICAgdmFsaWRhdGUoYzogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB7XG4gICAgICAgIGxldCBjb21wb3NlOiBWYWxpZGF0b3JGbiA9IFZhbGlkYXRvcnMuY29tcG9zZShbdGhpcy5yZXBlYXRDaGFyYWN0ZXJWYWxpZGF0b3IsXG4gICAgICAgIHRoaXMuZGlnaXRDaGFyYWN0ZXJWYWxpZGF0b3IsIHRoaXMuYWxwaGFiZXRpY2FsQ2hhcmFjdGVyVmFsaWRhdG9yLFxuICAgICAgICB0aGlzLmxvd2VyY2FzZUNoYXJhY3RlclZhbGlkYXRvciwgdGhpcy51cHBlcmNhc2VDaGFyYWN0ZXJWYWxpZGF0b3JdKTtcbiAgICAgICAgcmV0dXJuIGNvbXBvc2UoYyk7XG4gICAgfVxufSJdfQ==