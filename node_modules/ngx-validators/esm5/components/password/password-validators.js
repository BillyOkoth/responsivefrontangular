/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { AbstractControlUtil } from './../abstract-control-util';
// tslint:disable-next-line:variable-name
var 
// tslint:disable-next-line:variable-name
PasswordValidators = /** @class */ (function () {
    function PasswordValidators() {
    }
    /**
     * @param {?} repeatCount
     * @return {?}
     */
    PasswordValidators.repeatCharacterRegexRule = /**
     * @param {?} repeatCount
     * @return {?}
     */
    function (repeatCount) {
        /** @type {?} */
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            var repeatDec = repeatCount - 1;
            /** @type {?} */
            var pattern = '([^\\x00-\\x1F])\\1{' + repeatDec + '}';
            if (control.value !== '' && new RegExp(pattern).test(control.value)) {
                return { 'repeatCharacterRegexRule': { 'repeatCount': repeatCount } };
            }
            return undefined;
        };
        return validator;
    };
    ;
    /**
     * @param {?} allowedChars
     * @return {?}
     */
    PasswordValidators.allowedCharacterRule = /**
     * @param {?} allowedChars
     * @return {?}
     */
    function (allowedChars) {
        /** @type {?} */
        var validator = function (control) {
            var e_1, _a;
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            var value = control.value;
            /** @type {?} */
            var valid = true;
            /** @type {?} */
            var invalidChars = [];
            try {
                for (var value_1 = tslib_1.__values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                    var char = value_1_1.value;
                    if (allowedChars.indexOf(char) === -1) {
                        valid = false;
                        if (invalidChars.indexOf(char) === -1) {
                            invalidChars.push(char);
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (!valid) {
                return { 'allowedCharacterRule': { 'invalidChars': invalidChars, 'allowedChars': allowedChars } };
            }
            return undefined;
        };
        return validator;
    };
    ;
    /**
     * @param {?} amount
     * @return {?}
     */
    PasswordValidators.alphabeticalCharacterRule = /**
     * @param {?} amount
     * @return {?}
     */
    function (amount) {
        /** @type {?} */
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            var value = control.value;
            if (value.length === 0) {
                return undefined;
            }
            /** @type {?} */
            var pattern = /[^A-Za-z]+/g;
            /** @type {?} */
            var stripped = value.replace(pattern, '');
            if (stripped.length < amount) {
                return { 'alphabeticalCharacterRule': { 'required': amount, 'actual': stripped.length } };
            }
            return undefined;
        };
        return validator;
    };
    ;
    /**
     * @param {?} amount
     * @return {?}
     */
    PasswordValidators.digitCharacterRule = /**
     * @param {?} amount
     * @return {?}
     */
    function (amount) {
        /** @type {?} */
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            var value = control.value;
            if (value.length === 0) {
                return undefined;
            }
            /** @type {?} */
            var pattern = /[^0-9\.]+/g;
            /** @type {?} */
            var stripped = value.replace(pattern, '');
            if (stripped.length < amount) {
                return { 'digitCharacterRule': { 'required': amount, 'actual': stripped.length } };
            }
            return undefined;
        };
        return validator;
    };
    ;
    /**
     * @param {?} amount
     * @return {?}
     */
    PasswordValidators.lowercaseCharacterRule = /**
     * @param {?} amount
     * @return {?}
     */
    function (amount) {
        /** @type {?} */
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            var value = control.value;
            if (value.length === 0) {
                return undefined;
            }
            /** @type {?} */
            var pattern = /[^a-z]+/g;
            /** @type {?} */
            var stripped = value.replace(pattern, '');
            if (stripped.length < amount) {
                return { 'lowercaseCharacterRule': { 'required': amount, 'actual': stripped.length } };
            }
            return undefined;
        };
        return validator;
    };
    ;
    /**
     * @param {?} amount
     * @return {?}
     */
    PasswordValidators.uppercaseCharacterRule = /**
     * @param {?} amount
     * @return {?}
     */
    function (amount) {
        /** @type {?} */
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            var value = control.value;
            if (value.length === 0) {
                return undefined;
            }
            /** @type {?} */
            var pattern = /[^A-Z]+/g;
            /** @type {?} */
            var stripped = value.replace(pattern, '');
            if (stripped.length < amount) {
                return { 'uppercaseCharacterRule': { 'required': amount, 'actual': stripped.length } };
            }
            return undefined;
        };
        return validator;
    };
    ;
    /**
     * @param {?} amount
     * @return {?}
     */
    PasswordValidators.specialCharacterRule = /**
     * @param {?} amount
     * @return {?}
     */
    function (amount) {
        /** @type {?} */
        var validator = function (control) {
            if (AbstractControlUtil.isNotPresent(control))
                return undefined;
            /** @type {?} */
            var value = control.value;
            if (value.length === 0) {
                return undefined;
            }
            /** @type {?} */
            var pattern = /[\w\s]+/g;
            /** @type {?} */
            var stripped = value.replace(pattern, '');
            if (stripped.length < amount) {
                return { 'specialCharacterRule': { 'required': amount, 'actual': stripped.length } };
            }
            return undefined;
        };
        return validator;
    };
    ;
    /**
     * @param {?=} passwordControlName
     * @param {?=} confirmPasswordControlName
     * @return {?}
     */
    PasswordValidators.mismatchedPasswords = /**
     * @param {?=} passwordControlName
     * @param {?=} confirmPasswordControlName
     * @return {?}
     */
    function (passwordControlName, confirmPasswordControlName) {
        /** @type {?} */
        var validator = function (group) {
            /** @type {?} */
            var newPasswordValue = group.get(passwordControlName ? passwordControlName : 'newPassword').value;
            /** @type {?} */
            var newPasswordConfirmValue = group.get(confirmPasswordControlName ? confirmPasswordControlName : 'confirmPassword').value;
            if (newPasswordValue !== newPasswordConfirmValue) {
                AbstractControlUtil.addError(group.get(confirmPasswordControlName ? confirmPasswordControlName : 'confirmPassword'), 'mismatchedPasswords', true);
                return { 'mismatchedPasswords': true };
            }
            else {
                AbstractControlUtil.removeError(group.get(confirmPasswordControlName ? confirmPasswordControlName : 'confirmPassword'), 'mismatchedPasswords');
            }
            return undefined;
        };
        return validator;
    };
    ;
    return PasswordValidators;
}());
// tslint:disable-next-line:variable-name
export { PasswordValidators };
//# sourceMappingURL=data:application/json;base64,