{"version":3,"sources":["ng://ngx-validators/components/abstract-control-util.ts","ng://ngx-validators/components/password/password-validators.ts","node_modules/tslib/tslib.es6.js","ng://ngx-validators/components/email/email-util.ts","ng://ngx-validators/components/email/email-validators.ts","ng://ngx-validators/components/universal/universal-validators.ts","ng://ngx-validators/components/creditcard/creditcard-validators.ts","ng://ngx-validators/components/password/password.directive.ts","ng://ngx-validators/components/email/email.directive.ts","ng://ngx-validators/components/universal/universal.directive.ts","ng://ngx-validators/components/creditcard/creditcard.directive.ts","ng://ngx-validators/components/equal-to/equal-to.directive.ts","ng://ngx-validators/components/validators.module.ts","ng://ngx-validators/components/equal-to/equal-to-validator.ts"],"names":["AbstractControlUtil","isNotPresent","control","value","undefined","addError","errorId","errors","hasError","setErrors","_a","removeError","Object","keys","length","PasswordValidators","repeatCharacterRegexRule","repeatCount","pattern","RegExp","test","allowedCharacterRule","allowedChars","valid","invalidChars","value_1","__values","o","m","Symbol","iterator","i","call","next","done","tslib_1.__values","value_1_1","char","indexOf","push","alphabeticalCharacterRule","amount","stripped","replace","required","actual","digitCharacterRule","lowercaseCharacterRule","uppercaseCharacterRule","specialCharacterRule","mismatchedPasswords","passwordControlName","confirmPasswordControlName","group","get","EmailSuggestion","this","defaultOptions","domains","secondLevelDomains","topLevelDomains","prototype","suggest","email","options","opt","emailParts","splitEmail","toLowerCase","secondLevelDomain","topLevelDomain","closestDomain","findClosestDomain","domain","suggestion","address","full","closestSecondLevelDomain","closestTopLevelDomain","rtrn","parts","trim","split","result","pop","domainParts","j","substring","join","threshold","dist","minDist","Infinity","sift4Distance","s1","s2","maxOffset","l1","l2","c1","c2","lcss","local_cs","trans","offset_arr","charAt","isTrans","ofs","Math","abs","splice","min","round","max","EmailValidators","simple","simpleEmailRule","normal","normalEmailRule","_this","emailSuggestion","UniversalValidators","noWhitespace","noWhitespaceRequired","noEmptyString","isNumber","isNaN","numberRequired","isInRange","minValue","maxValue","rangeValueToSmall","requiredMinValue","requiredMaxValue","rangeValueToBig","minLength","requiredMinLength","actualLength","maxLength","requiredMaxLength","visaRegex","americanExpressRegex","maestroRegex","jcbRegex","discoverRegex","dinersclubRegex","mastercardRegex","CreditCardValidators","isCreditCard","creditcard","americanExpress","dinersclub","discover","jcb","maestro","mastercard","visa","PasswordValidatorDirective","repeatCharacter","alphabeticalCharacter","digitCharacter","lowercaseCharacter","uppercaseCharacter","ngOnInit","repeatCharacterValidator","alphabeticalCharacterValidator","digitCharacterValidator","lowercaseCharacterValidator","uppercaseCharacterValidator","validate","c","Validators","compose","Directive","args","selector","providers","provide","NG_VALIDATORS","useExisting","forwardRef","multi","Input","EmailValidatorDirective","validator","EmailSuggestValidatorDirective","emailSuggest","WhiteSpaceValidatorDirective","EmptyStringValidatorDirective","IsNumberValidatorDirective","IsInRangeValidatorDirective","MaxValidatorDirective","MinValidatorDirective","CreditCardValidatorDirective","creditCard","EqualToDirective","otherControl","equalTo","parent","subscription","valueChanges","pipe","delay","subscribe","updateValueAndValidity","notEqualTo","ngOnDestroy","unsubscribe","ValidatorsModule","NgModule","declarations","exports","EqualToValidator","c1Name","c2Name"],"mappings":"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","sourcesContent":["import { AbstractControl } from '@angular/forms';\n\nexport class AbstractControlUtil {\n    static isNotPresent(control: AbstractControl): boolean {\n        let value = control.value;\n        if (value === undefined || value === null) {\n            return true;\n        }\n        return value !== '' ? false : true;\n    };\n\n    static addError(control: AbstractControl, errorId: string, value: any) {\n        if (!control.errors) {\n            control.setErrors({ [errorId]: value });\n        } else if (!control.hasError(errorId)) {\n            control.errors[errorId] = value;\n        }\n    }\n\n    static removeError(control: AbstractControl, errorId: string) {\n        if (control.errors && control.hasError(errorId)) {\n            if (Object.keys(control.errors).length > 1) {\n                delete control.errors[errorId];\n            } else {\n                control.setErrors(null);\n            }\n        }\n    }\n}\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\nimport { AbstractControlUtil } from './../abstract-control-util';\n\n// tslint:disable-next-line:variable-name\nexport class PasswordValidators {\n\n    public static repeatCharacterRegexRule(repeatCount: number) {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let repeatDec = repeatCount - 1;\n            let pattern = '([^\\\\x00-\\\\x1F])\\\\1{' + repeatDec + '}';\n            if (control.value !== '' && new RegExp(pattern).test(control.value)) {\n                return { 'repeatCharacterRegexRule': { 'repeatCount': repeatCount } };\n            }\n            return undefined;\n        };\n        return validator;\n    };\n\n    public static allowedCharacterRule(allowedChars: string[]): ValidatorFn {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            let valid = true;\n            let invalidChars: string[] = [];\n\n            for (let char of value) {\n                if (allowedChars.indexOf(char) === -1) {\n                    valid = false;\n                    if (invalidChars.indexOf(char) === -1) {\n                        invalidChars.push(char);\n                    }\n                }\n            }\n            if (!valid) {\n                return { 'allowedCharacterRule': { 'invalidChars': invalidChars, 'allowedChars': allowedChars } };\n            }\n            return undefined;\n        };\n        return validator;\n    };\n\n    public static alphabeticalCharacterRule(amount: number): ValidatorFn {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (value.length === 0) {\n                return undefined;\n            }\n            let pattern = /[^A-Za-z]+/g;\n            let stripped = value.replace(pattern, '');\n            if (stripped.length < amount) {\n                return { 'alphabeticalCharacterRule': { 'required': amount, 'actual': stripped.length } };\n            }\n            return undefined;\n        };\n        return validator;\n    };\n\n    public static digitCharacterRule(amount: number): ValidatorFn {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (value.length === 0) {\n                return undefined;\n            }\n            let pattern = /[^0-9\\.]+/g;\n            let stripped = value.replace(pattern, '');\n            if (stripped.length < amount) {\n                return { 'digitCharacterRule': { 'required': amount, 'actual': stripped.length } };\n            }\n            return undefined;\n        };\n        return validator;\n    };\n\n    public static lowercaseCharacterRule(amount: number): ValidatorFn {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (value.length === 0) {\n                return undefined;\n            }\n            let pattern = /[^a-z]+/g;\n            let stripped = value.replace(pattern, '');\n            if (stripped.length < amount) {\n                return { 'lowercaseCharacterRule': { 'required': amount, 'actual': stripped.length } };\n            }\n            return undefined;\n        };\n        return validator;\n    };\n\n    public static uppercaseCharacterRule(amount: number): ValidatorFn {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (value.length === 0) {\n                return undefined;\n            }\n            let pattern = /[^A-Z]+/g;\n            let stripped = value.replace(pattern, '');\n            if (stripped.length < amount) {\n                return { 'uppercaseCharacterRule': { 'required': amount, 'actual': stripped.length } };\n            }\n            return undefined;\n        };\n        return validator;\n    };\n\n    public static specialCharacterRule(amount: number): ValidatorFn {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (value.length === 0) {\n                return undefined;\n            }\n            let pattern = /[\\w\\s]+/g;\n            let stripped = value.replace(pattern, '');\n            if (stripped.length < amount) {\n                return { 'specialCharacterRule': { 'required': amount, 'actual': stripped.length } };\n            }\n            return undefined;\n        };\n        return validator;\n    };\n\n    public static mismatchedPasswords(passwordControlName?: string, confirmPasswordControlName?: string): ValidatorFn {\n        const validator = (group: AbstractControl): { [key: string]: any } => {\n            let newPasswordValue = group.get(passwordControlName ? passwordControlName : 'newPassword').value;\n            let newPasswordConfirmValue = group.get(confirmPasswordControlName ? confirmPasswordControlName : 'confirmPassword').value;\n            if (newPasswordValue !== newPasswordConfirmValue) {\n                AbstractControlUtil.addError(group.get(confirmPasswordControlName ? confirmPasswordControlName : 'confirmPassword'), 'mismatchedPasswords', true)\n\n                return { 'mismatchedPasswords': true };\n            } else {\n                AbstractControlUtil.removeError(group.get(confirmPasswordControlName ? confirmPasswordControlName : 'confirmPassword'), 'mismatchedPasswords');\n            }\n            return undefined;\n\n        };\n        return validator;\n    };\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from \"@angular/core\";\n\n/*\n * Code fromMailcheck https://github.com/mailcheck/mailcheck\n * Author\n * Derrick Ko (@derrickko)\n *\n * Released under the MIT License.\n *\n * v 1.1.2\n */\n\nexport interface EmailOptions {\n    domains: string[],\n    secondLevelDomains: string[],\n    topLevelDomains: string[]\n}\n\nexport interface SplittedEmail {\n    topLevelDomain: string,\n    secondLevelDomain: string,\n    domain: string,\n    address: string\n}\n\nexport interface Suggestion {\n    address: string,\n    domain: string,\n    full: string\n}\n\ninterface Offset {\n    c1: number,\n    c2: number,\n    trans: boolean\n}\n\nexport class EmailSuggestion {\n\n    private defaultOptions: EmailOptions = {\n        domains: ['msn.com', 'bellsouth.net',\n            'telus.net', 'comcast.net', 'optusnet.com.au',\n            'earthlink.net', 'qq.com', 'sky.com', 'icloud.com',\n            'mac.com', 'sympatico.ca', 'googlemail.com',\n            'att.net', 'xtra.co.nz', 'web.de',\n            'cox.net', 'gmail.com', 'ymail.com', 'yahoo.com',\n            'aim.com', 'rogers.com', 'verizon.net',\n            'rocketmail.com', 'google.com', 'optonline.net',\n            'sbcglobal.net', 'aol.com', 'me.com', 'btinternet.com',\n            'charter.net', 'shaw.ca'],\n        secondLevelDomains: [\"yahoo\", \"hotmail\", \"mail\", \"live\", \"outlook\", \"gmx\"],\n        topLevelDomains: [\"com\", \"com.au\", \"com.tw\", \"ca\", \"co.nz\", \"co.uk\", \"de\",\n            \"fr\", \"it\", \"ru\", \"net\", \"org\", \"edu\", \"gov\", \"jp\", \"nl\", \"kr\", \"se\", \"eu\",\n            \"ie\", \"co.il\", \"us\", \"at\", \"be\", \"dk\", \"hk\", \"es\", \"gr\", \"ch\", \"no\", \"cz\",\n            \"in\", \"net\", \"net.au\", \"info\", \"biz\", \"mil\", \"co.jp\", \"sg\", \"hu\", \"uk\"]\n    }\n\n    public suggest(email: string, options?: EmailOptions): { [key: string]: Suggestion } {\n        let opt = this.defaultOptions;\n        if (options != undefined) {\n            opt = options;\n        }\n        let emailParts = this.splitEmail(email.toLowerCase());\n\n        if (!emailParts) {\n            return undefined;\n        }\n\n        if (opt.secondLevelDomains && opt.topLevelDomains) {\n            // If the email is a valid 2nd-level + top-level, do not suggest anything.\n            if (opt.secondLevelDomains.indexOf(emailParts.secondLevelDomain) !== -1 && opt.topLevelDomains.indexOf(emailParts.topLevelDomain) !== -1) {\n                return undefined;\n            }\n        }\n\n        let closestDomain = this.findClosestDomain(emailParts.domain, opt.domains, 2);\n        if (closestDomain) {\n            if (closestDomain == emailParts.domain) {\n                // The email address exactly matches one of the supplied domains; do not return a suggestion.\n                return undefined;\n            } else {\n                // The email address closely matches one of the supplied domains; return a suggestion\n                return { suggestion: { address: emailParts.address, domain: closestDomain, full: emailParts.address + \"@\" + closestDomain } };\n            }\n        }\n\n        let closestSecondLevelDomain = this.findClosestDomain(emailParts.secondLevelDomain, opt.secondLevelDomains, 2);\n        let closestTopLevelDomain = this.findClosestDomain(emailParts.topLevelDomain, opt.topLevelDomains, 2);\n\n        if (emailParts.domain) {\n            closestDomain = emailParts.domain;\n            let rtrn = false;\n\n            if (closestSecondLevelDomain && closestSecondLevelDomain != emailParts.secondLevelDomain) {\n                // The email address may have a mispelled second-level domain; return a suggestion\n                closestDomain = closestDomain.replace(emailParts.secondLevelDomain, closestSecondLevelDomain);\n                rtrn = true;\n            }\n\n            if (closestTopLevelDomain && closestTopLevelDomain != emailParts.topLevelDomain && emailParts.secondLevelDomain !== '') {\n                // The email address may have a mispelled top-level domain; return a suggestion\n                closestDomain = closestDomain.replace(new RegExp(emailParts.topLevelDomain + \"$\"), closestTopLevelDomain);\n                rtrn = true;\n            }\n\n            if (rtrn) {\n                return { suggestion: { address: emailParts.address, domain: closestDomain, full: emailParts.address + \"@\" + closestDomain } };\n            }\n        }\n\n        /* The email address exactly matches one of the supplied domains, does not closely\n         * match any domain and does not appear to simply have a mispelled top-level domain,\n         * or is an invalid email address; do not return a suggestion.\n         */\n        return undefined;\n\n    };\n\n    public splitEmail(email: string) {\n\n        let parts = email.trim().split('@');\n\n        if (parts.length < 2) {\n            return undefined;\n        }\n\n        for (var i = 0; i < parts.length; i++) {\n            if (parts[i] === '') {\n                return undefined;\n            }\n        }\n\n        let result = {\n            topLevelDomain: \"\",\n            secondLevelDomain: \"\",\n            domain: parts.pop(),\n            address: ''\n        }\n\n        let domainParts = result.domain.split('.');\n\n        if (domainParts.length === 0) {\n            return undefined;\n        } else if (domainParts.length == 1) {\n            result.topLevelDomain = domainParts[0];\n        } else {\n            // The address has a domain and a top-level domain\n            result.secondLevelDomain = domainParts[0];\n            for (let j = 1; j < domainParts.length; j++) {\n                result.topLevelDomain += domainParts[j] + '.';\n            }\n            result.topLevelDomain = result.topLevelDomain.substring(0, result.topLevelDomain.length - 1);\n        }\n\n        result.address = parts.join('@');\n\n        return result;\n\n    }\n\n    private findClosestDomain(domain: string, domains: string[], threshold: number): string {\n        let dist;\n        let minDist = Infinity;\n        let closestDomain = null;\n\n        if (!domain || !domains) {\n            return undefined;\n        }\n\n        for (let i = 0; i < domains.length; i++) {\n            if (domain === domains[i]) {\n                return domain;\n            }\n            dist = this.sift4Distance(domain, domains[i], 5);\n            if (dist < minDist) {\n                minDist = dist;\n                closestDomain = domains[i];\n            }\n        }\n\n        if (minDist <= threshold && closestDomain !== null) {\n            return closestDomain;\n        } else {\n            return undefined;\n        }\n    }\n\n    private sift4Distance(s1: string, s2: string, maxOffset: number): number {\n        // sift4: https://siderite.blogspot.com/2014/11/super-fast-and-accurate-string-distance.html\n        if (maxOffset === undefined) {\n            maxOffset = 5; //default\n        }\n\n        if (!s1 || !s1.length) {\n            if (!s2) {\n                return 0;\n            }\n            return s2.length;\n        }\n\n        if (!s2 || !s2.length) {\n            return s1.length;\n        }\n\n        let l1 = s1.length;\n        let l2 = s2.length;\n\n        let c1 = 0;  //cursor for string 1\n        let c2 = 0;  //cursor for string 2\n        let lcss = 0;  //largest common subsequence\n        let local_cs = 0; //local common substring\n        let trans = 0;  //number of transpositions ('ab' vs 'ba')\n        let offset_arr: Offset[] = [];  //offset pair array, for computing the transpositions\n\n        while ((c1 < l1) && (c2 < l2)) {\n            if (s1.charAt(c1) == s2.charAt(c2)) {\n                local_cs++;\n                let isTrans = false;\n                //see if current match is a transposition\n                let i = 0;\n                while (i < offset_arr.length) {\n                    let ofs = offset_arr[i];\n                    if (c1 <= ofs.c1 || c2 <= ofs.c2) {\n                        // when two matches cross, the one considered a transposition is the one with the largest difference in offsets\n                        isTrans = Math.abs(c2 - c1) >= Math.abs(ofs.c2 - ofs.c1);\n                        if (isTrans) {\n                            trans++;\n                        } else {\n                            if (!ofs.trans) {\n                                ofs.trans = true;\n                                trans++;\n                            }\n                        }\n                        break;\n                    } else {\n                        if (c1 > ofs.c2 && c2 > ofs.c1) {\n                            offset_arr.splice(i, 1);\n                        } else {\n                            i++;\n                        }\n                    }\n                }\n                offset_arr.push({\n                    c1: c1,\n                    c2: c2,\n                    trans: isTrans\n                });\n            } else {\n                lcss += local_cs;\n                local_cs = 0;\n                if (c1 != c2) {\n                    c1 = c2 = Math.min(c1, c2);  //using min allows the computation of transpositions\n                }\n                //if matching characters are found, remove 1 from both cursors (they get incremented at the end of the loop)\n                //so that we can have only one code block handling matches \n                for (let j = 0; j < maxOffset && (c1 + j < l1 || c2 + j < l2); j++) {\n                    if ((c1 + j < l1) && (s1.charAt(c1 + j) == s2.charAt(c2))) {\n                        c1 += j - 1;\n                        c2--;\n                        break;\n                    }\n                    if ((c2 + j < l2) && (s1.charAt(c1) == s2.charAt(c2 + j))) {\n                        c1--;\n                        c2 += j - 1;\n                        break;\n                    }\n                }\n            }\n            c1++;\n            c2++;\n            // this covers the case where the last match is on the last token in list, so that it can compute transpositions correctly\n            if ((c1 >= l1) || (c2 >= l2)) {\n                lcss += local_cs;\n                local_cs = 0;\n                c1 = c2 = Math.min(c1, c2);\n            }\n        }\n        lcss += local_cs;\n        return Math.round(Math.max(l1, l2) - lcss + trans); //add the cost of transpositions to the final result\n    }\n}","import { AbstractControl, ValidatorFn } from '@angular/forms';\nimport { AbstractControlUtil } from './../abstract-control-util';\nimport { EmailSuggestion, EmailOptions } from './email-util';\n\nexport class EmailValidators {\n    private static emailSuggestion: EmailSuggestion = new EmailSuggestion();\n\n    public static simple(control: AbstractControl): { [key: string]: boolean } {\n        if (AbstractControlUtil.isNotPresent(control)) {\n            return undefined\n        };\n\n        let pattern = /.+@.+\\..+/i;\n        if (pattern.test(control.value)) {\n            return undefined;\n        }\n        return { 'simpleEmailRule': true };\n    };\n\n    // https://www.w3.org/TR/html5/forms.html#valid-e-mail-address\n    public static normal(control: AbstractControl): { [key: string]: boolean } {\n        if (AbstractControlUtil.isNotPresent(control)) {\n            return undefined\n        };\n        // tslint:disable-next-line:max-line-length\n        let pattern = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n        if (pattern.test(control.value)) {\n            return undefined;\n        }\n        return { 'normalEmailRule': true };\n    };\n\n    public static suggest(options?: EmailOptions): ValidatorFn {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) {\n                return undefined\n            };\n            return this.emailSuggestion.suggest(control.value, options)\n        };\n        return validator;\n    };\n\n}\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\nimport { AbstractControlUtil } from '../abstract-control-util';\n\nexport class UniversalValidators {\n\n    public static noWhitespace(control: AbstractControl): { [key: string]: boolean } {\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        let pattern = '\\\\s';\n        if (new RegExp(pattern).test(control.value)) {\n            return { 'noWhitespaceRequired': true };\n        }\n        return undefined;\n    };\n\n    public static noEmptyString(control: AbstractControl): { [key: string]: boolean } {\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (control.value.trim().length === 0) {\n            return { 'noEmptyString': true };\n        }\n        return undefined;\n    };\n\n    public static isNumber(control: AbstractControl): { [key: string]: boolean } {\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (isNaN(control.value)) {\n            return { 'numberRequired': true };\n        }\n        return undefined;\n    };\n\n    public static isInRange(minValue: number, maxValue: number): ValidatorFn {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            if (isNaN(control.value)) {\n                return { 'numberRequired': true };\n            }\n            if (+control.value < minValue) {\n                return { 'rangeValueToSmall': { 'requiredMinValue': minValue, 'requiredMaxValue': maxValue, 'actual': control.value } };\n            }\n\n            if (+control.value > maxValue) {\n                return { 'rangeValueToBig': { 'requiredMinValue': minValue, 'requiredMaxValue': maxValue, 'actual': control.value } };\n            } else {\n                return undefined;\n            }\n        };\n        return validator;\n    };\n\n    public static minLength(minLength: number) {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (value.length >= minLength) {\n                return undefined;\n            }\n            return { 'minLength': { 'requiredMinLength': minLength, 'actualLength': value.length } };\n        };\n        return validator;\n    };\n\n    public static maxLength(maxLength: number) {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (maxLength >= value.length) {\n                return undefined;\n            }\n            return { 'maxLength': { 'requiredMaxLength': maxLength, 'actualLength': value.length } };\n        };\n        return validator;\n    };\n\n    public static min(min: number) {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (isNaN(control.value)) {\n                return { 'numberRequired': true };\n            }\n            if (+value >= min) {\n                return undefined;\n            }\n            return { 'min': { 'required': min, 'actual': control.value } };\n        };\n        return validator;\n    };\n\n    public static max(max: number) {\n        const validator = (control: AbstractControl): { [key: string]: any } => {\n            if (AbstractControlUtil.isNotPresent(control)) return undefined;\n            let value: string = control.value;\n            if (isNaN(control.value)) {\n                return { 'numberRequired': true };\n            }\n            if (max >= +value) {\n                return undefined;\n            }\n            return { 'max': { 'required': max, 'actual': control.value } };\n        };\n        return validator;\n    };\n\n}\n","import { AbstractControl } from '@angular/forms';\nimport { AbstractControlUtil } from './../abstract-control-util';\n\nconst visaRegex = '^(?:4[0-9]{12})(?:[0-9]{3})?$';\nconst americanExpressRegex = '^(?:3[47][0-9]{13})$';\nconst maestroRegex = '^(?:(?:5[0678]\\\\d\\\\d|6304|6390|67\\\\d\\\\d)\\\\d{8,15})$';\nconst jcbRegex = '^(?:(?:2131|1800|35\\\\d{3})\\\\d{11})$';\nconst discoverRegex = '^(?:6(?:011|5[0-9]{2})(?:[0-9]{12}))$';\nconst dinersclubRegex = '^(?:3(?:0[0-5]|[68][0-9])[0-9]{11})$';\nconst mastercardRegex = '^(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$';\n\nexport class CreditCardValidators {\n\n    public static isCreditCard(control: AbstractControl): { [key: string]: boolean } {\n\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (new RegExp(americanExpressRegex + '|' +\n            visaRegex + '|' +\n            maestroRegex + '|' +\n            jcbRegex + '|' +\n            discoverRegex + '|' +\n            mastercardRegex + '|' +\n            dinersclubRegex\n        ).test(control.value)) {\n            return undefined;\n        }\n        return { 'creditcard': true };\n    };\n\n    public static americanExpress(control: AbstractControl): { [key: string]: boolean } {\n\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (new RegExp(americanExpressRegex).test(control.value)) {\n            return undefined;\n        }\n        return { 'americanExpress': true };\n    };\n\n    public static dinersclub(control: AbstractControl): { [key: string]: boolean } {\n\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (new RegExp(dinersclubRegex).test(control.value)) {\n            return undefined;\n        }\n        return { 'dinersclub': true };\n    };\n\n    public static discover(control: AbstractControl): { [key: string]: boolean } {\n\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (new RegExp(discoverRegex).test(control.value)) {\n            return undefined;\n        }\n        return { 'discover': true };\n    };\n    public static jcb(control: AbstractControl): { [key: string]: boolean } {\n\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (new RegExp(jcbRegex).test(control.value)) {\n            return undefined;\n        }\n        return { 'jcb': true };\n    };\n    public static maestro(control: AbstractControl): { [key: string]: boolean } {\n\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (new RegExp(maestroRegex).test(control.value)) {\n            return undefined;\n        }\n        return { 'maestro': true };\n    };\n\n    public static mastercard(control: AbstractControl): { [key: string]: boolean } {\n\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (new RegExp(mastercardRegex).test(control.value)) {\n            return undefined;\n        }\n        return { 'mastercard': true };\n    };\n\n    public static visa(control: AbstractControl): { [key: string]: boolean } {\n\n        if (AbstractControlUtil.isNotPresent(control)) return undefined;\n        if (new RegExp(visaRegex).test(control.value)) {\n            return undefined;\n        }\n        return { 'visa': true };\n    };\n}\n","import { Directive, Input, forwardRef, OnInit } from '@angular/core';\nimport { NG_VALIDATORS, Validator, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { PasswordValidators } from './password-validators';\n\n@Directive({\n    selector: '[password][formControlName],[password][formControl],[password][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => PasswordValidatorDirective),\n        multi: true\n    }]\n})\nexport class PasswordValidatorDirective implements Validator, OnInit {\n    @Input() repeatCharacter: number = 4;\n    @Input() alphabeticalCharacter: number = 1;\n    @Input() digitCharacter: number = 1;\n    @Input() lowercaseCharacter: number = 1;\n    @Input() uppercaseCharacter: number = 1;\n\n    private repeatCharacterValidator: ValidatorFn;\n    private alphabeticalCharacterValidator: ValidatorFn;\n    private digitCharacterValidator: ValidatorFn;\n    private lowercaseCharacterValidator: ValidatorFn;\n    private uppercaseCharacterValidator: ValidatorFn;\n\n    ngOnInit() {\n        this.repeatCharacterValidator = PasswordValidators.repeatCharacterRegexRule(this.repeatCharacter);\n        this.alphabeticalCharacterValidator = PasswordValidators.alphabeticalCharacterRule(this.alphabeticalCharacter);\n        this.digitCharacterValidator = PasswordValidators.digitCharacterRule(this.digitCharacter);\n        this.lowercaseCharacterValidator = PasswordValidators.lowercaseCharacterRule(this.lowercaseCharacter);\n        this.uppercaseCharacterValidator = PasswordValidators.uppercaseCharacterRule(this.uppercaseCharacter);\n\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        let compose: ValidatorFn = Validators.compose([this.repeatCharacterValidator,\n        this.digitCharacterValidator, this.alphabeticalCharacterValidator,\n        this.lowercaseCharacterValidator, this.uppercaseCharacterValidator]);\n        return compose(c);\n    }\n}","import { EmailSuggestion, EmailOptions } from './email-util';\nimport { Directive, Input, forwardRef, OnInit } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { EmailValidators } from './email-validators';\n\n@Directive({\n    selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => EmailValidatorDirective),\n        multi: true\n    }]\n})\nexport class EmailValidatorDirective implements Validator, OnInit {\n    @Input() email: string = 'normal';\n\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        switch (this.email) {\n            case 'simple':\n                this.validator = EmailValidators.simple;\n                break;\n            case 'normal':\n                this.validator = EmailValidators.normal;\n                break;\n            default:\n                this.validator = EmailValidators.normal;\n                break;\n        }\n\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n\n@Directive({\n    selector: '[emailSuggest][formControlName],[emailSuggest][formControl],[emailSuggest][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => EmailSuggestValidatorDirective),\n        multi: true\n    }]\n})\nexport class EmailSuggestValidatorDirective implements Validator, OnInit {\n    @Input() emailSuggest: EmailOptions;\n\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        this.validator = EmailValidators.suggest(this.emailSuggest);\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n","import { Directive, forwardRef, Input, OnInit } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, Validator, ValidatorFn } from '@angular/forms';\n\nimport { UniversalValidators } from './universal-validators';\n\n@Directive({\n    selector: '[noWhitespace][formControlName],[noWhitespace][formControl],[noWhitespace][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => WhiteSpaceValidatorDirective),\n        multi: true\n    }]\n})\nexport class WhiteSpaceValidatorDirective implements Validator, OnInit {\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        this.validator = UniversalValidators.noWhitespace;\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n\n@Directive({\n    selector: '[noEmptyString][formControlName],[noEmptyString][formControl],[noEmptyString][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => EmptyStringValidatorDirective),\n        multi: true\n    }]\n})\nexport class EmptyStringValidatorDirective implements Validator, OnInit {\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        this.validator = UniversalValidators.noEmptyString;\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n\n@Directive({\n    selector: '[isNumber][formControlName],[isNumber][formControl],[isNumber][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => IsNumberValidatorDirective),\n        multi: true\n    }]\n})\nexport class IsNumberValidatorDirective implements Validator, OnInit {\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        this.validator = UniversalValidators.isNumber;\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n\n@Directive({\n    selector: '[isInRange][formControlName],[isInRange][formControl],[isInRange][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => IsInRangeValidatorDirective),\n        multi: true\n    }]\n})\nexport class IsInRangeValidatorDirective implements Validator, OnInit {\n    @Input() minValue: number;\n    @Input() maxValue: number;\n\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        this.validator = UniversalValidators.isInRange(this.minValue, this.maxValue);\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n\n@Directive({\n    selector: 'input[type=text][max][formControlName],input[type=text][max][formControl],input[type=text][max][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => MaxValidatorDirective),\n        multi: true\n    }]\n})\nexport class MaxValidatorDirective implements Validator, OnInit {\n    @Input() max: number;\n\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        this.validator = UniversalValidators.max(this.max);\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n\n@Directive({\n    selector: 'input[type=text][min][formControlName],input[type=text][min][formControl],input[type=text][min][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => MinValidatorDirective),\n        multi: true\n    }]\n})\nexport class MinValidatorDirective implements Validator, OnInit {\n    @Input() min: number;\n\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        this.validator = UniversalValidators.min(this.min);\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n","import { Directive, Input, forwardRef, OnInit } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { CreditCardValidators } from './creditcard-validators';\n\n@Directive({\n    selector: '[creditCard][formControlName],[creditCard][formControl],[creditCard][ngModel]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => CreditCardValidatorDirective),\n        multi: true\n    }]\n})\n\nexport class CreditCardValidatorDirective implements Validator, OnInit {\n    @Input() creditCard: string = 'all';\n\n    private validator: ValidatorFn;\n\n    ngOnInit() {\n        switch (this.creditCard) {\n            case 'all':\n                this.validator = CreditCardValidators.isCreditCard;\n                break;\n            case 'americanExpress':\n                this.validator = CreditCardValidators.americanExpress;\n                break;\n            case 'dinersclub':\n                this.validator = CreditCardValidators.dinersclub;\n                break;\n            case 'discover':\n                this.validator = CreditCardValidators.discover;\n                break;\n            case 'jcb':\n                this.validator = CreditCardValidators.jcb;\n                break;\n            case 'maestro':\n                this.validator = CreditCardValidators.maestro;\n                break;\n            case 'mastercard':\n                this.validator = CreditCardValidators.mastercard;\n                break;\n            case 'visa':\n                this.validator = CreditCardValidators.visa;\n                break;\n            default:\n                this.validator = CreditCardValidators.isCreditCard;\n                break;\n        }\n\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        return this.validator(c);\n    }\n}\n","import { Directive, forwardRef, Input, OnDestroy } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\n@Directive({\n  selector: '[equalTo][ngModel], [equalTo][formControlName], [equalTo][formControl]',\n  providers: [{\n    provide: NG_VALIDATORS,\n    // tslint:disable-next-line:no-forward-ref\n    useExisting: forwardRef(() => EqualToDirective),\n    multi: true\n  }]\n})\nexport class EqualToDirective implements Validator, OnDestroy {\n\n  @Input() equalTo: string | AbstractControl;\n\n  private subscription: Subscription;\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    const otherControl = typeof this.equalTo === 'string' ? c.parent.get(this.equalTo) : this.equalTo;\n    if (!this.subscription) {\n      this.subscription = otherControl.valueChanges\n        .pipe(delay(1)).subscribe(() => {\n          c.updateValueAndValidity()\n        });\n    }\n    return c.value !== otherControl.value ? {notEqualTo: true} : null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  EmptyStringValidatorDirective,\n  IsInRangeValidatorDirective,\n  IsNumberValidatorDirective,\n  MaxValidatorDirective,\n  MinValidatorDirective,\n  WhiteSpaceValidatorDirective\n} from './universal/universal.directive';\nimport { NgModule } from '@angular/core';\n\nimport { CreditCardValidatorDirective } from './creditcard/creditcard.directive';\nimport { EmailValidatorDirective, EmailSuggestValidatorDirective } from './email/email.directive';\nimport { PasswordValidatorDirective } from './password/password.directive';\nimport { EqualToDirective } from './equal-to/equal-to.directive';\n\n@NgModule({\n  declarations: [\n    CreditCardValidatorDirective,\n    EmailValidatorDirective,\n    EmailSuggestValidatorDirective,\n    PasswordValidatorDirective,\n    IsInRangeValidatorDirective,\n    IsNumberValidatorDirective,\n    MaxValidatorDirective,\n    MinValidatorDirective,\n    WhiteSpaceValidatorDirective,\n    EmptyStringValidatorDirective,\n    EqualToDirective\n  ],\n  exports: [\n    CreditCardValidatorDirective,\n    EmailValidatorDirective,\n    EmailSuggestValidatorDirective,\n    PasswordValidatorDirective,\n    IsInRangeValidatorDirective,\n    IsNumberValidatorDirective,\n    MaxValidatorDirective,\n    MinValidatorDirective,\n    WhiteSpaceValidatorDirective,\n    EmptyStringValidatorDirective,\n    EqualToDirective\n  ]\n})\nexport class ValidatorsModule { }\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\nimport { AbstractControlUtil } from '../abstract-control-util';\n\nexport class EqualToValidator {\n  static equalTo(c1Name: string, c2Name: string): ValidatorFn {\n    const validator = (parent: AbstractControl): any => {\n      const c1 =parent.get(c1Name);\n      const c2 = parent.get(c2Name);\n\n      if (c1.value === c2.value) {\n        AbstractControlUtil.removeError(c2, 'notEqualTo');\n      } else {\n        AbstractControlUtil.addError(c2, 'notEqualTo', true);\n      }\n    };\n    return validator;\n  }\n}\n"]}