import { Directive, ElementRef, Inject, PLATFORM_ID, Input, Output, HostListener, EventEmitter, NgModule } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/** @type {?} */
var defaultUtilScript = 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/16.0.1/js/utils.js';
var Ng2TelInput = /** @class */ (function () {
    function Ng2TelInput(el, platformId) {
        this.el = el;
        this.platformId = platformId;
        this.ng2TelInputOptions = {};
        this.hasError = new EventEmitter();
        this.ng2TelOutput = new EventEmitter();
        this.countryChange = new EventEmitter();
        this.intlTelInputObject = new EventEmitter();
    }
    /**
     * @return {?}
     */
    Ng2TelInput.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (isPlatformBrowser(this.platformId)) {
            this.ng2TelInputOptions = __assign({}, this.ng2TelInputOptions, { utilsScript: this.getUtilsScript(this.ng2TelInputOptions) });
            this.ngTelInput = window.intlTelInput(this.el.nativeElement, __assign({}, this.ng2TelInputOptions));
            this.el.nativeElement.addEventListener("countrychange", (/**
             * @return {?}
             */
            function () {
                _this.countryChange.emit(_this.ngTelInput.getSelectedCountryData());
            }));
            this.intlTelInputObject.emit(this.ngTelInput);
        }
    };
    /**
     * @return {?}
     */
    Ng2TelInput.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var isInputValid = this.isInputValid();
        if (isInputValid) {
            /** @type {?} */
            var telOutput = this.ngTelInput.getNumber();
            this.hasError.emit(isInputValid);
            this.ng2TelOutput.emit(telOutput);
        }
        else {
            this.hasError.emit(isInputValid);
        }
    };
    /**
     * @return {?}
     */
    Ng2TelInput.prototype.isInputValid = /**
     * @return {?}
     */
    function () {
        return this.ngTelInput.isValidNumber();
    };
    /**
     * @param {?} country
     * @return {?}
     */
    Ng2TelInput.prototype.setCountry = /**
     * @param {?} country
     * @return {?}
     */
    function (country) {
        this.ngTelInput.setCountry(country);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    Ng2TelInput.prototype.getUtilsScript = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return options.utilsScript || defaultUtilScript;
    };
    /** @nocollapse */
    Ng2TelInput.ctorParameters = function () { return [
        { type: ElementRef },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    Ng2TelInput.propDecorators = {
        ng2TelInputOptions: [{ type: Input, args: ['ng2TelInputOptions',] }],
        hasError: [{ type: Output, args: ['hasError',] }],
        ng2TelOutput: [{ type: Output, args: ['ng2TelOutput',] }],
        countryChange: [{ type: Output, args: ['countryChange',] }],
        intlTelInputObject: [{ type: Output, args: ['intlTelInputObject',] }],
        onBlur: [{ type: HostListener, args: ['blur',] }]
    };
Ng2TelInput.ɵfac = function Ng2TelInput_Factory(t) { return new (t || Ng2TelInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
Ng2TelInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Ng2TelInput, selectors: [["", "ng2TelInput", ""]], hostBindings: function Ng2TelInput_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("blur", function Ng2TelInput_blur_HostBindingHandler() { return ctx.onBlur(); });
    } }, inputs: { ng2TelInputOptions: "ng2TelInputOptions" }, outputs: { hasError: "hasError", ng2TelOutput: "ng2TelOutput", countryChange: "countryChange", intlTelInputObject: "intlTelInputObject" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ng2TelInput, [{
        type: Directive,
        args: [{
                selector: '[ng2TelInput]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: String, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { ng2TelInputOptions: [{
            type: Input,
            args: ['ng2TelInputOptions']
        }], hasError: [{
            type: Output,
            args: ['hasError']
        }], ng2TelOutput: [{
            type: Output,
            args: ['ng2TelOutput']
        }], countryChange: [{
            type: Output,
            args: ['countryChange']
        }], intlTelInputObject: [{
            type: Output,
            args: ['intlTelInputObject']
        }], onBlur: [{
            type: HostListener,
            args: ['blur']
        }] }); })();
    return Ng2TelInput;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: src/ng2-tel-input.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Ng2TelInputModule = /** @class */ (function () {
    function Ng2TelInputModule() {
    }
    /**
     * @return {?}
     */
    Ng2TelInputModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: Ng2TelInputModule,
            providers: []
        };
    };
Ng2TelInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: Ng2TelInputModule });
Ng2TelInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function Ng2TelInputModule_Factory(t) { return new (t || Ng2TelInputModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Ng2TelInputModule, { declarations: [Ng2TelInput], exports: [Ng2TelInput] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ng2TelInputModule, [{
        type: NgModule,
        args: [{
                declarations: [Ng2TelInput],
                exports: [Ng2TelInput]
            }]
    }], function () { return []; }, null); })();
    return Ng2TelInputModule;
}());

export { Ng2TelInput, Ng2TelInputModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcyLXRlbC1pbnB1dC5qcyIsInNvdXJjZXMiOlsibmcyLXRlbC1pbnB1dC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BS007QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Z0RBTU07QUFDTjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0LCBQTEFURk9STV9JRCwgSW5wdXQsIE91dHB1dCwgSG9zdExpc3RlbmVyLCBFdmVudEVtaXR0ZXIsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbnZhciBfX2Fzc2lnbiA9ICh1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuLyoqIEB0eXBlIHs/fSAqL1xudmFyIGRlZmF1bHRVdGlsU2NyaXB0ID0gJ2h0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ludGwtdGVsLWlucHV0LzE2LjAuMS9qcy91dGlscy5qcyc7XG52YXIgTmcyVGVsSW5wdXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmcyVGVsSW5wdXQoZWwsIHBsYXRmb3JtSWQpIHtcbiAgICAgICAgdGhpcy5lbCA9IGVsO1xuICAgICAgICB0aGlzLnBsYXRmb3JtSWQgPSBwbGF0Zm9ybUlkO1xuICAgICAgICB0aGlzLm5nMlRlbElucHV0T3B0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLmhhc0Vycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLm5nMlRlbE91dHB1dCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5jb3VudHJ5Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLmludGxUZWxJbnB1dE9iamVjdCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBOZzJUZWxJbnB1dC5wcm90b3R5cGUubmdPbkluaXQgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgICAgICAgIHRoaXMubmcyVGVsSW5wdXRPcHRpb25zID0gX19hc3NpZ24oe30sIHRoaXMubmcyVGVsSW5wdXRPcHRpb25zLCB7IHV0aWxzU2NyaXB0OiB0aGlzLmdldFV0aWxzU2NyaXB0KHRoaXMubmcyVGVsSW5wdXRPcHRpb25zKSB9KTtcbiAgICAgICAgICAgIHRoaXMubmdUZWxJbnB1dCA9IHdpbmRvdy5pbnRsVGVsSW5wdXQodGhpcy5lbC5uYXRpdmVFbGVtZW50LCBfX2Fzc2lnbih7fSwgdGhpcy5uZzJUZWxJbnB1dE9wdGlvbnMpKTtcbiAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY291bnRyeWNoYW5nZVwiLCAoLyoqXG4gICAgICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY291bnRyeUNoYW5nZS5lbWl0KF90aGlzLm5nVGVsSW5wdXQuZ2V0U2VsZWN0ZWRDb3VudHJ5RGF0YSgpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHRoaXMuaW50bFRlbElucHV0T2JqZWN0LmVtaXQodGhpcy5uZ1RlbElucHV0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBOZzJUZWxJbnB1dC5wcm90b3R5cGUub25CbHVyID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICAgICAgdmFyIGlzSW5wdXRWYWxpZCA9IHRoaXMuaXNJbnB1dFZhbGlkKCk7XG4gICAgICAgIGlmIChpc0lucHV0VmFsaWQpIHtcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICAgICAgICAgIHZhciB0ZWxPdXRwdXQgPSB0aGlzLm5nVGVsSW5wdXQuZ2V0TnVtYmVyKCk7XG4gICAgICAgICAgICB0aGlzLmhhc0Vycm9yLmVtaXQoaXNJbnB1dFZhbGlkKTtcbiAgICAgICAgICAgIHRoaXMubmcyVGVsT3V0cHV0LmVtaXQodGVsT3V0cHV0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaGFzRXJyb3IuZW1pdChpc0lucHV0VmFsaWQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE5nMlRlbElucHV0LnByb3RvdHlwZS5pc0lucHV0VmFsaWQgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmdUZWxJbnB1dC5pc1ZhbGlkTnVtYmVyKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGNvdW50cnlcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE5nMlRlbElucHV0LnByb3RvdHlwZS5zZXRDb3VudHJ5ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBjb3VudHJ5XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoY291bnRyeSkge1xuICAgICAgICB0aGlzLm5nVGVsSW5wdXQuc2V0Q291bnRyeShjb3VudHJ5KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gb3B0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgTmcyVGVsSW5wdXQucHJvdG90eXBlLmdldFV0aWxzU2NyaXB0ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy51dGlsc1NjcmlwdCB8fCBkZWZhdWx0VXRpbFNjcmlwdDtcbiAgICB9O1xuICAgIE5nMlRlbElucHV0LmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogRGlyZWN0aXZlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ1tuZzJUZWxJbnB1dF0nLFxuICAgICAgICAgICAgICAgIH0sXSB9LFxuICAgIF07XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgTmcyVGVsSW5wdXQuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRWxlbWVudFJlZiB9LFxuICAgICAgICB7IHR5cGU6IFN0cmluZywgZGVjb3JhdG9yczogW3sgdHlwZTogSW5qZWN0LCBhcmdzOiBbUExBVEZPUk1fSUQsXSB9XSB9XG4gICAgXTsgfTtcbiAgICBOZzJUZWxJbnB1dC5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICAgICAgbmcyVGVsSW5wdXRPcHRpb25zOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWyduZzJUZWxJbnB1dE9wdGlvbnMnLF0gfV0sXG4gICAgICAgIGhhc0Vycm9yOiBbeyB0eXBlOiBPdXRwdXQsIGFyZ3M6IFsnaGFzRXJyb3InLF0gfV0sXG4gICAgICAgIG5nMlRlbE91dHB1dDogW3sgdHlwZTogT3V0cHV0LCBhcmdzOiBbJ25nMlRlbE91dHB1dCcsXSB9XSxcbiAgICAgICAgY291bnRyeUNoYW5nZTogW3sgdHlwZTogT3V0cHV0LCBhcmdzOiBbJ2NvdW50cnlDaGFuZ2UnLF0gfV0sXG4gICAgICAgIGludGxUZWxJbnB1dE9iamVjdDogW3sgdHlwZTogT3V0cHV0LCBhcmdzOiBbJ2ludGxUZWxJbnB1dE9iamVjdCcsXSB9XSxcbiAgICAgICAgb25CbHVyOiBbeyB0eXBlOiBIb3N0TGlzdGVuZXIsIGFyZ3M6IFsnYmx1cicsXSB9XVxuICAgIH07XG4gICAgcmV0dXJuIE5nMlRlbElucHV0O1xufSgpKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEdlbmVyYXRlZCBmcm9tOiBzcmMvbmcyLXRlbC1pbnB1dC5tb2R1bGUudHNcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxjb25zdGFudFByb3BlcnR5LGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xudmFyIE5nMlRlbElucHV0TW9kdWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5nMlRlbElucHV0TW9kdWxlKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE5nMlRlbElucHV0TW9kdWxlLmZvclJvb3QgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBOZzJUZWxJbnB1dE1vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW11cbiAgICAgICAgfTtcbiAgICB9O1xuICAgIE5nMlRlbElucHV0TW9kdWxlLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogTmdNb2R1bGUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW05nMlRlbElucHV0XSxcbiAgICAgICAgICAgICAgICAgICAgZXhwb3J0czogW05nMlRlbElucHV0XVxuICAgICAgICAgICAgICAgIH0sXSB9LFxuICAgIF07XG4gICAgcmV0dXJuIE5nMlRlbElucHV0TW9kdWxlO1xufSgpKTtcblxuZXhwb3J0IHsgTmcyVGVsSW5wdXQsIE5nMlRlbElucHV0TW9kdWxlIH07XG4iXX0=