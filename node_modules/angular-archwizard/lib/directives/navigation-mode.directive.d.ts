import { OnChanges, SimpleChanges } from '@angular/core';
import { NavigationMode } from '../navigation/navigation-mode.interface';
import { WizardComponent } from '../components/wizard.component';
/**
 * The [[awNavigationMode]] directive can be used to customize wizard'd navigation mode.
 *
 * There are several usage options:
 *
 * ### Option 1. Customize the default navigation mode with [[navigateBackward]] and/or [[navigateForward]] inputs.
 *
 * ```html
 * <aw-wizard [awNavigationMode] navigateBackward="deny" navigateForward="allow">...</aw-wizard>
 * ```
 *
 * ### Option 2. Pass in a custom navigation mode
 *
 * ```typescript
 * import { BaseNavigationMode } from 'angular-archwizard'
 *
 * class CustomNavigationMode extends BaseNavigationMode {
 *
 *   // ...
 * }
 * ```
 *
 * ```typescript
 * @Component({
 *   // ...
 * })
 * class MyComponent {
 *
 *   navigationMode = new CustomNavigationMode();
 * }
 * ```
 *
 * ```html
 * <aw-wizard [awNavigationMode]="navigationMode">...</aw-wizard>
 * ```
 *
 * ### Additional Notes
 *
 * - Specifying a custom navigation mode takes priority over [[navigateBackward]] and [[navigateForward]] inputs
 *
 * - Omitting the [[awNavigationMode]] directive or, equally, specifying just [[awNavigationMode]] without
 *   any inputs or parameters causes the wizard to use the default "strict" navigation mode equivalent to
 *
 * ```html
 * <aw-wizard [awNavigationMode] navigateBackward="deny" navigateForward="allow">...</aw-wizard>
 * ````
 */
import * as ɵngcc0 from '@angular/core';
export declare class NavigationModeDirective implements OnChanges {
    private wizard;
    /**
     * Custom navigation mode instance (optional).
     */
    awNavigationMode: NavigationMode | null;
    /**
     * A parameter for the default navigation mode.  Controls whether wizard steps before the current step are navigable:
     *
     * - `navigateBackward="deny"` -- the steps are not navigable
     * - `navigateBackward="allow"` -- the steps are navigable
     */
    navigateBackward: 'allow' | 'deny' | null;
    /**
     * A parameter for the default navigation mode.  Controls whether wizard steps after the current step are navigable:
     *
     * - `navigateForward="deny"` -- the steps are not navigable
     * - `navigateForward="allow"` -- the steps are navigable
     * - `navigateForward="visited"` -- a step is navigable iff it was already visited before
     */
    navigateForward: 'allow' | 'deny' | 'visited' | null;
    constructor(wizard: WizardComponent);
    ngOnChanges(changes: SimpleChanges): void;
    private getNavigationMode;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NavigationModeDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NavigationModeDirective, "[awNavigationMode]", never, { "awNavigationMode": "awNavigationMode"; "navigateBackward": "navigateBackward"; "navigateForward": "navigateForward"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbi1tb2RlLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJuYXZpZ2F0aW9uLW1vZGUuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uTW9kZSB9IGZyb20gJy4uL25hdmlnYXRpb24vbmF2aWdhdGlvbi1tb2RlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBXaXphcmRDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL3dpemFyZC5jb21wb25lbnQnO1xuLyoqXG4gKiBUaGUgW1thd05hdmlnYXRpb25Nb2RlXV0gZGlyZWN0aXZlIGNhbiBiZSB1c2VkIHRvIGN1c3RvbWl6ZSB3aXphcmQnZCBuYXZpZ2F0aW9uIG1vZGUuXG4gKlxuICogVGhlcmUgYXJlIHNldmVyYWwgdXNhZ2Ugb3B0aW9uczpcbiAqXG4gKiAjIyMgT3B0aW9uIDEuIEN1c3RvbWl6ZSB0aGUgZGVmYXVsdCBuYXZpZ2F0aW9uIG1vZGUgd2l0aCBbW25hdmlnYXRlQmFja3dhcmRdXSBhbmQvb3IgW1tuYXZpZ2F0ZUZvcndhcmRdXSBpbnB1dHMuXG4gKlxuICogYGBgaHRtbFxuICogPGF3LXdpemFyZCBbYXdOYXZpZ2F0aW9uTW9kZV0gbmF2aWdhdGVCYWNrd2FyZD1cImRlbnlcIiBuYXZpZ2F0ZUZvcndhcmQ9XCJhbGxvd1wiPi4uLjwvYXctd2l6YXJkPlxuICogYGBgXG4gKlxuICogIyMjIE9wdGlvbiAyLiBQYXNzIGluIGEgY3VzdG9tIG5hdmlnYXRpb24gbW9kZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEJhc2VOYXZpZ2F0aW9uTW9kZSB9IGZyb20gJ2FuZ3VsYXItYXJjaHdpemFyZCdcbiAqXG4gKiBjbGFzcyBDdXN0b21OYXZpZ2F0aW9uTW9kZSBleHRlbmRzIEJhc2VOYXZpZ2F0aW9uTW9kZSB7XG4gKlxuICogICAvLyAuLi5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIEBDb21wb25lbnQoe1xuICogICAvLyAuLi5cbiAqIH0pXG4gKiBjbGFzcyBNeUNvbXBvbmVudCB7XG4gKlxuICogICBuYXZpZ2F0aW9uTW9kZSA9IG5ldyBDdXN0b21OYXZpZ2F0aW9uTW9kZSgpO1xuICogfVxuICogYGBgXG4gKlxuICogYGBgaHRtbFxuICogPGF3LXdpemFyZCBbYXdOYXZpZ2F0aW9uTW9kZV09XCJuYXZpZ2F0aW9uTW9kZVwiPi4uLjwvYXctd2l6YXJkPlxuICogYGBgXG4gKlxuICogIyMjIEFkZGl0aW9uYWwgTm90ZXNcbiAqXG4gKiAtIFNwZWNpZnlpbmcgYSBjdXN0b20gbmF2aWdhdGlvbiBtb2RlIHRha2VzIHByaW9yaXR5IG92ZXIgW1tuYXZpZ2F0ZUJhY2t3YXJkXV0gYW5kIFtbbmF2aWdhdGVGb3J3YXJkXV0gaW5wdXRzXG4gKlxuICogLSBPbWl0dGluZyB0aGUgW1thd05hdmlnYXRpb25Nb2RlXV0gZGlyZWN0aXZlIG9yLCBlcXVhbGx5LCBzcGVjaWZ5aW5nIGp1c3QgW1thd05hdmlnYXRpb25Nb2RlXV0gd2l0aG91dFxuICogICBhbnkgaW5wdXRzIG9yIHBhcmFtZXRlcnMgY2F1c2VzIHRoZSB3aXphcmQgdG8gdXNlIHRoZSBkZWZhdWx0IFwic3RyaWN0XCIgbmF2aWdhdGlvbiBtb2RlIGVxdWl2YWxlbnQgdG9cbiAqXG4gKiBgYGBodG1sXG4gKiA8YXctd2l6YXJkIFthd05hdmlnYXRpb25Nb2RlXSBuYXZpZ2F0ZUJhY2t3YXJkPVwiZGVueVwiIG5hdmlnYXRlRm9yd2FyZD1cImFsbG93XCI+Li4uPC9hdy13aXphcmQ+XG4gKiBgYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5hdmlnYXRpb25Nb2RlRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIHdpemFyZDtcbiAgICAvKipcbiAgICAgKiBDdXN0b20gbmF2aWdhdGlvbiBtb2RlIGluc3RhbmNlIChvcHRpb25hbCkuXG4gICAgICovXG4gICAgYXdOYXZpZ2F0aW9uTW9kZTogTmF2aWdhdGlvbk1vZGUgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIEEgcGFyYW1ldGVyIGZvciB0aGUgZGVmYXVsdCBuYXZpZ2F0aW9uIG1vZGUuICBDb250cm9scyB3aGV0aGVyIHdpemFyZCBzdGVwcyBiZWZvcmUgdGhlIGN1cnJlbnQgc3RlcCBhcmUgbmF2aWdhYmxlOlxuICAgICAqXG4gICAgICogLSBgbmF2aWdhdGVCYWNrd2FyZD1cImRlbnlcImAgLS0gdGhlIHN0ZXBzIGFyZSBub3QgbmF2aWdhYmxlXG4gICAgICogLSBgbmF2aWdhdGVCYWNrd2FyZD1cImFsbG93XCJgIC0tIHRoZSBzdGVwcyBhcmUgbmF2aWdhYmxlXG4gICAgICovXG4gICAgbmF2aWdhdGVCYWNrd2FyZDogJ2FsbG93JyB8ICdkZW55JyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogQSBwYXJhbWV0ZXIgZm9yIHRoZSBkZWZhdWx0IG5hdmlnYXRpb24gbW9kZS4gIENvbnRyb2xzIHdoZXRoZXIgd2l6YXJkIHN0ZXBzIGFmdGVyIHRoZSBjdXJyZW50IHN0ZXAgYXJlIG5hdmlnYWJsZTpcbiAgICAgKlxuICAgICAqIC0gYG5hdmlnYXRlRm9yd2FyZD1cImRlbnlcImAgLS0gdGhlIHN0ZXBzIGFyZSBub3QgbmF2aWdhYmxlXG4gICAgICogLSBgbmF2aWdhdGVGb3J3YXJkPVwiYWxsb3dcImAgLS0gdGhlIHN0ZXBzIGFyZSBuYXZpZ2FibGVcbiAgICAgKiAtIGBuYXZpZ2F0ZUZvcndhcmQ9XCJ2aXNpdGVkXCJgIC0tIGEgc3RlcCBpcyBuYXZpZ2FibGUgaWZmIGl0IHdhcyBhbHJlYWR5IHZpc2l0ZWQgYmVmb3JlXG4gICAgICovXG4gICAgbmF2aWdhdGVGb3J3YXJkOiAnYWxsb3cnIHwgJ2RlbnknIHwgJ3Zpc2l0ZWQnIHwgbnVsbDtcbiAgICBjb25zdHJ1Y3Rvcih3aXphcmQ6IFdpemFyZENvbXBvbmVudCk7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBnZXROYXZpZ2F0aW9uTW9kZTtcbn1cbiJdfQ==