import { WizardStep } from '../util/wizard-step.interface';
import { WizardComponent } from './wizard.component';
/**
 * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].
 * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,
 * otherwise it will look like a normal `ul` component.
 *
 * ### Syntax
 *
 * ```html
 * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>
 * ```
 *
 * @author Marc Arndt
 */
import * as ɵngcc0 from '@angular/core';
export declare class WizardNavigationBarComponent {
    wizard: WizardComponent;
    /**
     * The direction in which the wizard steps should be shown in the navigation bar.
     * This value can be either `left-to-right` or `right-to-left`
     */
    direction: string;
    /**
     * Constructor
     *
     * @param wizard The state the wizard currently resides in
     */
    constructor(wizard: WizardComponent);
    /**
     * Returns all [[WizardStep]]s contained in the wizard
     *
     * @returns An array containing all [[WizardStep]]s
     */
    readonly wizardSteps: Array<WizardStep>;
    /**
     * Returns the number of wizard steps, that need to be displaced in the navigation bar
     *
     * @returns The number of wizard steps to be displayed
     */
    readonly numberOfWizardSteps: number;
    /**
     * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar
     *
     * @param wizardStep The wizard step to be checked
     * @returns True if the step can be marked as `current`
     */
    isCurrent(wizardStep: WizardStep): boolean;
    /**
     * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar
     *
     * @param wizardStep The wizard step to be checked
     * @returns True if the step can be marked as `editing`
     */
    isEditing(wizardStep: WizardStep): boolean;
    /**
     * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar
     *
     * @param wizardStep The wizard step to be checked
     * @returns True if the step can be marked as `done`
     */
    isDone(wizardStep: WizardStep): boolean;
    /**
     * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar
     *
     * @param wizardStep The wizard step to be checked
     * @returns True if the step can be marked as `optional`
     */
    isOptional(wizardStep: WizardStep): boolean;
    /**
     * Checks, whether a [[WizardStep]] can be marked as `completed` in the navigation bar.
     *
     * The `completed` class is only applied to completion steps.
     *
     * @param wizardStep The wizard step to be checked
     * @returns True if the step can be marked as `completed`
     */
    isCompleted(wizardStep: WizardStep): boolean;
    /**
     * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.
     * A wizard step can be navigated to if:
     * - the step is currently not selected
     * - the navigation bar isn't disabled
     * - the navigation mode allows navigation to the step
     *
     * @param wizardStep The wizard step to be checked
     * @returns True if the step can be marked as navigable
     */
    isNavigable(wizardStep: WizardStep): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<WizardNavigationBarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<WizardNavigationBarComponent, "aw-wizard-navigation-bar", never, { "direction": "direction"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l6YXJkLW5hdmlnYXRpb24tYmFyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ3aXphcmQtbmF2aWdhdGlvbi1iYXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdpemFyZFN0ZXAgfSBmcm9tICcuLi91dGlsL3dpemFyZC1zdGVwLmludGVyZmFjZSc7XG5pbXBvcnQgeyBXaXphcmRDb21wb25lbnQgfSBmcm9tICcuL3dpemFyZC5jb21wb25lbnQnO1xuLyoqXG4gKiBUaGUgYGF3LXdpemFyZC1uYXZpZ2F0aW9uLWJhcmAgY29tcG9uZW50IGNvbnRhaW5zIHRoZSBuYXZpZ2F0aW9uIGJhciBpbnNpZGUgYSBbW1dpemFyZENvbXBvbmVudF1dLlxuICogVG8gY29ycmVjdGx5IGRpc3BsYXkgdGhlIG5hdmlnYXRpb24gYmFyLCBpdCdzIHJlcXVpcmVkIHRvIHNldCB0aGUgcmlnaHQgY3NzIGNsYXNzZXMgZm9yIHRoZSBuYXZpZ2F0aW9uIGJhcixcbiAqIG90aGVyd2lzZSBpdCB3aWxsIGxvb2sgbGlrZSBhIG5vcm1hbCBgdWxgIGNvbXBvbmVudC5cbiAqXG4gKiAjIyMgU3ludGF4XG4gKlxuICogYGBgaHRtbFxuICogPGF3LXdpemFyZC1uYXZpZ2F0aW9uLWJhcj48L2F3LXdpemFyZC1uYXZpZ2F0aW9uLWJhcj5cbiAqIGBgYFxuICpcbiAqIEBhdXRob3IgTWFyYyBBcm5kdFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBXaXphcmROYXZpZ2F0aW9uQmFyQ29tcG9uZW50IHtcbiAgICB3aXphcmQ6IFdpemFyZENvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBUaGUgZGlyZWN0aW9uIGluIHdoaWNoIHRoZSB3aXphcmQgc3RlcHMgc2hvdWxkIGJlIHNob3duIGluIHRoZSBuYXZpZ2F0aW9uIGJhci5cbiAgICAgKiBUaGlzIHZhbHVlIGNhbiBiZSBlaXRoZXIgYGxlZnQtdG8tcmlnaHRgIG9yIGByaWdodC10by1sZWZ0YFxuICAgICAqL1xuICAgIGRpcmVjdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0gd2l6YXJkIFRoZSBzdGF0ZSB0aGUgd2l6YXJkIGN1cnJlbnRseSByZXNpZGVzIGluXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iod2l6YXJkOiBXaXphcmRDb21wb25lbnQpO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIFtbV2l6YXJkU3RlcF1dcyBjb250YWluZWQgaW4gdGhlIHdpemFyZFxuICAgICAqXG4gICAgICogQHJldHVybnMgQW4gYXJyYXkgY29udGFpbmluZyBhbGwgW1tXaXphcmRTdGVwXV1zXG4gICAgICovXG4gICAgcmVhZG9ubHkgd2l6YXJkU3RlcHM6IEFycmF5PFdpemFyZFN0ZXA+O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBvZiB3aXphcmQgc3RlcHMsIHRoYXQgbmVlZCB0byBiZSBkaXNwbGFjZWQgaW4gdGhlIG5hdmlnYXRpb24gYmFyXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIHdpemFyZCBzdGVwcyB0byBiZSBkaXNwbGF5ZWRcbiAgICAgKi9cbiAgICByZWFkb25seSBudW1iZXJPZldpemFyZFN0ZXBzOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzLCB3aGV0aGVyIGEgW1tXaXphcmRTdGVwXV0gY2FuIGJlIG1hcmtlZCBhcyBgY3VycmVudGAgaW4gdGhlIG5hdmlnYXRpb24gYmFyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gd2l6YXJkU3RlcCBUaGUgd2l6YXJkIHN0ZXAgdG8gYmUgY2hlY2tlZFxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHN0ZXAgY2FuIGJlIG1hcmtlZCBhcyBgY3VycmVudGBcbiAgICAgKi9cbiAgICBpc0N1cnJlbnQod2l6YXJkU3RlcDogV2l6YXJkU3RlcCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ2hlY2tzLCB3aGV0aGVyIGEgW1tXaXphcmRTdGVwXV0gY2FuIGJlIG1hcmtlZCBhcyBgZWRpdGluZ2AgaW4gdGhlIG5hdmlnYXRpb24gYmFyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gd2l6YXJkU3RlcCBUaGUgd2l6YXJkIHN0ZXAgdG8gYmUgY2hlY2tlZFxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHN0ZXAgY2FuIGJlIG1hcmtlZCBhcyBgZWRpdGluZ2BcbiAgICAgKi9cbiAgICBpc0VkaXRpbmcod2l6YXJkU3RlcDogV2l6YXJkU3RlcCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ2hlY2tzLCB3aGV0aGVyIGEgW1tXaXphcmRTdGVwXV0gY2FuIGJlIG1hcmtlZCBhcyBgZG9uZWAgaW4gdGhlIG5hdmlnYXRpb24gYmFyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gd2l6YXJkU3RlcCBUaGUgd2l6YXJkIHN0ZXAgdG8gYmUgY2hlY2tlZFxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHN0ZXAgY2FuIGJlIG1hcmtlZCBhcyBgZG9uZWBcbiAgICAgKi9cbiAgICBpc0RvbmUod2l6YXJkU3RlcDogV2l6YXJkU3RlcCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ2hlY2tzLCB3aGV0aGVyIGEgW1tXaXphcmRTdGVwXV0gY2FuIGJlIG1hcmtlZCBhcyBgb3B0aW9uYWxgIGluIHRoZSBuYXZpZ2F0aW9uIGJhclxuICAgICAqXG4gICAgICogQHBhcmFtIHdpemFyZFN0ZXAgVGhlIHdpemFyZCBzdGVwIHRvIGJlIGNoZWNrZWRcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBzdGVwIGNhbiBiZSBtYXJrZWQgYXMgYG9wdGlvbmFsYFxuICAgICAqL1xuICAgIGlzT3B0aW9uYWwod2l6YXJkU3RlcDogV2l6YXJkU3RlcCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ2hlY2tzLCB3aGV0aGVyIGEgW1tXaXphcmRTdGVwXV0gY2FuIGJlIG1hcmtlZCBhcyBgY29tcGxldGVkYCBpbiB0aGUgbmF2aWdhdGlvbiBiYXIuXG4gICAgICpcbiAgICAgKiBUaGUgYGNvbXBsZXRlZGAgY2xhc3MgaXMgb25seSBhcHBsaWVkIHRvIGNvbXBsZXRpb24gc3RlcHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gd2l6YXJkU3RlcCBUaGUgd2l6YXJkIHN0ZXAgdG8gYmUgY2hlY2tlZFxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHN0ZXAgY2FuIGJlIG1hcmtlZCBhcyBgY29tcGxldGVkYFxuICAgICAqL1xuICAgIGlzQ29tcGxldGVkKHdpemFyZFN0ZXA6IFdpemFyZFN0ZXApOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIENoZWNrcywgd2hldGhlciBhIFtbV2l6YXJkU3RlcF1dIGNhbiBiZSBtYXJrZWQgYXMgYG5hdmlnYWJsZWAgaW4gdGhlIG5hdmlnYXRpb24gYmFyLlxuICAgICAqIEEgd2l6YXJkIHN0ZXAgY2FuIGJlIG5hdmlnYXRlZCB0byBpZjpcbiAgICAgKiAtIHRoZSBzdGVwIGlzIGN1cnJlbnRseSBub3Qgc2VsZWN0ZWRcbiAgICAgKiAtIHRoZSBuYXZpZ2F0aW9uIGJhciBpc24ndCBkaXNhYmxlZFxuICAgICAqIC0gdGhlIG5hdmlnYXRpb24gbW9kZSBhbGxvd3MgbmF2aWdhdGlvbiB0byB0aGUgc3RlcFxuICAgICAqXG4gICAgICogQHBhcmFtIHdpemFyZFN0ZXAgVGhlIHdpemFyZCBzdGVwIHRvIGJlIGNoZWNrZWRcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBzdGVwIGNhbiBiZSBtYXJrZWQgYXMgbmF2aWdhYmxlXG4gICAgICovXG4gICAgaXNOYXZpZ2FibGUod2l6YXJkU3RlcDogV2l6YXJkU3RlcCk6IGJvb2xlYW47XG59XG4iXX0=