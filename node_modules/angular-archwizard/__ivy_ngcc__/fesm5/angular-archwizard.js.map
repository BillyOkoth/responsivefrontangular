{"version":3,"file":"angular-archwizard.js","sources":["ng:/angular-archwizard/lib/directives/wizard-step-symbol.directive.ts","ng:/angular-archwizard/lib/directives/wizard-step-title.directive.ts","ng:/angular-archwizard/lib/util/wizard-step.interface.ts","ng:/angular-archwizard/lib/util/wizard-completion-step.interface.ts","ng:/angular-archwizard/lib/components/wizard-completion-step.component.ts","ng:/angular-archwizard/lib/util/moving-direction.enum.ts","ng:/angular-archwizard/lib/navigation/base-navigation-mode.interface.ts","ng:/angular-archwizard/lib/navigation/configurable-navigation-mode.ts","ng:/angular-archwizard/lib/components/wizard.component.ts","ng:/angular-archwizard/lib/components/wizard-navigation-bar.component.ts","ng:/angular-archwizard/lib/components/wizard-step.component.ts","ng:/angular-archwizard/lib/directives/enable-back-links.directive.ts","ng:/angular-archwizard/lib/util/step-id.interface.ts","ng:/angular-archwizard/lib/util/step-index.interface.ts","ng:/angular-archwizard/lib/util/step-offset.interface.ts","ng:/angular-archwizard/lib/directives/go-to-step.directive.ts","ng:/angular-archwizard/lib/directives/next-step.directive.ts","ng:/angular-archwizard/lib/directives/optional-step.directive.ts","ng:/angular-archwizard/lib/directives/previous-step.directive.ts","ng:/angular-archwizard/lib/directives/reset-wizard.directive.ts","ng:/angular-archwizard/lib/directives/selected-step.directive.ts","ng:/angular-archwizard/lib/directives/wizard-completion-step.directive.ts","ng:/angular-archwizard/lib/directives/wizard-step.directive.ts","ng:/angular-archwizard/lib/directives/navigation-mode.directive.ts","ng:/angular-archwizard/lib/directives/completed-step.directive.ts","ng:/angular-archwizard/lib/archwizard.module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["import {Directive, TemplateRef} from '@angular/core';\n\n/**\n * The `awWizardStepSymbol` directive can be used as an alternative to the `navigationSymbol` input of a [[WizardStep]]\n * to define the step symbol inside the navigation bar.  This way step symbol may contain arbitrary content.\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepSymbol>\n *     ...\n * </ng-template>\n * ```\n */\n@Directive({\n  selector: 'ng-template[awStepSymbol], ng-template[awWizardStepSymbol]'\n})\nexport class WizardStepSymbolDirective {\n  /**\n   * Constructor\n   *\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepSymbolDirective]]\n   */\n  constructor(public templateRef: TemplateRef<any>) {\n  }\n}\n","import {Directive, TemplateRef} from '@angular/core';\n\n/**\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\n * to define the content of a step title inside the navigation bar.\n * This step title can be freely created and can contain more than only plain text\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepTitle>\n *     ...\n * </ng-template>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\n})\nexport class WizardStepTitleDirective {\n  /**\n   * Constructor\n   *\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\n   */\n  constructor(public templateRef: TemplateRef<any>) {\n  }\n}\n","import {ContentChild, EventEmitter, HostBinding, Input, Output} from '@angular/core';\nimport {WizardStepSymbolDirective} from '../directives/wizard-step-symbol.directive';\nimport {WizardStepTitleDirective} from '../directives/wizard-step-title.directive';\nimport {MovingDirection} from './moving-direction.enum';\nimport {NavigationSymbol} from './navigation-symbol.interface';\n\n/**\n * Basic functionality every type of wizard step needs to provide\n *\n * @author Marc Arndt\n */\nexport abstract class WizardStep {\n  /**\n   * A step title property, which contains the visible header title of the step.\n   * This title is then shown inside the navigation bar.\n   * Compared to `stepTitle` this property can contain any html content and not only plain text\n   */\n  @ContentChild(WizardStepTitleDirective, {static: false})\n  public stepTitleTemplate: WizardStepTitleDirective;\n\n  /**\n   * A step symbol property that, if defined, overrides `navigationSymbol`.\n   * Allows to display arbitrary content as a step symbol instead of plain text.\n   */\n  @ContentChild(WizardStepSymbolDirective, {static: false})\n  public stepSymbolTemplate: WizardStepSymbolDirective;\n\n  /**\n   * A step id, unique to the step\n   */\n  @Input()\n  public stepId: string;\n\n  /**\n   * A step title property, which contains the visible header title of the step.\n   * This title is only shown inside the navigation bar, if `stepTitleTemplate` is not defined or null.\n   */\n  @Input()\n  public stepTitle: string;\n\n  /**\n   * A symbol property, which contains an optional symbol for the step inside the navigation bar.\n   * Takes effect when `stepSymbolTemplate` is not defined or null.\n   */\n  @Input()\n  public navigationSymbol: NavigationSymbol = {symbol: ''};\n\n  /**\n   * A boolean describing if the wizard step is currently selected\n   */\n  public selected = false;\n\n  /**\n   * A boolean describing if the wizard step has been completed\n   */\n  public completed = false;\n\n  /**\n   * A boolean describing if the wizard step is shown as completed when the wizard is presented to the user\n   *\n   * Users will typically use `CompletedStepDirective` to set this flag\n   */\n  public initiallyCompleted = false;\n\n  /**\n   * A boolean describing if the wizard step is being edited after being competed\n   *\n   * This flag can only be true when `selected` is true.\n   */\n  public editing = false;\n\n  /**\n   * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\n   */\n  public defaultSelected = false;\n\n  /**\n   * A boolean describing if the wizard step is an optional step\n   */\n  public optional = false;\n\n  /**\n   * A function or boolean deciding, if this step can be entered\n   */\n  @Input()\n  public canEnter: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\n\n  /**\n   * A function or boolean deciding, if this step can be exited\n   */\n  @Input()\n  public canExit: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\n\n  /**\n   * This [[EventEmitter]] is called when the step is entered.\n   * The bound method should be used to do initialization work.\n   */\n  @Output()\n  public stepEnter: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\n\n  /**\n   * This [[EventEmitter]] is called when the step is exited.\n   * The bound method can be used to do cleanup work.\n   */\n  @Output()\n  public stepExit: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\n\n  /**\n   * Returns if this wizard step should be visible to the user.\n   * If the step should be visible to the user false is returned, otherwise true\n   */\n  @HostBinding('hidden')\n  public get hidden(): boolean {\n    return !this.selected;\n  }\n\n  /**\n   * This method returns true, if this wizard step can be transitioned with a given direction.\n   * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\n   *\n   * @param condition A condition variable, deciding if the step can be transitioned\n   * @param direction The direction in which this step should be transitioned\n   * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\n   * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\n   */\n  private static canTransitionStep(condition: ((direction: MovingDirection) => boolean) |\n                                     ((direction: MovingDirection) => Promise<boolean>) |\n                                     boolean,\n                                   direction: MovingDirection): Promise<boolean> {\n    if (typeof(condition) === typeof(true)) {\n      return Promise.resolve(condition as boolean);\n    } else if (condition instanceof Function) {\n      return Promise.resolve(condition(direction));\n    } else {\n      return Promise.reject(new Error(`Input value '${condition}' is neither a boolean nor a function`));\n    }\n  }\n\n  /**\n   * A function called when the step is entered\n   *\n   * @param direction The direction in which the step is entered\n   */\n  public enter(direction: MovingDirection): void {\n    this.stepEnter.emit(direction);\n  }\n\n  /**\n   * A function called when the step is exited\n   *\n   * @param direction The direction in which the step is exited\n   */\n  public exit(direction: MovingDirection) {\n    this.stepExit.emit(direction);\n  }\n\n  /**\n   * This method returns true, if this wizard step can be entered from the given direction.\n   * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be entered\n   * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\n   * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\n   */\n  public canEnterStep(direction: MovingDirection): Promise<boolean> {\n    return WizardStep.canTransitionStep(this.canEnter, direction);\n  }\n\n  /**\n   * This method returns true, if this wizard step can be exited into given direction.\n   * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be left\n   * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\n   * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\n   */\n  public canExitStep(direction: MovingDirection): Promise<boolean> {\n    return WizardStep.canTransitionStep(this.canExit, direction);\n  }\n}\n","import {EventEmitter} from '@angular/core';\nimport {WizardStep} from './wizard-step.interface';\nimport {MovingDirection} from './moving-direction.enum';\n\n/**\n * Basic functionality every wizard completion step needs to provide\n *\n * @author Marc Arndt\n */\nexport abstract class WizardCompletionStep extends WizardStep {\n  /**\n   * @inheritDoc\n   */\n  public stepExit = new EventEmitter<MovingDirection>();\n\n  /**\n   * @inheritDoc\n   */\n  public canExit: ((direction: MovingDirection) => boolean) | boolean = false;\n\n  /**\n   * @inheritDoc\n   */\n  public enter(direction: MovingDirection): void {\n    this.completed = true;\n    this.stepEnter.emit(direction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public exit(direction: MovingDirection): void {\n    // set this completion step as incomplete (unless it happens to be initiallyCompleted)\n    this.completed = this.initiallyCompleted;\n    this.stepExit.emit(direction);\n  }\n}\n","import {Component, forwardRef} from '@angular/core';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-completion-step',\n  templateUrl: 'wizard-completion-step.component.html',\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepComponent)},\n    {provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepComponent)}\n  ]\n})\nexport class WizardCompletionStepComponent extends WizardCompletionStep {\n}\n","/**\n * The direction in which a step transition was made\n *\n * @author Marc Arndt\n */\n\n/**\n * This enum contains the different possible moving directions in which a wizard can be traversed\n *\n * @author Marc Arndt\n */\nexport enum MovingDirection {\n  /**\n   * A forward step transition\n   */\n  Forwards,\n  /**\n   * A backward step transition\n   */\n  Backwards,\n  /**\n   * No step transition was done\n   */\n  Stay\n}\n","import {EventEmitter} from '@angular/core';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {NavigationMode} from './navigation-mode.interface';\nimport {WizardComponent} from '../components/wizard.component';\n\n/**\n * Base implementation of [[NavigationMode]]\n *\n * Note: Built-in [[NavigationMode]] classes should be stateless, allowing the library user to easily create\n * an instance of a particular [[NavigationMode]] class and pass it to `<aw-wizard [navigationMode]=\"...\">`.\n *\n * @author Marc Arndt\n */\nexport abstract class BaseNavigationMode implements NavigationMode {\n\n  /**\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n   *\n   * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n   * Navigation by navigation bar is governed by [[isNavigable]].\n   *\n   * In this implementation, a destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - the destination step can be entered in the direction from the current step\n   *\n   * Subclasses can impose additional restrictions, see [[canTransitionToStep]].\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination step\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and `false` otherwise\n   */\n  public canGoToStep(wizard: WizardComponent, destinationIndex: number): Promise<boolean> {\n    const hasStep = wizard.hasStep(destinationIndex);\n\n    const movingDirection = wizard.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous && wizard.currentStep.canExitStep(movingDirection);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous && wizard.getStepAtIndex(destinationIndex).canEnterStep(movingDirection);\n    };\n\n    const canTransitionToStep = (previous: boolean) => {\n      return previous && this.canTransitionToStep(wizard, destinationIndex);\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canTransitionToStep)\n      // Apply user-defined checks at the end.  They can involve user interaction\n      // which is better to be avoided if navigation mode does not actually allow the transition\n      // (`canTransitionToStep` returns `false`).\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep);\n  }\n\n  /**\n   * Imposes additional restrictions for `canGoToStep` in current navigation mode.\n   *\n   * The base implementation allows transition iff the given step is navigable from the navigation bar (see `isNavigable`).\n   * However, in some navigation modes `canTransitionToStep` can be more relaxed to allow navigation to certain steps\n   * by previous/next buttons, but not using the navigation bar.\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination step\n   * @returns `true`, if the destination step can be transitioned to and `false` otherwise\n   */\n  protected canTransitionToStep(wizard: WizardComponent, destinationIndex: number): boolean {\n    return this.isNavigable(wizard, destinationIndex);\n  }\n\n  /**\n   * Tries to transition to the wizard step, as denoted by the given destination index.\n   *\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  public goToStep(\n    wizard: WizardComponent,\n    destinationIndex: number,\n    preFinalize?: EventEmitter<void>,\n    postFinalize?: EventEmitter<void>): void {\n\n    this.canGoToStep(wizard, destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        // the current step can be exited in the given direction\n        const movingDirection: MovingDirection = wizard.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        wizard.currentStep.completed = true;\n        wizard.currentStep.exit(movingDirection);\n        wizard.currentStep.editing = false;\n        wizard.currentStep.selected = false;\n\n        this.transition(wizard, destinationIndex);\n\n        // remember if the next step is already completed before entering it to properly set `editing` flag\n        const wasCompleted = wizard.completed || wizard.currentStep.completed;\n\n        // go to next step\n        wizard.currentStep.enter(movingDirection);\n        wizard.currentStep.selected = true;\n        if (wasCompleted) {\n          wizard.currentStep.editing = true;\n        }\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        wizard.currentStep.exit(MovingDirection.Stay);\n        wizard.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  /**\n   * Transitions the wizard to the given step index.\n   *\n   * Can perform additional actions in particular navigation mode implementations.\n   *\n   * @param wizard The wizard component to operate on\n   * @param destinationIndex The index of the destination wizard step\n   */\n  protected transition(wizard: WizardComponent, destinationIndex: number): void {\n    wizard.currentStepIndex = destinationIndex;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public abstract isNavigable(WizardComponent: WizardComponent, destinationIndex: number): boolean;\n\n  /**\n   * Resets the state of this wizard.\n   *\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete.\n   *\n   * @param wizard The wizard component to operate on\n   */\n  public reset(wizard: WizardComponent): void {\n    this.ensureCanReset(wizard);\n\n    // reset the step internal state\n    wizard.wizardSteps.forEach(step => {\n      step.completed = step.initiallyCompleted;\n      step.selected = false;\n      step.editing = false;\n    });\n\n    // set the first step as the current step\n    wizard.currentStepIndex = wizard.defaultStepIndex;\n    wizard.currentStep.selected = true;\n    wizard.currentStep.enter(MovingDirection.Forwards);\n  }\n\n  /**\n   * Checks if wizard configuration allows to perform reset.\n   *\n   * A check failure is indicated by throwing an `Error` with the message discribing the discovered misconfiguration issue.\n   *\n   * Can include additional checks in particular navigation mode implementations.\n   *\n   * @param wizard The wizard component to operate on\n   * @throws An `Error` is thrown, if a micconfiguration issue is discovered.\n   */\n  protected ensureCanReset(wizard: WizardComponent): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!wizard.hasStep(wizard.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${wizard.defaultStepIndex}`);\n    }\n  }\n}\n","import {BaseNavigationMode} from './base-navigation-mode.interface';\nimport {WizardComponent} from '../components/wizard.component';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The default navigation mode used by [[WizardComponent]] and [[NavigationModeDirective]].\n *\n * It is parameterized with two navigation policies passed to constructor:\n *\n * - [[navigateBackward]] policy controls whether wizard steps before the current step are navigable:\n *\n *   - `\"deny\"` -- the steps are not navigable\n *   - `\"allow\"` -- the steps are navigable\n *   - If the corresponding constructor argument is omitted or is `null` or `undefined`,\n *     then the default value is applied which is `\"deny\"`\n *\n * - [[navigateForward]] policy controls whether wizard steps after the current step are navigable:\n *\n *   - `\"deny\"` -- the steps are not navigable\n *   - `\"allow\"` -- the steps are navigable\n *   - `\"visited\"` -- a step is navigable iff it was already visited before\n *   - If the corresponding constructor argument is omitted or is `null` or `undefined`,\n *     then the default value is applied which is `\"allow\"`\n */\nexport class ConfigurableNavigationMode extends BaseNavigationMode {\n\n  /**\n   * Constructor\n   *\n   * @param navigateBackward Controls whether wizard steps before the current step are navigable\n   * @param navigateForward Controls whether wizard steps before the current step are navigable\n   */\n  constructor(\n    private navigateBackward: 'allow'|'deny'|null = null,\n    private navigateForward: 'allow'|'deny'|'visited'|null = null,\n  ) {\n    super();\n    this.navigateBackward = this.navigateBackward || 'allow';\n    this.navigateForward = this.navigateForward || 'deny';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected canTransitionToStep(wizard: WizardComponent, destinationIndex: number): boolean {\n    // if the destination step can be navigated to using the navigation bar,\n    // it should be accessible with [goToStep] as well\n    if (this.isNavigable(wizard, destinationIndex)) {\n      return true;\n    }\n\n    // navigation with [goToStep] is permitted if all previous steps\n    // to the destination step have been completed or are optional\n    return wizard.wizardSteps\n        .filter((step, index) => index < destinationIndex && index !== wizard.currentStepIndex)\n        .every(step => step.completed || step.optional);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected transition(wizard: WizardComponent, destinationIndex: number): void {\n    if (this.navigateForward === 'deny') {\n      // set all steps after the destination step to incomplete\n      wizard.wizardSteps\n        .filter((step, index) => wizard.currentStepIndex > destinationIndex && index > destinationIndex)\n        .forEach(step => step.completed = false);\n    }\n\n    super.transition(wizard, destinationIndex);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isNavigable(wizard: WizardComponent, destinationIndex: number): boolean {\n    // Check if the destination step can be navigated to\n    const destinationStep = wizard.getStepAtIndex(destinationIndex);\n    if (destinationStep instanceof WizardCompletionStep) {\n      // A completion step can only be entered, if all previous steps have been completed, are optional, or selected\n      const previousStepsCompleted = wizard.wizardSteps\n        .filter((step, index) => index < destinationIndex)\n        .every(step => step.completed || step.optional || step.selected);\n      if (!previousStepsCompleted) {\n        return false;\n      }\n    }\n\n    // Apply navigation pocicies\n    if (destinationIndex < wizard.currentStepIndex) {\n      // If the destination step is before current, apply the `navigateBackward` policy\n      switch (this.navigateBackward) {\n        case 'allow': return true;\n        case 'deny': return false;\n        default:\n          throw new Error(`Invalid value for navigateBackward: ${this.navigateBackward}`);\n      }\n    } else if (destinationIndex > wizard.currentStepIndex) {\n      // If the destination step is after current, apply the `navigateForward` policy\n      switch (this.navigateForward) {\n        case 'allow': return true;\n        case 'deny': return false;\n        case 'visited': return destinationStep.completed;\n        default:\n          throw new Error(`Invalid value for navigateForward: ${this.navigateForward}`);\n      }\n    } else {\n      // Re-entering the current step is not allowed\n      return false;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected ensureCanReset(wizard: WizardComponent): void {\n    super.ensureCanReset(wizard);\n\n    // the default step is a completion step and the wizard contains more than one step\n    const defaultWizardStep = wizard.getStepAtIndex(wizard.defaultStepIndex);\n    const defaultCompletionStep = defaultWizardStep instanceof WizardCompletionStep;\n    if (defaultCompletionStep && wizard.wizardSteps.length !== 1) {\n      throw new Error(`The default step index ${wizard.defaultStepIndex} references a completion step`);\n    }\n  }\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  HostBinding,\n  Input,\n  QueryList,\n  EventEmitter,\n} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {ConfigurableNavigationMode} from '../navigation/configurable-navigation-mode';\n\n/**\n * The `aw-wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </aw-wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n * </aw-wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\n * </aw-wizard>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard',\n  templateUrl: 'wizard.component.html',\n})\nexport class WizardComponent implements AfterContentInit {\n  /**\n   * A QueryList containing all [[WizardStep]]s inside this wizard\n   */\n  @ContentChildren(WizardStep)\n  public wizardStepsQueryList: QueryList<WizardStep>;\n\n  /**\n   * The location of the navigation bar inside the wizard.\n   * This location can be either top, bottom, left or right\n   */\n  @Input()\n  public navBarLocation = 'top';\n\n  /**\n   * The layout of the navigation bar inside the wizard.\n   * The layout can be either small, large-filled, large-empty or large-symbols\n   */\n  @Input()\n  public navBarLayout = 'small';\n\n  /**\n   * The direction in which the steps inside the navigation bar should be shown.\n   * The direction can be either `left-to-right` or `right-to-left`\n   */\n  @Input()\n  public navBarDirection = 'left-to-right';\n\n  /**\n   * The initially selected step, represented by its index\n   * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n   */\n  @Input()\n  public get defaultStepIndex(): number {\n    // This value can be either:\n    // - the index of a wizard step with a `selected` directive, or\n    // - the default step index, set in the [[WizardComponent]]\n\n    const foundDefaultStep = this.wizardSteps.find(step => step.defaultSelected);\n\n    if (foundDefaultStep) {\n      return this.getIndexOfStep(foundDefaultStep);\n    } else {\n      return this._defaultStepIndex;\n    }\n  }\n  public set defaultStepIndex(defaultStepIndex: number) {\n    this._defaultStepIndex = defaultStepIndex;\n  }\n  private _defaultStepIndex = 0;\n\n  /**\n   * True, if the navigation bar shouldn't be used for navigating\n   */\n  @Input()\n  public disableNavigationBar = false;\n\n  /**\n   * The navigation mode used to navigate inside the wizard\n   *\n   * For outside access, use the [[navigation]] getter.\n   */\n  private _navigation: NavigationMode = new ConfigurableNavigationMode();\n\n  /**\n   * An array representation of all wizard steps belonging to this model\n   *\n   * For outside access, use the [[wizardSteps]] getter.\n   */\n  private _wizardSteps: WizardStep[] = [];\n\n  /**\n   * The index of the currently visible and selected step inside the wizardSteps QueryList.\n   * If this wizard contains no steps, currentStepIndex is -1\n   *\n   * Note: Do not modify this field directly.  Instead, use navigation methods:\n   * [[goToStep]], [[goToPreviousStep]], [[goToNextStep]].\n   */\n  public currentStepIndex = -1;\n\n  /**\n   * Constructor\n   */\n  constructor() {\n  }\n\n  /**\n   * Returns true if this wizard uses a horizontal orientation.\n   * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n   *\n   * @returns True if this wizard uses a horizontal orientation\n   */\n  @HostBinding('class.horizontal')\n  public get horizontalOrientation(): boolean {\n    return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\n  }\n\n  /**\n   * Returns true if this wizard uses a vertical orientation.\n   * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n   *\n   * @returns True if this wizard uses a vertical orientation\n   */\n  @HostBinding('class.vertical')\n  public get verticalOrientation(): boolean {\n    return this.navBarLocation === 'left' || this.navBarLocation === 'right';\n  }\n\n  /**\n   * Initialization work\n   */\n  public ngAfterContentInit(): void {\n    // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\n    this.wizardStepsQueryList.changes.subscribe(changedWizardSteps => {\n      this.updateWizardSteps(changedWizardSteps.toArray());\n    });\n\n    // initialize the model\n    this.updateWizardSteps(this.wizardStepsQueryList.toArray());\n\n    // finally reset the whole wizard componennt\n    this.reset();\n  }\n\n  /**\n   * The WizardStep object belonging to the currently visible and selected step.\n   * The currentStep is always the currently selected wizard step.\n   * The currentStep can be either completed, if it was visited earlier,\n   * or not completed, if it is visited for the first time or its state is currently out of date.\n   *\n   * If this wizard contains no steps, currentStep is null\n   */\n  public get currentStep(): WizardStep {\n    if (this.hasStep(this.currentStepIndex)) {\n      return this.wizardSteps[this.currentStepIndex];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * The completeness of the wizard.\n   * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n   */\n  public get completed(): boolean {\n    return this.wizardSteps.every(step => step.completed || step.optional);\n  }\n\n  /**\n   * An array representation of all wizard steps belonging to this model\n   */\n  public get wizardSteps(): WizardStep[] {\n    return this._wizardSteps;\n  }\n\n  /**\n   * Updates the wizard steps to the new array\n   *\n   * @param wizardSteps The updated wizard steps\n   */\n  private updateWizardSteps(wizardSteps: WizardStep[]): void {\n    // the wizard is currently not in the initialization phase\n    if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\n      this.currentStepIndex = wizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\n    }\n\n    this._wizardSteps = wizardSteps;\n  }\n\n  /**\n   * The navigation mode used to navigate inside the wizard\n   */\n  public get navigation(): NavigationMode {\n    return this._navigation;\n  }\n\n  /**\n   * Updates the navigation mode for this wizard component\n   *\n   * @param navigation The updated navigation mode\n   */\n  public set navigation(navigation: NavigationMode) {\n    this._navigation = navigation;\n  }\n\n  /**\n   * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n   *\n   * @param stepIndex The to be checked index of a step inside this wizard\n   * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\n   */\n  public hasStep(stepIndex: number): boolean {\n    return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\n  }\n\n  /**\n   * Checks if this wizard has a previous step, compared to the current step\n   *\n   * @returns True if this wizard has a previous step before the current step\n   */\n  public hasPreviousStep(): boolean {\n    return this.hasStep(this.currentStepIndex - 1);\n  }\n\n  /**\n   * Checks if this wizard has a next step, compared to the current step\n   *\n   * @returns True if this wizard has a next step after the current step\n   */\n  public hasNextStep(): boolean {\n    return this.hasStep(this.currentStepIndex + 1);\n  }\n\n  /**\n   * Checks if this wizard is currently inside its last step\n   *\n   * @returns True if the wizard is currently inside its last step\n   */\n  public isLastStep(): boolean {\n    return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\n  }\n\n  /**\n   * Finds the [[WizardStep]] at the given index `stepIndex`.\n   * If no [[WizardStep]] exists at the given index an Error is thrown\n   *\n   * @param stepIndex The given index\n   * @returns The found [[WizardStep]] at the given index `stepIndex`\n   * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n   */\n  public getStepAtIndex(stepIndex: number): WizardStep {\n    if (!this.hasStep(stepIndex)) {\n      throw new Error(`Expected a known step, but got stepIndex: ${stepIndex}.`);\n    }\n\n    return this.wizardSteps[stepIndex];\n  }\n\n  /**\n   * Finds the index of the step with the given `stepId`.\n   * If no step with the given `stepId` exists, `-1` is returned\n   *\n   * @param stepId The given step id\n   * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\n   */\n  public getIndexOfStepWithId(stepId: string): number {\n    return this.wizardSteps.findIndex(step => step.stepId === stepId);\n  }\n\n  /**\n   * Finds the index of the given [[WizardStep]] `step`.\n   * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n   *\n   * @param step The given [[WizardStep]]\n   * @returns The found index of `step` or `-1` if the step is not included in the wizard\n   */\n  public getIndexOfStep(step: WizardStep): number {\n    return this.wizardSteps.indexOf(step);\n  }\n\n  /**\n   * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n   *\n   * @param destinationStep The given destination step\n   * @returns The calculated [[MovingDirection]]\n   */\n  public getMovingDirection(destinationStep: number): MovingDirection {\n    let movingDirection: MovingDirection;\n\n    if (destinationStep > this.currentStepIndex) {\n      movingDirection = MovingDirection.Forwards;\n    } else if (destinationStep < this.currentStepIndex) {\n      movingDirection = MovingDirection.Backwards;\n    } else {\n      movingDirection = MovingDirection.Stay;\n    }\n\n    return movingDirection;\n  }\n\n  /**\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n   *\n   * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n   * Navigation by navigation bar is governed by [[isNavigable]].\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\n   */\n  public canGoToStep(destinationIndex: number): Promise<boolean> {\n    return this.navigation.canGoToStep(this, destinationIndex);\n  }\n\n  /**\n   * Tries to transition to the wizard step, as denoted by the given destination index.\n   *\n   * Note: You do not have to call [[canGoToStep]] before calling [[goToStep]].\n   * The [[canGoToStep]] method will be called automatically.\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  public goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    return this.navigation.goToStep(this, destinationIndex, preFinalize, postFinalize);\n  }\n\n  /**\n   * Tries to transition the wizard to the previous step\n   *\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  public goToPreviousStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    return this.navigation.goToStep(this, this.currentStepIndex - 1, preFinalize, postFinalize);\n  }\n\n  /**\n   * Tries to transition the wizard to the next step\n   *\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  public goToNextStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    return this.navigation.goToStep(this, this.currentStepIndex + 1, preFinalize, postFinalize);\n  }\n\n  /**\n   * Checks, whether the wizard step, located at the given index, can be navigated to using the navigation bar.\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns True if the step can be navigated to, false otherwise\n   */\n  public isNavigable(destinationIndex: number): boolean {\n    return this.navigation.isNavigable(this, destinationIndex);\n  }\n\n  /**\n   * Resets the state of this wizard.\n   */\n  public reset(): void {\n    this.navigation.reset(this);\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardComponent} from './wizard.component';\n\n/**\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\n * otherwise it will look like a normal `ul` component.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-navigation-bar',\n  templateUrl: 'wizard-navigation-bar.component.html',\n})\nexport class WizardNavigationBarComponent {\n  /**\n   * The direction in which the wizard steps should be shown in the navigation bar.\n   * This value can be either `left-to-right` or `right-to-left`\n   */\n  @Input()\n  public direction = 'left-to-right';\n\n  /**\n   * Constructor\n   *\n   * @param wizard The state the wizard currently resides in\n   */\n  constructor(public wizard: WizardComponent) {\n  }\n\n  /**\n   * Returns all [[WizardStep]]s contained in the wizard\n   *\n   * @returns An array containing all [[WizardStep]]s\n   */\n  get wizardSteps(): Array<WizardStep> {\n    switch (this.direction) {\n      case 'right-to-left':\n        return this.wizard.wizardSteps.slice().reverse();\n      case 'left-to-right':\n      default:\n        return this.wizard.wizardSteps;\n    }\n  }\n\n  /**\n   * Returns the number of wizard steps, that need to be displaced in the navigation bar\n   *\n   * @returns The number of wizard steps to be displayed\n   */\n  get numberOfWizardSteps(): number {\n    return this.wizard.wizardSteps.length;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `current`\n   */\n  public isCurrent(wizardStep: WizardStep): boolean {\n    return wizardStep.selected;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `editing`\n   */\n  public isEditing(wizardStep: WizardStep): boolean {\n    return wizardStep.editing;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `done`\n   */\n  public isDone(wizardStep: WizardStep): boolean {\n    return wizardStep.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `optional`\n   */\n  public isOptional(wizardStep: WizardStep): boolean {\n    return wizardStep.optional;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `completed` in the navigation bar.\n   *\n   * The `completed` class is only applied to completion steps.\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as `completed`\n   */\n  public isCompleted(wizardStep: WizardStep): boolean {\n    return wizardStep instanceof WizardCompletionStep && this.wizard.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\n   * A wizard step can be navigated to if:\n   * - the step is currently not selected\n   * - the navigation bar isn't disabled\n   * - the navigation mode allows navigation to the step\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as navigable\n   */\n  public isNavigable(wizardStep: WizardStep): boolean {\n    return !wizardStep.selected && !this.wizard.disableNavigationBar &&\n      this.wizard.isNavigable(this.wizard.getIndexOfStep(wizardStep));\n  }\n}\n","import {Component, forwardRef} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-step',\n  templateUrl: 'wizard-step.component.html',\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardStepComponent)}\n  ]\n})\nexport class WizardStepComponent extends WizardStep {\n}\n","import {Directive, EventEmitter, Host, OnInit, Output} from '@angular/core';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awEnableBackLinks]'\n})\nexport class EnableBackLinksDirective implements OnInit {\n  /**\n   * This EventEmitter is called when the step is exited.\n   * The bound method can be used to do cleanup work.\n   */\n  @Output()\n  public stepExit = new EventEmitter<MovingDirection>();\n\n  /**\n   * Constructor\n   *\n   * @param completionStep The wizard completion step, which should be exitable\n   */\n  constructor(@Host() private completionStep: WizardCompletionStep) {\n  }\n\n  /**\n   * Initialization work\n   */\n  public ngOnInit(): void {\n    this.completionStep.canExit = true;\n    this.completionStep.stepExit = this.stepExit;\n  }\n}\n","import {WizardStep} from './wizard-step.interface';\n\n/**\n * An unique identifier of a wizard step\n *\n * @author Marc Arndt\n */\nexport interface StepId {\n  /**\n   * The id of the destination step\n   */\n  stepId: string;\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepId]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepId]] and false otherwise\n */\nexport function isStepId(value: any): value is StepId {\n  return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\n}\n","/**\n * An index of a wizard step.\n * This index is the index of the step inside the wizard.\n * The index is always zero based, i.e. the step with index 0 is the first step of the wizard\n *\n * @author Marc Arndt\n */\nexport interface StepIndex {\n  /**\n   * The index of the destination step\n   */\n  stepIndex: number;\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepIndex]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepIndex]] and false otherwise\n */\nexport function isStepIndex(value: any): value is StepIndex {\n  return value.hasOwnProperty('stepIndex');\n}\n","/**\n * An offset between two steps.\n * This offset can be either positive or negative.\n * A positive offset means, that the offset step is after the other step, while a negative offset means,\n * that the offset step is ahead of the other step.\n *\n * @author Marc Arndt\n */\nexport interface StepOffset {\n  /**\n   * The offset to the destination step\n   */\n  stepOffset: number;\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepOffset]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepOffset]] and false otherwise\n */\nexport function isStepOffset(value: any): value is StepOffset {\n  return value.hasOwnProperty('stepOffset');\n}\n","import {Directive, EventEmitter, HostListener, Input, Optional, Output} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {isStepId, StepId} from '../util/step-id.interface';\nimport {isStepIndex, StepIndex} from '../util/step-index.interface';\nimport {isStepOffset, StepOffset} from '../util/step-offset.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {WizardComponent} from '../components/wizard.component';\n\n/**\n * The `awGoToStep` directive can be used to navigate to a given step.\n * This step can be defined in one of multiple formats\n *\n * ### Syntax\n *\n * With absolute step index:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With unique step id:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With a wizard step object:\n *\n * ```html\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With an offset to the defining step:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awGoToStep]'\n})\nexport class GoToStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n  /**\n   * The destination step, to which the wizard should navigate, after the component, having this directive has been activated.\n   * This destination step can be given either as a [[WizardStep]] containing the step directly,\n   * a [[StepOffset]] between the current step and the `wizardStep`, in which this directive has been used,\n   * or a step index as a number or string\n   */\n    // tslint:disable-next-line:no-input-rename\n  @Input('awGoToStep')\n  public targetStep: WizardStep | StepOffset | StepIndex | StepId;\n\n  /**\n   * Constructor\n   *\n   * @param wizard The wizard component\n   * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\n   */\n  constructor(private wizard: WizardComponent, @Optional() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * Returns the destination step of this directive as an absolute step index inside the wizard\n   *\n   * @returns The index of the destination step\n   * @throws If `targetStep` is of an unknown type an `Error` is thrown\n   */\n  public get destinationStep(): number {\n    let destinationStep: number;\n\n    if (isStepIndex(this.targetStep)) {\n      destinationStep = this.targetStep.stepIndex;\n    } else if (isStepId(this.targetStep)) {\n      destinationStep = this.wizard.getIndexOfStepWithId(this.targetStep.stepId);\n    } else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\n      destinationStep = this.wizard.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\n    } else if (this.targetStep instanceof WizardStep) {\n      destinationStep = this.wizard.getIndexOfStep(this.targetStep);\n    } else {\n      throw new Error(`Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId`);\n    }\n\n    return destinationStep;\n  }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the `destinationStep`\n   */\n  @HostListener('click', ['$event'])\n  public onClick(event: Event): void {\n    this.wizard.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {WizardComponent} from '../components/wizard.component';\n\n/**\n * The `awNextStep` directive can be used to navigate to the next step.\n *\n * ### Syntax\n *\n * ```html\n * <button awNextStep (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awNextStep]'\n})\nexport class NextStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * Constructor\n   *\n   * @param wizard The state of the wizard\n   */\n  constructor(private wizard: WizardComponent) {\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the next step\n   */\n  @HostListener('click', ['$event'])\n  public onClick(event: Event): void {\n    this.wizard.goToNextStep(this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, Host, OnInit} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awOptionalStep]'\n})\nexport class OptionalStepDirective implements OnInit {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]\n   */\n  constructor(@Host() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * Initialization work\n   */\n  public ngOnInit(): void {\n    this.wizardStep.optional = true;\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {WizardComponent} from '../components/wizard.component';\n\n/**\n * The `awPreviousStep` directive can be used to navigate to the previous step.\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\n *\n * ### Syntax\n *\n * ```html\n * <button awPreviousStep>...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awPreviousStep]'\n})\nexport class PreviousStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * Constructor\n   *\n   * @param wizard The state of the wizard\n   */\n  constructor(private wizard: WizardComponent) {\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the previous step\n   */\n  @HostListener('click', ['$event'])\n  public onClick(event: Event): void {\n    this.wizard.goToPreviousStep(this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {WizardComponent} from '../components/wizard.component';\n\n/**\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\n *\n * ### Syntax\n *\n * ```html\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awResetWizard]'\n})\nexport class ResetWizardDirective {\n  /**\n   * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\n   */\n  @Output()\n  public finalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * Constructor\n   *\n   * @param wizard The wizard component\n   */\n  constructor(private wizard: WizardComponent) {\n  }\n\n  /**\n   * Resets the wizard\n   */\n  @HostListener('click', ['$event'])\n  public onClick(event: Event): void {\n    // do some optional cleanup work\n    this.finalize.emit();\n    // reset the wizard to its initial state\n    this.wizard.reset();\n  }\n}\n","import {Directive, Host, OnInit} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awSelectedStep]'\n})\nexport class SelectedStepDirective implements OnInit {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which should be selected by default\n   */\n  constructor(@Host() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * Initialization work\n   */\n  public ngOnInit(): void {\n    this.wizardStep.defaultSelected = true;\n  }\n}\n","import {Directive, forwardRef} from '@angular/core';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </div>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awWizardCompletionStep]',\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepDirective)},\n    {provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepDirective)}\n  ]\n})\nexport class WizardCompletionStepDirective extends WizardCompletionStep {\n}\n","import {Directive, forwardRef} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awWizardStep]',\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardStepDirective)}\n  ]\n})\nexport class WizardStepDirective extends WizardStep {\n}\n","import {Directive, Input, OnChanges, SimpleChanges} from '@angular/core';\n\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {ConfigurableNavigationMode} from '../navigation/configurable-navigation-mode';\nimport {WizardComponent} from '../components/wizard.component';\n\n\n/**\n * The [[awNavigationMode]] directive can be used to customize wizard'd navigation mode.\n *\n * There are several usage options:\n *\n * ### Option 1. Customize the default navigation mode with [[navigateBackward]] and/or [[navigateForward]] inputs.\n *\n * ```html\n * <aw-wizard [awNavigationMode] navigateBackward=\"deny\" navigateForward=\"allow\">...</aw-wizard>\n * ```\n *\n * ### Option 2. Pass in a custom navigation mode\n *\n * ```typescript\n * import { BaseNavigationMode } from 'angular-archwizard'\n *\n * class CustomNavigationMode extends BaseNavigationMode {\n *\n *   // ...\n * }\n * ```\n *\n * ```typescript\n * @Component({\n *   // ...\n * })\n * class MyComponent {\n *\n *   navigationMode = new CustomNavigationMode();\n * }\n * ```\n *\n * ```html\n * <aw-wizard [awNavigationMode]=\"navigationMode\">...</aw-wizard>\n * ```\n *\n * ### Additional Notes\n *\n * - Specifying a custom navigation mode takes priority over [[navigateBackward]] and [[navigateForward]] inputs\n *\n * - Omitting the [[awNavigationMode]] directive or, equally, specifying just [[awNavigationMode]] without\n *   any inputs or parameters causes the wizard to use the default \"strict\" navigation mode equivalent to\n *\n * ```html\n * <aw-wizard [awNavigationMode] navigateBackward=\"deny\" navigateForward=\"allow\">...</aw-wizard>\n * ````\n */\n@Directive({\n  selector: '[awNavigationMode]',\n})\nexport class NavigationModeDirective implements OnChanges {\n\n  /**\n   * Custom navigation mode instance (optional).\n   */\n  @Input()\n  public awNavigationMode: NavigationMode|null;\n\n  /**\n   * A parameter for the default navigation mode.  Controls whether wizard steps before the current step are navigable:\n   *\n   * - `navigateBackward=\"deny\"` -- the steps are not navigable\n   * - `navigateBackward=\"allow\"` -- the steps are navigable\n   */\n  @Input()\n  public navigateBackward: 'allow'|'deny'|null;\n\n  /**\n   * A parameter for the default navigation mode.  Controls whether wizard steps after the current step are navigable:\n   *\n   * - `navigateForward=\"deny\"` -- the steps are not navigable\n   * - `navigateForward=\"allow\"` -- the steps are navigable\n   * - `navigateForward=\"visited\"` -- a step is navigable iff it was already visited before\n   */\n  @Input()\n  public navigateForward: 'allow'|'deny'|'visited'|null;\n\n  constructor(private wizard: WizardComponent) { }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    this.wizard.navigation = this.getNavigationMode();\n  }\n\n  private getNavigationMode(): NavigationMode {\n    if (this.awNavigationMode) {\n      return this.awNavigationMode;\n    }\n    return new ConfigurableNavigationMode(this.navigateBackward, this.navigateForward);\n  }\n\n}\n","import {Directive, Host, Input, OnInit} from '@angular/core';\r\nimport {WizardStep} from '../util/wizard-step.interface';\r\n\r\n/**\r\n * The `awCompletedStep` directive can be used to make a wizard step initially completed.\r\n *\r\n * Initially completed steps are shown as completed when the wizard is presented to the user.\r\n *\r\n * A typical use case is to make a step initially completed if it is automatically filled with some derived/predefined information.\r\n *\r\n * ### Syntax\r\n *\r\n * ```html\r\n * <aw-wizard-step awCompletedStep>\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * An optional boolean condition can be specified:\r\n *\r\n * ```html\r\n * <aw-wizard-step [awCompletedStep]=\"shouldBeCompleted\">\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * ```html\r\n * <aw-wizard-step stepTitle=\"First step\" [awCompletedStep]=\"firstStepPrefilled\">\r\n *     ...\r\n * </aw-wizard-step>\r\n * ```\r\n */\r\n@Directive({\r\n  selector: '[awCompletedStep]'\r\n})\r\nexport class CompletedStepDirective implements OnInit {\r\n\r\n  // tslint:disable-next-line:no-input-rename\r\n  @Input('awCompletedStep')\r\n  public initiallyCompleted = true;\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param wizardStep The wizard step, which contains this [[CompletedStepDirective]]\r\n   */\r\n  constructor(@Host() private wizardStep: WizardStep) {\r\n  }\r\n\r\n  /**\r\n   * Initialization work\r\n   */\r\n  public ngOnInit(): void {\r\n    // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).\r\n    this.wizardStep.initiallyCompleted = this.initiallyCompleted || this.initiallyCompleted as any === '';\r\n  }\r\n}\r\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {WizardCompletionStepComponent} from './components/wizard-completion-step.component';\nimport {WizardNavigationBarComponent} from './components/wizard-navigation-bar.component';\nimport {WizardStepComponent} from './components/wizard-step.component';\nimport {WizardComponent} from './components/wizard.component';\nimport {EnableBackLinksDirective} from './directives/enable-back-links.directive';\nimport {GoToStepDirective} from './directives/go-to-step.directive';\nimport {NextStepDirective} from './directives/next-step.directive';\nimport {OptionalStepDirective} from './directives/optional-step.directive';\nimport {PreviousStepDirective} from './directives/previous-step.directive';\nimport {ResetWizardDirective} from './directives/reset-wizard.directive';\nimport {SelectedStepDirective} from './directives/selected-step.directive';\nimport {WizardCompletionStepDirective} from './directives/wizard-completion-step.directive';\nimport {WizardStepSymbolDirective} from './directives/wizard-step-symbol.directive';\nimport {WizardStepTitleDirective} from './directives/wizard-step-title.directive';\nimport {WizardStepDirective} from './directives/wizard-step.directive';\nimport {NavigationModeDirective} from './directives/navigation-mode.directive';\nimport {CompletedStepDirective} from './directives/completed-step.directive';\n\n\n/**\n * The module defining all the content inside `angular-archwizard`\n *\n * @author Marc Arndt\n */\n@NgModule({\n  declarations: [\n    WizardComponent,\n    WizardStepComponent,\n    WizardNavigationBarComponent,\n    WizardCompletionStepComponent,\n    GoToStepDirective,\n    NextStepDirective,\n    PreviousStepDirective,\n    OptionalStepDirective,\n    WizardStepSymbolDirective,\n    WizardStepTitleDirective,\n    EnableBackLinksDirective,\n    WizardStepDirective,\n    WizardCompletionStepDirective,\n    SelectedStepDirective,\n    ResetWizardDirective,\n    NavigationModeDirective,\n    CompletedStepDirective,\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    WizardComponent,\n    WizardStepComponent,\n    WizardNavigationBarComponent,\n    WizardCompletionStepComponent,\n    GoToStepDirective,\n    NextStepDirective,\n    PreviousStepDirective,\n    OptionalStepDirective,\n    WizardStepSymbolDirective,\n    WizardStepTitleDirective,\n    EnableBackLinksDirective,\n    WizardStepDirective,\n    WizardCompletionStepDirective,\n    SelectedStepDirective,\n    ResetWizardDirective,\n    NavigationModeDirective,\n    CompletedStepDirective,\n  ]\n})\nexport class ArchwizardModule {\n  /* istanbul ignore next */\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ArchwizardModule,\n      providers: [\n        // Nothing here yet\n      ]\n    };\n  }\n}\n"]}