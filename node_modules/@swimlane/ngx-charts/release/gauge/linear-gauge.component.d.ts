import { ElementRef, AfterViewInit } from '@angular/core';
import { BaseChartComponent } from '../common/base-chart.component';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import * as ɵngcc0 from '@angular/core';
export declare class LinearGaugeComponent extends BaseChartComponent implements AfterViewInit {
    min: number;
    max: number;
    value: number;
    units: string;
    previousValue: any;
    valueFormatting: any;
    valueTextEl: ElementRef;
    unitsTextEl: ElementRef;
    dims: ViewDimensions;
    valueDomain: any;
    valueScale: any;
    colors: ColorHelper;
    transform: string;
    margin: any[];
    transformLine: string;
    valueResizeScale: number;
    unitsResizeScale: number;
    valueTextTransform: string;
    valueTranslate: string;
    unitsTextTransform: string;
    unitsTranslate: string;
    displayValue: string;
    hasPreviousValue: boolean;
    ngAfterViewInit(): void;
    update(): void;
    getValueDomain(): any[];
    getValueScale(): any;
    getDisplayValue(): string;
    scaleText(element: any, repeat?: boolean): void;
    onClick(): void;
    setColors(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LinearGaugeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LinearGaugeComponent, "ngx-charts-linear-gauge", never, { "max": "max"; "min": "min"; "value": "value"; "units": "units"; "previousValue": "previousValue"; "valueFormatting": "valueFormatting"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZWFyLWdhdWdlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJsaW5lYXItZ2F1Z2UuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJhc2VDaGFydENvbXBvbmVudCB9IGZyb20gJy4uL2NvbW1vbi9iYXNlLWNoYXJ0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFZpZXdEaW1lbnNpb25zIH0gZnJvbSAnLi4vY29tbW9uL3ZpZXctZGltZW5zaW9ucy5oZWxwZXInO1xyXG5pbXBvcnQgeyBDb2xvckhlbHBlciB9IGZyb20gJy4uL2NvbW1vbi9jb2xvci5oZWxwZXInO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMaW5lYXJHYXVnZUNvbXBvbmVudCBleHRlbmRzIEJhc2VDaGFydENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xyXG4gICAgbWluOiBudW1iZXI7XHJcbiAgICBtYXg6IG51bWJlcjtcclxuICAgIHZhbHVlOiBudW1iZXI7XHJcbiAgICB1bml0czogc3RyaW5nO1xyXG4gICAgcHJldmlvdXNWYWx1ZTogYW55O1xyXG4gICAgdmFsdWVGb3JtYXR0aW5nOiBhbnk7XHJcbiAgICB2YWx1ZVRleHRFbDogRWxlbWVudFJlZjtcclxuICAgIHVuaXRzVGV4dEVsOiBFbGVtZW50UmVmO1xyXG4gICAgZGltczogVmlld0RpbWVuc2lvbnM7XHJcbiAgICB2YWx1ZURvbWFpbjogYW55O1xyXG4gICAgdmFsdWVTY2FsZTogYW55O1xyXG4gICAgY29sb3JzOiBDb2xvckhlbHBlcjtcclxuICAgIHRyYW5zZm9ybTogc3RyaW5nO1xyXG4gICAgbWFyZ2luOiBhbnlbXTtcclxuICAgIHRyYW5zZm9ybUxpbmU6IHN0cmluZztcclxuICAgIHZhbHVlUmVzaXplU2NhbGU6IG51bWJlcjtcclxuICAgIHVuaXRzUmVzaXplU2NhbGU6IG51bWJlcjtcclxuICAgIHZhbHVlVGV4dFRyYW5zZm9ybTogc3RyaW5nO1xyXG4gICAgdmFsdWVUcmFuc2xhdGU6IHN0cmluZztcclxuICAgIHVuaXRzVGV4dFRyYW5zZm9ybTogc3RyaW5nO1xyXG4gICAgdW5pdHNUcmFuc2xhdGU6IHN0cmluZztcclxuICAgIGRpc3BsYXlWYWx1ZTogc3RyaW5nO1xyXG4gICAgaGFzUHJldmlvdXNWYWx1ZTogYm9vbGVhbjtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgdXBkYXRlKCk6IHZvaWQ7XHJcbiAgICBnZXRWYWx1ZURvbWFpbigpOiBhbnlbXTtcclxuICAgIGdldFZhbHVlU2NhbGUoKTogYW55O1xyXG4gICAgZ2V0RGlzcGxheVZhbHVlKCk6IHN0cmluZztcclxuICAgIHNjYWxlVGV4dChlbGVtZW50OiBhbnksIHJlcGVhdD86IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgb25DbGljaygpOiB2b2lkO1xyXG4gICAgc2V0Q29sb3JzKCk6IHZvaWQ7XHJcbn1cclxuIl19