import { EventEmitter, ElementRef, OnChanges, ChangeDetectorRef, SimpleChanges } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class Timeline implements OnChanges {
    private cd;
    view: any;
    state: any;
    results: any;
    scheme: any;
    customColors: any;
    legend: any;
    miniChart: any;
    autoScale: any;
    scaleType: any;
    height: number;
    select: EventEmitter<{}>;
    onDomainChange: EventEmitter<{}>;
    element: HTMLElement;
    dims: any;
    xDomain: any[];
    xScale: any;
    brush: any;
    transform: string;
    initialized: boolean;
    filterId: any;
    filter: any;
    constructor(element: ElementRef, cd: ChangeDetectorRef);
    ngOnChanges(changes: SimpleChanges): void;
    update(): void;
    getXDomain(): any[];
    getXScale(): any;
    addBrush(): void;
    updateBrush(): void;
    getDims(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Timeline, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Timeline, "g[ngx-charts-timeline]", never, { "height": "height"; "view": "view"; "state": "state"; "results": "results"; "scheme": "scheme"; "customColors": "customColors"; "legend": "legend"; "miniChart": "miniChart"; "autoScale": "autoScale"; "scaleType": "scaleType"; }, { "select": "select"; "onDomainChange": "onDomainChange"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRpbWVsaW5lLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgT25DaGFuZ2VzLCBDaGFuZ2VEZXRlY3RvclJlZiwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUaW1lbGluZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcbiAgICBwcml2YXRlIGNkO1xyXG4gICAgdmlldzogYW55O1xyXG4gICAgc3RhdGU6IGFueTtcclxuICAgIHJlc3VsdHM6IGFueTtcclxuICAgIHNjaGVtZTogYW55O1xyXG4gICAgY3VzdG9tQ29sb3JzOiBhbnk7XHJcbiAgICBsZWdlbmQ6IGFueTtcclxuICAgIG1pbmlDaGFydDogYW55O1xyXG4gICAgYXV0b1NjYWxlOiBhbnk7XHJcbiAgICBzY2FsZVR5cGU6IGFueTtcclxuICAgIGhlaWdodDogbnVtYmVyO1xyXG4gICAgc2VsZWN0OiBFdmVudEVtaXR0ZXI8e30+O1xyXG4gICAgb25Eb21haW5DaGFuZ2U6IEV2ZW50RW1pdHRlcjx7fT47XHJcbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgIGRpbXM6IGFueTtcclxuICAgIHhEb21haW46IGFueVtdO1xyXG4gICAgeFNjYWxlOiBhbnk7XHJcbiAgICBicnVzaDogYW55O1xyXG4gICAgdHJhbnNmb3JtOiBzdHJpbmc7XHJcbiAgICBpbml0aWFsaXplZDogYm9vbGVhbjtcclxuICAgIGZpbHRlcklkOiBhbnk7XHJcbiAgICBmaWx0ZXI6IGFueTtcclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZik7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIHVwZGF0ZSgpOiB2b2lkO1xyXG4gICAgZ2V0WERvbWFpbigpOiBhbnlbXTtcclxuICAgIGdldFhTY2FsZSgpOiBhbnk7XHJcbiAgICBhZGRCcnVzaCgpOiB2b2lkO1xyXG4gICAgdXBkYXRlQnJ1c2goKTogdm9pZDtcclxuICAgIGdldERpbXMoKTogYW55O1xyXG59XHJcbiJdfQ==