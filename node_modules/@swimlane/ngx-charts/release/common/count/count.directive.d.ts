import { EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';
/**
 * Count up component
 *
 * Loosely inspired by:
 *  - https://github.com/izupet/angular2-counto
 *  - https://inorganik.github.io/countUp.js/
 *
 * @export
 * @class CountUpDirective
 */
import * as ɵngcc0 from '@angular/core';
export declare class CountUpDirective implements OnDestroy {
    private cd;
    countDuration: number;
    countPrefix: string;
    countSuffix: string;
    valueFormatting: any;
    countDecimals: number;
    countTo: any;
    countFrom: any;
    countChange: EventEmitter<{}>;
    countFinish: EventEmitter<{}>;
    nativeElement: any;
    value: any;
    formattedValue: string;
    private animationReq;
    private _countDecimals;
    private _countTo;
    private _countFrom;
    constructor(cd: ChangeDetectorRef, element: ElementRef);
    ngOnDestroy(): void;
    start(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CountUpDirective, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CountUpDirective, "[ngx-charts-count-up]", never, { "countDuration": "countDuration"; "countPrefix": "countPrefix"; "countSuffix": "countSuffix"; "countDecimals": "countDecimals"; "countTo": "countTo"; "countFrom": "countFrom"; "valueFormatting": "valueFormatting"; }, { "countChange": "countChange"; "countFinish": "countFinish"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImNvdW50LmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uRGVzdHJveSwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG4vKipcclxuICogQ291bnQgdXAgY29tcG9uZW50XHJcbiAqXHJcbiAqIExvb3NlbHkgaW5zcGlyZWQgYnk6XHJcbiAqICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9penVwZXQvYW5ndWxhcjItY291bnRvXHJcbiAqICAtIGh0dHBzOi8vaW5vcmdhbmlrLmdpdGh1Yi5pby9jb3VudFVwLmpzL1xyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBDb3VudFVwRGlyZWN0aXZlXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDb3VudFVwRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuICAgIHByaXZhdGUgY2Q7XHJcbiAgICBjb3VudER1cmF0aW9uOiBudW1iZXI7XHJcbiAgICBjb3VudFByZWZpeDogc3RyaW5nO1xyXG4gICAgY291bnRTdWZmaXg6IHN0cmluZztcclxuICAgIHZhbHVlRm9ybWF0dGluZzogYW55O1xyXG4gICAgY291bnREZWNpbWFsczogbnVtYmVyO1xyXG4gICAgY291bnRUbzogYW55O1xyXG4gICAgY291bnRGcm9tOiBhbnk7XHJcbiAgICBjb3VudENoYW5nZTogRXZlbnRFbWl0dGVyPHt9PjtcclxuICAgIGNvdW50RmluaXNoOiBFdmVudEVtaXR0ZXI8e30+O1xyXG4gICAgbmF0aXZlRWxlbWVudDogYW55O1xyXG4gICAgdmFsdWU6IGFueTtcclxuICAgIGZvcm1hdHRlZFZhbHVlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGFuaW1hdGlvblJlcTtcclxuICAgIHByaXZhdGUgX2NvdW50RGVjaW1hbHM7XHJcbiAgICBwcml2YXRlIF9jb3VudFRvO1xyXG4gICAgcHJpdmF0ZSBfY291bnRGcm9tO1xyXG4gICAgY29uc3RydWN0b3IoY2Q6IENoYW5nZURldGVjdG9yUmVmLCBlbGVtZW50OiBFbGVtZW50UmVmKTtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBzdGFydCgpOiB2b2lkO1xyXG59XHJcbiJdfQ==