import { ElementRef, NgZone, ChangeDetectorRef, EventEmitter, AfterViewInit, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';
import { VisibilityObserver } from '../utils';
import * as ɵngcc0 from '@angular/core';
export declare class BaseChartComponent implements OnChanges, AfterViewInit, OnDestroy {
    protected chartElement: ElementRef;
    protected zone: NgZone;
    protected cd: ChangeDetectorRef;
    results: any;
    view: [number, number];
    scheme: any;
    schemeType: string;
    customColors: any;
    animations: boolean;
    select: EventEmitter<{}>;
    width: number;
    height: number;
    resizeSubscription: any;
    visibilityObserver: VisibilityObserver;
    constructor(chartElement: ElementRef, zone: NgZone, cd: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    update(): void;
    getContainerDims(): any;
    /**
     * Converts all date objects that appear as name
     * into formatted date strings
     */
    formatDates(): void;
    protected unbindEvents(): void;
    private bindWindowResizeEvent;
    /**
     * Clones the data into a new object
     *
     * @private
     * @param {any} data
     * @returns {*}
     *
     * @memberOf BaseChart
     */
    private cloneData;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BaseChartComponent, "base-chart", never, { "scheme": "scheme"; "schemeType": "schemeType"; "animations": "animations"; "results": "results"; "view": "view"; "customColors": "customColors"; }, { "select": "select"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jaGFydC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYmFzZS1jaGFydC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgTmdab25lLCBDaGFuZ2VEZXRlY3RvclJlZiwgRXZlbnRFbWl0dGVyLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBWaXNpYmlsaXR5T2JzZXJ2ZXIgfSBmcm9tICcuLi91dGlscyc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEJhc2VDaGFydENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcclxuICAgIHByb3RlY3RlZCBjaGFydEVsZW1lbnQ6IEVsZW1lbnRSZWY7XHJcbiAgICBwcm90ZWN0ZWQgem9uZTogTmdab25lO1xyXG4gICAgcHJvdGVjdGVkIGNkOiBDaGFuZ2VEZXRlY3RvclJlZjtcclxuICAgIHJlc3VsdHM6IGFueTtcclxuICAgIHZpZXc6IFtudW1iZXIsIG51bWJlcl07XHJcbiAgICBzY2hlbWU6IGFueTtcclxuICAgIHNjaGVtZVR5cGU6IHN0cmluZztcclxuICAgIGN1c3RvbUNvbG9yczogYW55O1xyXG4gICAgYW5pbWF0aW9uczogYm9vbGVhbjtcclxuICAgIHNlbGVjdDogRXZlbnRFbWl0dGVyPHt9PjtcclxuICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICBoZWlnaHQ6IG51bWJlcjtcclxuICAgIHJlc2l6ZVN1YnNjcmlwdGlvbjogYW55O1xyXG4gICAgdmlzaWJpbGl0eU9ic2VydmVyOiBWaXNpYmlsaXR5T2JzZXJ2ZXI7XHJcbiAgICBjb25zdHJ1Y3RvcihjaGFydEVsZW1lbnQ6IEVsZW1lbnRSZWYsIHpvbmU6IE5nWm9uZSwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xyXG4gICAgdXBkYXRlKCk6IHZvaWQ7XHJcbiAgICBnZXRDb250YWluZXJEaW1zKCk6IGFueTtcclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgYWxsIGRhdGUgb2JqZWN0cyB0aGF0IGFwcGVhciBhcyBuYW1lXHJcbiAgICAgKiBpbnRvIGZvcm1hdHRlZCBkYXRlIHN0cmluZ3NcclxuICAgICAqL1xyXG4gICAgZm9ybWF0RGF0ZXMoKTogdm9pZDtcclxuICAgIHByb3RlY3RlZCB1bmJpbmRFdmVudHMoKTogdm9pZDtcclxuICAgIHByaXZhdGUgYmluZFdpbmRvd1Jlc2l6ZUV2ZW50O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9uZXMgdGhlIGRhdGEgaW50byBhIG5ldyBvYmplY3RcclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHBhcmFtIHthbnl9IGRhdGFcclxuICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJPZiBCYXNlQ2hhcnRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjbG9uZURhdGE7XHJcbn1cclxuIl19