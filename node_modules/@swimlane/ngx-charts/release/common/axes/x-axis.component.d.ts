import { SimpleChanges, EventEmitter, OnChanges } from '@angular/core';
import { XAxisTicksComponent } from './x-axis-ticks.component';
import * as ɵngcc0 from '@angular/core';
export declare class XAxisComponent implements OnChanges {
    xScale: any;
    dims: any;
    trimTicks: boolean;
    rotateTicks: boolean;
    maxTickLength: number;
    tickFormatting: any;
    showGridLines: boolean;
    showLabel: any;
    labelText: any;
    ticks: any[];
    xAxisTickInterval: any;
    xAxisTickCount: any;
    xOrient: string;
    xAxisOffset: number;
    dimensionsChanged: EventEmitter<{}>;
    xAxisClassName: string;
    tickArguments: any;
    transform: any;
    labelOffset: number;
    fill: string;
    stroke: string;
    tickStroke: string;
    strokeWidth: string;
    padding: number;
    ticksComponent: XAxisTicksComponent;
    ngOnChanges(changes: SimpleChanges): void;
    update(): void;
    emitTicksHeight({ height }: {
        height: any;
    }): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<XAxisComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<XAxisComponent, "g[ngx-charts-x-axis]", never, { "rotateTicks": "rotateTicks"; "showGridLines": "showGridLines"; "xOrient": "xOrient"; "xAxisOffset": "xAxisOffset"; "xScale": "xScale"; "dims": "dims"; "trimTicks": "trimTicks"; "maxTickLength": "maxTickLength"; "tickFormatting": "tickFormatting"; "showLabel": "showLabel"; "labelText": "labelText"; "ticks": "ticks"; "xAxisTickInterval": "xAxisTickInterval"; "xAxisTickCount": "xAxisTickCount"; }, { "dimensionsChanged": "dimensionsChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieC1heGlzLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ4LWF4aXMuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaW1wbGVDaGFuZ2VzLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBYQXhpc1RpY2tzQ29tcG9uZW50IH0gZnJvbSAnLi94LWF4aXMtdGlja3MuY29tcG9uZW50JztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgWEF4aXNDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG4gICAgeFNjYWxlOiBhbnk7XHJcbiAgICBkaW1zOiBhbnk7XHJcbiAgICB0cmltVGlja3M6IGJvb2xlYW47XHJcbiAgICByb3RhdGVUaWNrczogYm9vbGVhbjtcclxuICAgIG1heFRpY2tMZW5ndGg6IG51bWJlcjtcclxuICAgIHRpY2tGb3JtYXR0aW5nOiBhbnk7XHJcbiAgICBzaG93R3JpZExpbmVzOiBib29sZWFuO1xyXG4gICAgc2hvd0xhYmVsOiBhbnk7XHJcbiAgICBsYWJlbFRleHQ6IGFueTtcclxuICAgIHRpY2tzOiBhbnlbXTtcclxuICAgIHhBeGlzVGlja0ludGVydmFsOiBhbnk7XHJcbiAgICB4QXhpc1RpY2tDb3VudDogYW55O1xyXG4gICAgeE9yaWVudDogc3RyaW5nO1xyXG4gICAgeEF4aXNPZmZzZXQ6IG51bWJlcjtcclxuICAgIGRpbWVuc2lvbnNDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8e30+O1xyXG4gICAgeEF4aXNDbGFzc05hbWU6IHN0cmluZztcclxuICAgIHRpY2tBcmd1bWVudHM6IGFueTtcclxuICAgIHRyYW5zZm9ybTogYW55O1xyXG4gICAgbGFiZWxPZmZzZXQ6IG51bWJlcjtcclxuICAgIGZpbGw6IHN0cmluZztcclxuICAgIHN0cm9rZTogc3RyaW5nO1xyXG4gICAgdGlja1N0cm9rZTogc3RyaW5nO1xyXG4gICAgc3Ryb2tlV2lkdGg6IHN0cmluZztcclxuICAgIHBhZGRpbmc6IG51bWJlcjtcclxuICAgIHRpY2tzQ29tcG9uZW50OiBYQXhpc1RpY2tzQ29tcG9uZW50O1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICB1cGRhdGUoKTogdm9pZDtcclxuICAgIGVtaXRUaWNrc0hlaWdodCh7IGhlaWdodCB9OiB7XHJcbiAgICAgICAgaGVpZ2h0OiBhbnk7XHJcbiAgICB9KTogdm9pZDtcclxufVxyXG4iXX0=