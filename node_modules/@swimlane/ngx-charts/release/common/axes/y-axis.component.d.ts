import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { YAxisTicksComponent } from './y-axis-ticks.component';
import * as ɵngcc0 from '@angular/core';
export declare class YAxisComponent implements OnChanges {
    yScale: any;
    dims: any;
    trimTicks: boolean;
    maxTickLength: number;
    tickFormatting: any;
    ticks: any[];
    showGridLines: boolean;
    showLabel: any;
    labelText: any;
    yAxisTickInterval: any;
    yAxisTickCount: any;
    yOrient: string;
    referenceLines: any;
    showRefLines: any;
    showRefLabels: any;
    yAxisOffset: number;
    dimensionsChanged: EventEmitter<{}>;
    yAxisClassName: string;
    tickArguments: any;
    offset: any;
    transform: any;
    labelOffset: number;
    fill: string;
    stroke: string;
    tickStroke: string;
    strokeWidth: number;
    padding: number;
    ticksComponent: YAxisTicksComponent;
    ngOnChanges(changes: SimpleChanges): void;
    update(): void;
    emitTicksWidth({ width }: {
        width: any;
    }): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<YAxisComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<YAxisComponent, "g[ngx-charts-y-axis]", never, { "showGridLines": "showGridLines"; "yOrient": "yOrient"; "yAxisOffset": "yAxisOffset"; "yScale": "yScale"; "dims": "dims"; "trimTicks": "trimTicks"; "maxTickLength": "maxTickLength"; "tickFormatting": "tickFormatting"; "ticks": "ticks"; "showLabel": "showLabel"; "labelText": "labelText"; "yAxisTickInterval": "yAxisTickInterval"; "yAxisTickCount": "yAxisTickCount"; "referenceLines": "referenceLines"; "showRefLines": "showRefLines"; "showRefLabels": "showRefLabels"; }, { "dimensionsChanged": "dimensionsChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieS1heGlzLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ5LWF4aXMuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBZQXhpc1RpY2tzQ29tcG9uZW50IH0gZnJvbSAnLi95LWF4aXMtdGlja3MuY29tcG9uZW50JztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgWUF4aXNDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG4gICAgeVNjYWxlOiBhbnk7XHJcbiAgICBkaW1zOiBhbnk7XHJcbiAgICB0cmltVGlja3M6IGJvb2xlYW47XHJcbiAgICBtYXhUaWNrTGVuZ3RoOiBudW1iZXI7XHJcbiAgICB0aWNrRm9ybWF0dGluZzogYW55O1xyXG4gICAgdGlja3M6IGFueVtdO1xyXG4gICAgc2hvd0dyaWRMaW5lczogYm9vbGVhbjtcclxuICAgIHNob3dMYWJlbDogYW55O1xyXG4gICAgbGFiZWxUZXh0OiBhbnk7XHJcbiAgICB5QXhpc1RpY2tJbnRlcnZhbDogYW55O1xyXG4gICAgeUF4aXNUaWNrQ291bnQ6IGFueTtcclxuICAgIHlPcmllbnQ6IHN0cmluZztcclxuICAgIHJlZmVyZW5jZUxpbmVzOiBhbnk7XHJcbiAgICBzaG93UmVmTGluZXM6IGFueTtcclxuICAgIHNob3dSZWZMYWJlbHM6IGFueTtcclxuICAgIHlBeGlzT2Zmc2V0OiBudW1iZXI7XHJcbiAgICBkaW1lbnNpb25zQ2hhbmdlZDogRXZlbnRFbWl0dGVyPHt9PjtcclxuICAgIHlBeGlzQ2xhc3NOYW1lOiBzdHJpbmc7XHJcbiAgICB0aWNrQXJndW1lbnRzOiBhbnk7XHJcbiAgICBvZmZzZXQ6IGFueTtcclxuICAgIHRyYW5zZm9ybTogYW55O1xyXG4gICAgbGFiZWxPZmZzZXQ6IG51bWJlcjtcclxuICAgIGZpbGw6IHN0cmluZztcclxuICAgIHN0cm9rZTogc3RyaW5nO1xyXG4gICAgdGlja1N0cm9rZTogc3RyaW5nO1xyXG4gICAgc3Ryb2tlV2lkdGg6IG51bWJlcjtcclxuICAgIHBhZGRpbmc6IG51bWJlcjtcclxuICAgIHRpY2tzQ29tcG9uZW50OiBZQXhpc1RpY2tzQ29tcG9uZW50O1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICB1cGRhdGUoKTogdm9pZDtcclxuICAgIGVtaXRUaWNrc1dpZHRoKHsgd2lkdGggfToge1xyXG4gICAgICAgIHdpZHRoOiBhbnk7XHJcbiAgICB9KTogdm9pZDtcclxufVxyXG4iXX0=