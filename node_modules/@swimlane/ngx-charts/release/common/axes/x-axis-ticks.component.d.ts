import { EventEmitter, OnChanges, ElementRef, SimpleChanges, AfterViewInit } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class XAxisTicksComponent implements OnChanges, AfterViewInit {
    scale: any;
    orient: any;
    tickArguments: number[];
    tickValues: any[];
    tickStroke: string;
    trimTicks: boolean;
    maxTickLength: number;
    tickFormatting: any;
    showGridLines: boolean;
    gridLineHeight: any;
    width: any;
    rotateTicks: boolean;
    dimensionsChanged: EventEmitter<{}>;
    verticalSpacing: number;
    rotateLabels: boolean;
    innerTickSize: number;
    outerTickSize: number;
    tickPadding: number;
    textAnchor: string;
    maxTicksLength: number;
    maxAllowedLength: number;
    adjustedScale: any;
    textTransform: any;
    ticks: any;
    tickFormat: (o: any) => any;
    height: number;
    ticksElement: ElementRef;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    updateDims(): void;
    update(): void;
    getRotationAngle(ticks: any): number;
    getTicks(): any;
    getMaxTicks(tickWidth: number): number;
    tickTransform(tick: any): string;
    gridLineTransform(): string;
    tickTrim(label: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<XAxisTicksComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<XAxisTicksComponent, "g[ngx-charts-x-axis-ticks]", never, { "tickArguments": "tickArguments"; "tickStroke": "tickStroke"; "trimTicks": "trimTicks"; "maxTickLength": "maxTickLength"; "showGridLines": "showGridLines"; "rotateTicks": "rotateTicks"; "scale": "scale"; "orient": "orient"; "tickValues": "tickValues"; "tickFormatting": "tickFormatting"; "gridLineHeight": "gridLineHeight"; "width": "width"; }, { "dimensionsChanged": "dimensionsChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieC1heGlzLXRpY2tzLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ4LWF4aXMtdGlja3MuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgRWxlbWVudFJlZiwgU2ltcGxlQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBYQXhpc1RpY2tzQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0IHtcclxuICAgIHNjYWxlOiBhbnk7XHJcbiAgICBvcmllbnQ6IGFueTtcclxuICAgIHRpY2tBcmd1bWVudHM6IG51bWJlcltdO1xyXG4gICAgdGlja1ZhbHVlczogYW55W107XHJcbiAgICB0aWNrU3Ryb2tlOiBzdHJpbmc7XHJcbiAgICB0cmltVGlja3M6IGJvb2xlYW47XHJcbiAgICBtYXhUaWNrTGVuZ3RoOiBudW1iZXI7XHJcbiAgICB0aWNrRm9ybWF0dGluZzogYW55O1xyXG4gICAgc2hvd0dyaWRMaW5lczogYm9vbGVhbjtcclxuICAgIGdyaWRMaW5lSGVpZ2h0OiBhbnk7XHJcbiAgICB3aWR0aDogYW55O1xyXG4gICAgcm90YXRlVGlja3M6IGJvb2xlYW47XHJcbiAgICBkaW1lbnNpb25zQ2hhbmdlZDogRXZlbnRFbWl0dGVyPHt9PjtcclxuICAgIHZlcnRpY2FsU3BhY2luZzogbnVtYmVyO1xyXG4gICAgcm90YXRlTGFiZWxzOiBib29sZWFuO1xyXG4gICAgaW5uZXJUaWNrU2l6ZTogbnVtYmVyO1xyXG4gICAgb3V0ZXJUaWNrU2l6ZTogbnVtYmVyO1xyXG4gICAgdGlja1BhZGRpbmc6IG51bWJlcjtcclxuICAgIHRleHRBbmNob3I6IHN0cmluZztcclxuICAgIG1heFRpY2tzTGVuZ3RoOiBudW1iZXI7XHJcbiAgICBtYXhBbGxvd2VkTGVuZ3RoOiBudW1iZXI7XHJcbiAgICBhZGp1c3RlZFNjYWxlOiBhbnk7XHJcbiAgICB0ZXh0VHJhbnNmb3JtOiBhbnk7XHJcbiAgICB0aWNrczogYW55O1xyXG4gICAgdGlja0Zvcm1hdDogKG86IGFueSkgPT4gYW55O1xyXG4gICAgaGVpZ2h0OiBudW1iZXI7XHJcbiAgICB0aWNrc0VsZW1lbnQ6IEVsZW1lbnRSZWY7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgdXBkYXRlRGltcygpOiB2b2lkO1xyXG4gICAgdXBkYXRlKCk6IHZvaWQ7XHJcbiAgICBnZXRSb3RhdGlvbkFuZ2xlKHRpY2tzOiBhbnkpOiBudW1iZXI7XHJcbiAgICBnZXRUaWNrcygpOiBhbnk7XHJcbiAgICBnZXRNYXhUaWNrcyh0aWNrV2lkdGg6IG51bWJlcik6IG51bWJlcjtcclxuICAgIHRpY2tUcmFuc2Zvcm0odGljazogYW55KTogc3RyaW5nO1xyXG4gICAgZ3JpZExpbmVUcmFuc2Zvcm0oKTogc3RyaW5nO1xyXG4gICAgdGlja1RyaW0obGFiZWw6IHN0cmluZyk6IHN0cmluZztcclxufVxyXG4iXX0=