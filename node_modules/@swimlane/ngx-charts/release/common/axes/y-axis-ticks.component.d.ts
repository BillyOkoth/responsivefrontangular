import { OnChanges, ElementRef, EventEmitter, AfterViewInit, SimpleChanges } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class YAxisTicksComponent implements OnChanges, AfterViewInit {
    scale: any;
    orient: any;
    tickArguments: number[];
    tickValues: any[];
    tickStroke: string;
    trimTicks: boolean;
    maxTickLength: number;
    tickFormatting: any;
    showGridLines: boolean;
    gridLineWidth: any;
    height: any;
    referenceLines: any;
    showRefLabels: boolean;
    showRefLines: boolean;
    dimensionsChanged: EventEmitter<{}>;
    innerTickSize: any;
    tickPadding: any;
    tickSpacing: any;
    verticalSpacing: number;
    textAnchor: any;
    dy: any;
    x1: any;
    x2: any;
    y1: any;
    y2: any;
    adjustedScale: any;
    transform: (o: any) => string;
    tickFormat: (o: any) => string;
    ticks: any;
    width: number;
    outerTickSize: number;
    rotateLabels: boolean;
    refMax: number;
    refMin: number;
    referenceLineLength: number;
    referenceAreaPath: string;
    ticksElement: ElementRef;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    updateDims(): void;
    update(): void;
    setReferencelines(): void;
    getTicks(): any;
    getMaxTicks(tickHeight: number): number;
    tickTransform(tick: any): string;
    gridLineTransform(): string;
    tickTrim(label: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<YAxisTicksComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<YAxisTicksComponent, "g[ngx-charts-y-axis-ticks]", never, { "tickArguments": "tickArguments"; "tickStroke": "tickStroke"; "trimTicks": "trimTicks"; "maxTickLength": "maxTickLength"; "showGridLines": "showGridLines"; "showRefLabels": "showRefLabels"; "showRefLines": "showRefLines"; "scale": "scale"; "orient": "orient"; "tickValues": "tickValues"; "tickFormatting": "tickFormatting"; "gridLineWidth": "gridLineWidth"; "height": "height"; "referenceLines": "referenceLines"; }, { "dimensionsChanged": "dimensionsChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieS1heGlzLXRpY2tzLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ5LWF4aXMtdGlja3MuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uQ2hhbmdlcywgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBBZnRlclZpZXdJbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFlBeGlzVGlja3NDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQge1xyXG4gICAgc2NhbGU6IGFueTtcclxuICAgIG9yaWVudDogYW55O1xyXG4gICAgdGlja0FyZ3VtZW50czogbnVtYmVyW107XHJcbiAgICB0aWNrVmFsdWVzOiBhbnlbXTtcclxuICAgIHRpY2tTdHJva2U6IHN0cmluZztcclxuICAgIHRyaW1UaWNrczogYm9vbGVhbjtcclxuICAgIG1heFRpY2tMZW5ndGg6IG51bWJlcjtcclxuICAgIHRpY2tGb3JtYXR0aW5nOiBhbnk7XHJcbiAgICBzaG93R3JpZExpbmVzOiBib29sZWFuO1xyXG4gICAgZ3JpZExpbmVXaWR0aDogYW55O1xyXG4gICAgaGVpZ2h0OiBhbnk7XHJcbiAgICByZWZlcmVuY2VMaW5lczogYW55O1xyXG4gICAgc2hvd1JlZkxhYmVsczogYm9vbGVhbjtcclxuICAgIHNob3dSZWZMaW5lczogYm9vbGVhbjtcclxuICAgIGRpbWVuc2lvbnNDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8e30+O1xyXG4gICAgaW5uZXJUaWNrU2l6ZTogYW55O1xyXG4gICAgdGlja1BhZGRpbmc6IGFueTtcclxuICAgIHRpY2tTcGFjaW5nOiBhbnk7XHJcbiAgICB2ZXJ0aWNhbFNwYWNpbmc6IG51bWJlcjtcclxuICAgIHRleHRBbmNob3I6IGFueTtcclxuICAgIGR5OiBhbnk7XHJcbiAgICB4MTogYW55O1xyXG4gICAgeDI6IGFueTtcclxuICAgIHkxOiBhbnk7XHJcbiAgICB5MjogYW55O1xyXG4gICAgYWRqdXN0ZWRTY2FsZTogYW55O1xyXG4gICAgdHJhbnNmb3JtOiAobzogYW55KSA9PiBzdHJpbmc7XHJcbiAgICB0aWNrRm9ybWF0OiAobzogYW55KSA9PiBzdHJpbmc7XHJcbiAgICB0aWNrczogYW55O1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIG91dGVyVGlja1NpemU6IG51bWJlcjtcclxuICAgIHJvdGF0ZUxhYmVsczogYm9vbGVhbjtcclxuICAgIHJlZk1heDogbnVtYmVyO1xyXG4gICAgcmVmTWluOiBudW1iZXI7XHJcbiAgICByZWZlcmVuY2VMaW5lTGVuZ3RoOiBudW1iZXI7XHJcbiAgICByZWZlcmVuY2VBcmVhUGF0aDogc3RyaW5nO1xyXG4gICAgdGlja3NFbGVtZW50OiBFbGVtZW50UmVmO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcclxuICAgIHVwZGF0ZURpbXMoKTogdm9pZDtcclxuICAgIHVwZGF0ZSgpOiB2b2lkO1xyXG4gICAgc2V0UmVmZXJlbmNlbGluZXMoKTogdm9pZDtcclxuICAgIGdldFRpY2tzKCk6IGFueTtcclxuICAgIGdldE1heFRpY2tzKHRpY2tIZWlnaHQ6IG51bWJlcik6IG51bWJlcjtcclxuICAgIHRpY2tUcmFuc2Zvcm0odGljazogYW55KTogc3RyaW5nO1xyXG4gICAgZ3JpZExpbmVUcmFuc2Zvcm0oKTogc3RyaW5nO1xyXG4gICAgdGlja1RyaW0obGFiZWw6IHN0cmluZyk6IHN0cmluZztcclxufVxyXG4iXX0=