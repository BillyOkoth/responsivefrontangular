import { EventEmitter, TemplateRef } from '@angular/core';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import { BaseChartComponent } from '../common/base-chart.component';
import * as ɵngcc0 from '@angular/core';
export declare class BarVerticalNormalizedComponent extends BaseChartComponent {
    legend: boolean;
    legendTitle: string;
    legendPosition: string;
    xAxis: any;
    yAxis: any;
    showXAxisLabel: any;
    showYAxisLabel: any;
    xAxisLabel: any;
    yAxisLabel: any;
    tooltipDisabled: boolean;
    gradient: boolean;
    showGridLines: boolean;
    activeEntries: any[];
    schemeType: string;
    trimXAxisTicks: boolean;
    trimYAxisTicks: boolean;
    rotateXAxisTicks: boolean;
    maxXAxisTickLength: number;
    maxYAxisTickLength: number;
    xAxisTickFormatting: any;
    yAxisTickFormatting: any;
    xAxisTicks: any[];
    yAxisTicks: any[];
    barPadding: number;
    roundDomains: boolean;
    noBarWhenZero: boolean;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    groupDomain: any[];
    innerDomain: any[];
    valueDomain: any[];
    xScale: any;
    yScale: any;
    transform: string;
    colors: ColorHelper;
    margin: number[];
    xAxisHeight: number;
    yAxisWidth: number;
    legendOptions: any;
    update(): void;
    getGroupDomain(): any[];
    getInnerDomain(): any[];
    getValueDomain(): number[];
    getXScale(): any;
    getYScale(): any;
    groupTransform(group: any): string;
    onClick(data: any, group?: any): void;
    trackBy(index: any, item: any): any;
    setColors(): void;
    getLegendOptions(): {
        scaleType: string;
        colors: any;
        domain: any[];
        title: any;
        position: string;
    };
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onActivate(event: any, group: any, fromLegend?: boolean): void;
    onDeactivate(event: any, group: any, fromLegend?: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BarVerticalNormalizedComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BarVerticalNormalizedComponent, "ngx-charts-bar-vertical-normalized", never, { "activeEntries": "activeEntries"; "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "tooltipDisabled": "tooltipDisabled"; "gradient": "gradient"; "showGridLines": "showGridLines"; "schemeType": "schemeType"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "barPadding": "barPadding"; "roundDomains": "roundDomains"; "noBarWhenZero": "noBarWhenZero"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFyLXZlcnRpY2FsLW5vcm1hbGl6ZWQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImJhci12ZXJ0aWNhbC1ub3JtYWxpemVkLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVmlld0RpbWVuc2lvbnMgfSBmcm9tICcuLi9jb21tb24vdmlldy1kaW1lbnNpb25zLmhlbHBlcic7XHJcbmltcG9ydCB7IENvbG9ySGVscGVyIH0gZnJvbSAnLi4vY29tbW9uL2NvbG9yLmhlbHBlcic7XHJcbmltcG9ydCB7IEJhc2VDaGFydENvbXBvbmVudCB9IGZyb20gJy4uL2NvbW1vbi9iYXNlLWNoYXJ0LmNvbXBvbmVudCc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEJhclZlcnRpY2FsTm9ybWFsaXplZENvbXBvbmVudCBleHRlbmRzIEJhc2VDaGFydENvbXBvbmVudCB7XHJcbiAgICBsZWdlbmQ6IGJvb2xlYW47XHJcbiAgICBsZWdlbmRUaXRsZTogc3RyaW5nO1xyXG4gICAgbGVnZW5kUG9zaXRpb246IHN0cmluZztcclxuICAgIHhBeGlzOiBhbnk7XHJcbiAgICB5QXhpczogYW55O1xyXG4gICAgc2hvd1hBeGlzTGFiZWw6IGFueTtcclxuICAgIHNob3dZQXhpc0xhYmVsOiBhbnk7XHJcbiAgICB4QXhpc0xhYmVsOiBhbnk7XHJcbiAgICB5QXhpc0xhYmVsOiBhbnk7XHJcbiAgICB0b29sdGlwRGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBncmFkaWVudDogYm9vbGVhbjtcclxuICAgIHNob3dHcmlkTGluZXM6IGJvb2xlYW47XHJcbiAgICBhY3RpdmVFbnRyaWVzOiBhbnlbXTtcclxuICAgIHNjaGVtZVR5cGU6IHN0cmluZztcclxuICAgIHRyaW1YQXhpc1RpY2tzOiBib29sZWFuO1xyXG4gICAgdHJpbVlBeGlzVGlja3M6IGJvb2xlYW47XHJcbiAgICByb3RhdGVYQXhpc1RpY2tzOiBib29sZWFuO1xyXG4gICAgbWF4WEF4aXNUaWNrTGVuZ3RoOiBudW1iZXI7XHJcbiAgICBtYXhZQXhpc1RpY2tMZW5ndGg6IG51bWJlcjtcclxuICAgIHhBeGlzVGlja0Zvcm1hdHRpbmc6IGFueTtcclxuICAgIHlBeGlzVGlja0Zvcm1hdHRpbmc6IGFueTtcclxuICAgIHhBeGlzVGlja3M6IGFueVtdO1xyXG4gICAgeUF4aXNUaWNrczogYW55W107XHJcbiAgICBiYXJQYWRkaW5nOiBudW1iZXI7XHJcbiAgICByb3VuZERvbWFpbnM6IGJvb2xlYW47XHJcbiAgICBub0JhcldoZW5aZXJvOiBib29sZWFuO1xyXG4gICAgYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgZGVhY3RpdmF0ZTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICB0b29sdGlwVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgICBkaW1zOiBWaWV3RGltZW5zaW9ucztcclxuICAgIGdyb3VwRG9tYWluOiBhbnlbXTtcclxuICAgIGlubmVyRG9tYWluOiBhbnlbXTtcclxuICAgIHZhbHVlRG9tYWluOiBhbnlbXTtcclxuICAgIHhTY2FsZTogYW55O1xyXG4gICAgeVNjYWxlOiBhbnk7XHJcbiAgICB0cmFuc2Zvcm06IHN0cmluZztcclxuICAgIGNvbG9yczogQ29sb3JIZWxwZXI7XHJcbiAgICBtYXJnaW46IG51bWJlcltdO1xyXG4gICAgeEF4aXNIZWlnaHQ6IG51bWJlcjtcclxuICAgIHlBeGlzV2lkdGg6IG51bWJlcjtcclxuICAgIGxlZ2VuZE9wdGlvbnM6IGFueTtcclxuICAgIHVwZGF0ZSgpOiB2b2lkO1xyXG4gICAgZ2V0R3JvdXBEb21haW4oKTogYW55W107XHJcbiAgICBnZXRJbm5lckRvbWFpbigpOiBhbnlbXTtcclxuICAgIGdldFZhbHVlRG9tYWluKCk6IG51bWJlcltdO1xyXG4gICAgZ2V0WFNjYWxlKCk6IGFueTtcclxuICAgIGdldFlTY2FsZSgpOiBhbnk7XHJcbiAgICBncm91cFRyYW5zZm9ybShncm91cDogYW55KTogc3RyaW5nO1xyXG4gICAgb25DbGljayhkYXRhOiBhbnksIGdyb3VwPzogYW55KTogdm9pZDtcclxuICAgIHRyYWNrQnkoaW5kZXg6IGFueSwgaXRlbTogYW55KTogYW55O1xyXG4gICAgc2V0Q29sb3JzKCk6IHZvaWQ7XHJcbiAgICBnZXRMZWdlbmRPcHRpb25zKCk6IHtcclxuICAgICAgICBzY2FsZVR5cGU6IHN0cmluZztcclxuICAgICAgICBjb2xvcnM6IGFueTtcclxuICAgICAgICBkb21haW46IGFueVtdO1xyXG4gICAgICAgIHRpdGxlOiBhbnk7XHJcbiAgICAgICAgcG9zaXRpb246IHN0cmluZztcclxuICAgIH07XHJcbiAgICB1cGRhdGVZQXhpc1dpZHRoKHsgd2lkdGggfToge1xyXG4gICAgICAgIHdpZHRoOiBhbnk7XHJcbiAgICB9KTogdm9pZDtcclxuICAgIHVwZGF0ZVhBeGlzSGVpZ2h0KHsgaGVpZ2h0IH06IHtcclxuICAgICAgICBoZWlnaHQ6IGFueTtcclxuICAgIH0pOiB2b2lkO1xyXG4gICAgb25BY3RpdmF0ZShldmVudDogYW55LCBncm91cDogYW55LCBmcm9tTGVnZW5kPzogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICBvbkRlYWN0aXZhdGUoZXZlbnQ6IGFueSwgZ3JvdXA6IGFueSwgZnJvbUxlZ2VuZD86IGJvb2xlYW4pOiB2b2lkO1xyXG59XHJcbiJdfQ==