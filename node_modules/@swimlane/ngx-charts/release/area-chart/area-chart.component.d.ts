import { EventEmitter, TemplateRef } from '@angular/core';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import { BaseChartComponent } from '../common/base-chart.component';
import * as ɵngcc0 from '@angular/core';
export declare class AreaChartComponent extends BaseChartComponent {
    legend: any;
    legendTitle: string;
    legendPosition: string;
    state: any;
    xAxis: any;
    yAxis: any;
    baseValue: any;
    autoScale: any;
    showXAxisLabel: any;
    showYAxisLabel: any;
    xAxisLabel: any;
    yAxisLabel: any;
    timeline: any;
    gradient: boolean;
    showGridLines: boolean;
    curve: any;
    activeEntries: any[];
    schemeType: string;
    trimXAxisTicks: boolean;
    trimYAxisTicks: boolean;
    rotateXAxisTicks: boolean;
    maxXAxisTickLength: number;
    maxYAxisTickLength: number;
    xAxisTickFormatting: any;
    yAxisTickFormatting: any;
    xAxisTicks: any[];
    yAxisTicks: any[];
    roundDomains: boolean;
    tooltipDisabled: boolean;
    xScaleMin: any;
    xScaleMax: any;
    yScaleMin: number;
    yScaleMax: number;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    seriesTooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    xSet: any;
    xDomain: any;
    yDomain: any;
    seriesDomain: any;
    xScale: any;
    yScale: any;
    transform: string;
    colors: ColorHelper;
    clipPathId: string;
    clipPath: string;
    scaleType: string;
    series: any;
    margin: number[];
    hoveredVertical: any;
    xAxisHeight: number;
    yAxisWidth: number;
    filteredDomain: any;
    legendOptions: any;
    timelineWidth: any;
    timelineHeight: number;
    timelineXScale: any;
    timelineYScale: any;
    timelineXDomain: any;
    timelineTransform: any;
    timelinePadding: number;
    update(): void;
    updateTimeline(): void;
    getXDomain(): any[];
    getYDomain(): any[];
    getSeriesDomain(): any[];
    getXScale(domain: any, width: any): any;
    getYScale(domain: any, height: any): any;
    getScaleType(values: any): string;
    isDate(value: any): boolean;
    updateDomain(domain: any): void;
    updateHoveredVertical(item: any): void;
    hideCircles(): void;
    onClick(data: any, series?: any): void;
    trackBy(index: any, item: any): string;
    setColors(): void;
    getLegendOptions(): {
        scaleType: string;
        colors: any;
        domain: any[];
        title: any;
        position: string;
    };
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onActivate(item: any): void;
    onDeactivate(item: any): void;
    deactivateAll(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AreaChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AreaChartComponent, "ngx-charts-area-chart", never, { "activeEntries": "activeEntries"; "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "state": "state"; "xAxis": "xAxis"; "yAxis": "yAxis"; "baseValue": "baseValue"; "autoScale": "autoScale"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "timeline": "timeline"; "gradient": "gradient"; "showGridLines": "showGridLines"; "curve": "curve"; "schemeType": "schemeType"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "roundDomains": "roundDomains"; "tooltipDisabled": "tooltipDisabled"; "xScaleMin": "xScaleMin"; "xScaleMax": "xScaleMax"; "yScaleMin": "yScaleMin"; "yScaleMax": "yScaleMax"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate", "seriesTooltipTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJlYS1jaGFydC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYXJlYS1jaGFydC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVmlld0RpbWVuc2lvbnMgfSBmcm9tICcuLi9jb21tb24vdmlldy1kaW1lbnNpb25zLmhlbHBlcic7XHJcbmltcG9ydCB7IENvbG9ySGVscGVyIH0gZnJvbSAnLi4vY29tbW9uL2NvbG9yLmhlbHBlcic7XHJcbmltcG9ydCB7IEJhc2VDaGFydENvbXBvbmVudCB9IGZyb20gJy4uL2NvbW1vbi9iYXNlLWNoYXJ0LmNvbXBvbmVudCc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFyZWFDaGFydENvbXBvbmVudCBleHRlbmRzIEJhc2VDaGFydENvbXBvbmVudCB7XHJcbiAgICBsZWdlbmQ6IGFueTtcclxuICAgIGxlZ2VuZFRpdGxlOiBzdHJpbmc7XHJcbiAgICBsZWdlbmRQb3NpdGlvbjogc3RyaW5nO1xyXG4gICAgc3RhdGU6IGFueTtcclxuICAgIHhBeGlzOiBhbnk7XHJcbiAgICB5QXhpczogYW55O1xyXG4gICAgYmFzZVZhbHVlOiBhbnk7XHJcbiAgICBhdXRvU2NhbGU6IGFueTtcclxuICAgIHNob3dYQXhpc0xhYmVsOiBhbnk7XHJcbiAgICBzaG93WUF4aXNMYWJlbDogYW55O1xyXG4gICAgeEF4aXNMYWJlbDogYW55O1xyXG4gICAgeUF4aXNMYWJlbDogYW55O1xyXG4gICAgdGltZWxpbmU6IGFueTtcclxuICAgIGdyYWRpZW50OiBib29sZWFuO1xyXG4gICAgc2hvd0dyaWRMaW5lczogYm9vbGVhbjtcclxuICAgIGN1cnZlOiBhbnk7XHJcbiAgICBhY3RpdmVFbnRyaWVzOiBhbnlbXTtcclxuICAgIHNjaGVtZVR5cGU6IHN0cmluZztcclxuICAgIHRyaW1YQXhpc1RpY2tzOiBib29sZWFuO1xyXG4gICAgdHJpbVlBeGlzVGlja3M6IGJvb2xlYW47XHJcbiAgICByb3RhdGVYQXhpc1RpY2tzOiBib29sZWFuO1xyXG4gICAgbWF4WEF4aXNUaWNrTGVuZ3RoOiBudW1iZXI7XHJcbiAgICBtYXhZQXhpc1RpY2tMZW5ndGg6IG51bWJlcjtcclxuICAgIHhBeGlzVGlja0Zvcm1hdHRpbmc6IGFueTtcclxuICAgIHlBeGlzVGlja0Zvcm1hdHRpbmc6IGFueTtcclxuICAgIHhBeGlzVGlja3M6IGFueVtdO1xyXG4gICAgeUF4aXNUaWNrczogYW55W107XHJcbiAgICByb3VuZERvbWFpbnM6IGJvb2xlYW47XHJcbiAgICB0b29sdGlwRGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICB4U2NhbGVNaW46IGFueTtcclxuICAgIHhTY2FsZU1heDogYW55O1xyXG4gICAgeVNjYWxlTWluOiBudW1iZXI7XHJcbiAgICB5U2NhbGVNYXg6IG51bWJlcjtcclxuICAgIGFjdGl2YXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGRlYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgdG9vbHRpcFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgc2VyaWVzVG9vbHRpcFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgZGltczogVmlld0RpbWVuc2lvbnM7XHJcbiAgICB4U2V0OiBhbnk7XHJcbiAgICB4RG9tYWluOiBhbnk7XHJcbiAgICB5RG9tYWluOiBhbnk7XHJcbiAgICBzZXJpZXNEb21haW46IGFueTtcclxuICAgIHhTY2FsZTogYW55O1xyXG4gICAgeVNjYWxlOiBhbnk7XHJcbiAgICB0cmFuc2Zvcm06IHN0cmluZztcclxuICAgIGNvbG9yczogQ29sb3JIZWxwZXI7XHJcbiAgICBjbGlwUGF0aElkOiBzdHJpbmc7XHJcbiAgICBjbGlwUGF0aDogc3RyaW5nO1xyXG4gICAgc2NhbGVUeXBlOiBzdHJpbmc7XHJcbiAgICBzZXJpZXM6IGFueTtcclxuICAgIG1hcmdpbjogbnVtYmVyW107XHJcbiAgICBob3ZlcmVkVmVydGljYWw6IGFueTtcclxuICAgIHhBeGlzSGVpZ2h0OiBudW1iZXI7XHJcbiAgICB5QXhpc1dpZHRoOiBudW1iZXI7XHJcbiAgICBmaWx0ZXJlZERvbWFpbjogYW55O1xyXG4gICAgbGVnZW5kT3B0aW9uczogYW55O1xyXG4gICAgdGltZWxpbmVXaWR0aDogYW55O1xyXG4gICAgdGltZWxpbmVIZWlnaHQ6IG51bWJlcjtcclxuICAgIHRpbWVsaW5lWFNjYWxlOiBhbnk7XHJcbiAgICB0aW1lbGluZVlTY2FsZTogYW55O1xyXG4gICAgdGltZWxpbmVYRG9tYWluOiBhbnk7XHJcbiAgICB0aW1lbGluZVRyYW5zZm9ybTogYW55O1xyXG4gICAgdGltZWxpbmVQYWRkaW5nOiBudW1iZXI7XHJcbiAgICB1cGRhdGUoKTogdm9pZDtcclxuICAgIHVwZGF0ZVRpbWVsaW5lKCk6IHZvaWQ7XHJcbiAgICBnZXRYRG9tYWluKCk6IGFueVtdO1xyXG4gICAgZ2V0WURvbWFpbigpOiBhbnlbXTtcclxuICAgIGdldFNlcmllc0RvbWFpbigpOiBhbnlbXTtcclxuICAgIGdldFhTY2FsZShkb21haW46IGFueSwgd2lkdGg6IGFueSk6IGFueTtcclxuICAgIGdldFlTY2FsZShkb21haW46IGFueSwgaGVpZ2h0OiBhbnkpOiBhbnk7XHJcbiAgICBnZXRTY2FsZVR5cGUodmFsdWVzOiBhbnkpOiBzdHJpbmc7XHJcbiAgICBpc0RhdGUodmFsdWU6IGFueSk6IGJvb2xlYW47XHJcbiAgICB1cGRhdGVEb21haW4oZG9tYWluOiBhbnkpOiB2b2lkO1xyXG4gICAgdXBkYXRlSG92ZXJlZFZlcnRpY2FsKGl0ZW06IGFueSk6IHZvaWQ7XHJcbiAgICBoaWRlQ2lyY2xlcygpOiB2b2lkO1xyXG4gICAgb25DbGljayhkYXRhOiBhbnksIHNlcmllcz86IGFueSk6IHZvaWQ7XHJcbiAgICB0cmFja0J5KGluZGV4OiBhbnksIGl0ZW06IGFueSk6IHN0cmluZztcclxuICAgIHNldENvbG9ycygpOiB2b2lkO1xyXG4gICAgZ2V0TGVnZW5kT3B0aW9ucygpOiB7XHJcbiAgICAgICAgc2NhbGVUeXBlOiBzdHJpbmc7XHJcbiAgICAgICAgY29sb3JzOiBhbnk7XHJcbiAgICAgICAgZG9tYWluOiBhbnlbXTtcclxuICAgICAgICB0aXRsZTogYW55O1xyXG4gICAgICAgIHBvc2l0aW9uOiBzdHJpbmc7XHJcbiAgICB9O1xyXG4gICAgdXBkYXRlWUF4aXNXaWR0aCh7IHdpZHRoIH06IHtcclxuICAgICAgICB3aWR0aDogYW55O1xyXG4gICAgfSk6IHZvaWQ7XHJcbiAgICB1cGRhdGVYQXhpc0hlaWdodCh7IGhlaWdodCB9OiB7XHJcbiAgICAgICAgaGVpZ2h0OiBhbnk7XHJcbiAgICB9KTogdm9pZDtcclxuICAgIG9uQWN0aXZhdGUoaXRlbTogYW55KTogdm9pZDtcclxuICAgIG9uRGVhY3RpdmF0ZShpdGVtOiBhbnkpOiB2b2lkO1xyXG4gICAgZGVhY3RpdmF0ZUFsbCgpOiB2b2lkO1xyXG59XHJcbiJdfQ==