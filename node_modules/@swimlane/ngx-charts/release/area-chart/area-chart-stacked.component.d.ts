import { EventEmitter, TemplateRef } from '@angular/core';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import { BaseChartComponent } from '../common/base-chart.component';
import * as ɵngcc0 from '@angular/core';
export declare class AreaChartStackedComponent extends BaseChartComponent {
    legend: boolean;
    legendTitle: string;
    legendPosition: string;
    xAxis: any;
    yAxis: any;
    showXAxisLabel: any;
    showYAxisLabel: any;
    xAxisLabel: any;
    yAxisLabel: any;
    timeline: any;
    gradient: any;
    showGridLines: boolean;
    curve: any;
    activeEntries: any[];
    schemeType: string;
    trimXAxisTicks: boolean;
    trimYAxisTicks: boolean;
    rotateXAxisTicks: boolean;
    maxXAxisTickLength: number;
    maxYAxisTickLength: number;
    xAxisTickFormatting: any;
    yAxisTickFormatting: any;
    xAxisTicks: any[];
    yAxisTicks: any[];
    roundDomains: boolean;
    tooltipDisabled: boolean;
    xScaleMin: any;
    xScaleMax: any;
    yScaleMin: number;
    yScaleMax: number;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    seriesTooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    scaleType: string;
    xDomain: any[];
    xSet: any[];
    yDomain: any[];
    seriesDomain: any;
    xScale: any;
    yScale: any;
    transform: string;
    clipPathId: string;
    clipPath: string;
    colors: ColorHelper;
    margin: number[];
    hoveredVertical: any;
    xAxisHeight: number;
    yAxisWidth: number;
    filteredDomain: any;
    legendOptions: any;
    timelineWidth: any;
    timelineHeight: number;
    timelineXScale: any;
    timelineYScale: any;
    timelineXDomain: any;
    timelineTransform: any;
    timelinePadding: number;
    update(): void;
    updateTimeline(): void;
    getXDomain(): any[];
    getYDomain(): any[];
    getSeriesDomain(): any[];
    getXScale(domain: any, width: any): any;
    getYScale(domain: any, height: any): any;
    updateDomain(domain: any): void;
    updateHoveredVertical(item: any): void;
    hideCircles(): void;
    onClick(data: any, series?: any): void;
    trackBy(index: any, item: any): string;
    setColors(): void;
    getLegendOptions(): {
        scaleType: string;
        colors: any;
        domain: any[];
        title: any;
        position: string;
    };
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onActivate(item: any): void;
    onDeactivate(item: any): void;
    deactivateAll(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AreaChartStackedComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AreaChartStackedComponent, "ngx-charts-area-chart-stacked", never, { "activeEntries": "activeEntries"; "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "timeline": "timeline"; "gradient": "gradient"; "showGridLines": "showGridLines"; "curve": "curve"; "schemeType": "schemeType"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "roundDomains": "roundDomains"; "tooltipDisabled": "tooltipDisabled"; "xScaleMin": "xScaleMin"; "xScaleMax": "xScaleMax"; "yScaleMin": "yScaleMin"; "yScaleMax": "yScaleMax"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate", "seriesTooltipTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJlYS1jaGFydC1zdGFja2VkLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhcmVhLWNoYXJ0LXN0YWNrZWQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFZpZXdEaW1lbnNpb25zIH0gZnJvbSAnLi4vY29tbW9uL3ZpZXctZGltZW5zaW9ucy5oZWxwZXInO1xyXG5pbXBvcnQgeyBDb2xvckhlbHBlciB9IGZyb20gJy4uL2NvbW1vbi9jb2xvci5oZWxwZXInO1xyXG5pbXBvcnQgeyBCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vYmFzZS1jaGFydC5jb21wb25lbnQnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBcmVhQ2hhcnRTdGFja2VkQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNoYXJ0Q29tcG9uZW50IHtcclxuICAgIGxlZ2VuZDogYm9vbGVhbjtcclxuICAgIGxlZ2VuZFRpdGxlOiBzdHJpbmc7XHJcbiAgICBsZWdlbmRQb3NpdGlvbjogc3RyaW5nO1xyXG4gICAgeEF4aXM6IGFueTtcclxuICAgIHlBeGlzOiBhbnk7XHJcbiAgICBzaG93WEF4aXNMYWJlbDogYW55O1xyXG4gICAgc2hvd1lBeGlzTGFiZWw6IGFueTtcclxuICAgIHhBeGlzTGFiZWw6IGFueTtcclxuICAgIHlBeGlzTGFiZWw6IGFueTtcclxuICAgIHRpbWVsaW5lOiBhbnk7XHJcbiAgICBncmFkaWVudDogYW55O1xyXG4gICAgc2hvd0dyaWRMaW5lczogYm9vbGVhbjtcclxuICAgIGN1cnZlOiBhbnk7XHJcbiAgICBhY3RpdmVFbnRyaWVzOiBhbnlbXTtcclxuICAgIHNjaGVtZVR5cGU6IHN0cmluZztcclxuICAgIHRyaW1YQXhpc1RpY2tzOiBib29sZWFuO1xyXG4gICAgdHJpbVlBeGlzVGlja3M6IGJvb2xlYW47XHJcbiAgICByb3RhdGVYQXhpc1RpY2tzOiBib29sZWFuO1xyXG4gICAgbWF4WEF4aXNUaWNrTGVuZ3RoOiBudW1iZXI7XHJcbiAgICBtYXhZQXhpc1RpY2tMZW5ndGg6IG51bWJlcjtcclxuICAgIHhBeGlzVGlja0Zvcm1hdHRpbmc6IGFueTtcclxuICAgIHlBeGlzVGlja0Zvcm1hdHRpbmc6IGFueTtcclxuICAgIHhBeGlzVGlja3M6IGFueVtdO1xyXG4gICAgeUF4aXNUaWNrczogYW55W107XHJcbiAgICByb3VuZERvbWFpbnM6IGJvb2xlYW47XHJcbiAgICB0b29sdGlwRGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICB4U2NhbGVNaW46IGFueTtcclxuICAgIHhTY2FsZU1heDogYW55O1xyXG4gICAgeVNjYWxlTWluOiBudW1iZXI7XHJcbiAgICB5U2NhbGVNYXg6IG51bWJlcjtcclxuICAgIGFjdGl2YXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGRlYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgdG9vbHRpcFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgc2VyaWVzVG9vbHRpcFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgZGltczogVmlld0RpbWVuc2lvbnM7XHJcbiAgICBzY2FsZVR5cGU6IHN0cmluZztcclxuICAgIHhEb21haW46IGFueVtdO1xyXG4gICAgeFNldDogYW55W107XHJcbiAgICB5RG9tYWluOiBhbnlbXTtcclxuICAgIHNlcmllc0RvbWFpbjogYW55O1xyXG4gICAgeFNjYWxlOiBhbnk7XHJcbiAgICB5U2NhbGU6IGFueTtcclxuICAgIHRyYW5zZm9ybTogc3RyaW5nO1xyXG4gICAgY2xpcFBhdGhJZDogc3RyaW5nO1xyXG4gICAgY2xpcFBhdGg6IHN0cmluZztcclxuICAgIGNvbG9yczogQ29sb3JIZWxwZXI7XHJcbiAgICBtYXJnaW46IG51bWJlcltdO1xyXG4gICAgaG92ZXJlZFZlcnRpY2FsOiBhbnk7XHJcbiAgICB4QXhpc0hlaWdodDogbnVtYmVyO1xyXG4gICAgeUF4aXNXaWR0aDogbnVtYmVyO1xyXG4gICAgZmlsdGVyZWREb21haW46IGFueTtcclxuICAgIGxlZ2VuZE9wdGlvbnM6IGFueTtcclxuICAgIHRpbWVsaW5lV2lkdGg6IGFueTtcclxuICAgIHRpbWVsaW5lSGVpZ2h0OiBudW1iZXI7XHJcbiAgICB0aW1lbGluZVhTY2FsZTogYW55O1xyXG4gICAgdGltZWxpbmVZU2NhbGU6IGFueTtcclxuICAgIHRpbWVsaW5lWERvbWFpbjogYW55O1xyXG4gICAgdGltZWxpbmVUcmFuc2Zvcm06IGFueTtcclxuICAgIHRpbWVsaW5lUGFkZGluZzogbnVtYmVyO1xyXG4gICAgdXBkYXRlKCk6IHZvaWQ7XHJcbiAgICB1cGRhdGVUaW1lbGluZSgpOiB2b2lkO1xyXG4gICAgZ2V0WERvbWFpbigpOiBhbnlbXTtcclxuICAgIGdldFlEb21haW4oKTogYW55W107XHJcbiAgICBnZXRTZXJpZXNEb21haW4oKTogYW55W107XHJcbiAgICBnZXRYU2NhbGUoZG9tYWluOiBhbnksIHdpZHRoOiBhbnkpOiBhbnk7XHJcbiAgICBnZXRZU2NhbGUoZG9tYWluOiBhbnksIGhlaWdodDogYW55KTogYW55O1xyXG4gICAgdXBkYXRlRG9tYWluKGRvbWFpbjogYW55KTogdm9pZDtcclxuICAgIHVwZGF0ZUhvdmVyZWRWZXJ0aWNhbChpdGVtOiBhbnkpOiB2b2lkO1xyXG4gICAgaGlkZUNpcmNsZXMoKTogdm9pZDtcclxuICAgIG9uQ2xpY2soZGF0YTogYW55LCBzZXJpZXM/OiBhbnkpOiB2b2lkO1xyXG4gICAgdHJhY2tCeShpbmRleDogYW55LCBpdGVtOiBhbnkpOiBzdHJpbmc7XHJcbiAgICBzZXRDb2xvcnMoKTogdm9pZDtcclxuICAgIGdldExlZ2VuZE9wdGlvbnMoKToge1xyXG4gICAgICAgIHNjYWxlVHlwZTogc3RyaW5nO1xyXG4gICAgICAgIGNvbG9yczogYW55O1xyXG4gICAgICAgIGRvbWFpbjogYW55W107XHJcbiAgICAgICAgdGl0bGU6IGFueTtcclxuICAgICAgICBwb3NpdGlvbjogc3RyaW5nO1xyXG4gICAgfTtcclxuICAgIHVwZGF0ZVlBeGlzV2lkdGgoeyB3aWR0aCB9OiB7XHJcbiAgICAgICAgd2lkdGg6IGFueTtcclxuICAgIH0pOiB2b2lkO1xyXG4gICAgdXBkYXRlWEF4aXNIZWlnaHQoeyBoZWlnaHQgfToge1xyXG4gICAgICAgIGhlaWdodDogYW55O1xyXG4gICAgfSk6IHZvaWQ7XHJcbiAgICBvbkFjdGl2YXRlKGl0ZW06IGFueSk6IHZvaWQ7XHJcbiAgICBvbkRlYWN0aXZhdGUoaXRlbTogYW55KTogdm9pZDtcclxuICAgIGRlYWN0aXZhdGVBbGwoKTogdm9pZDtcclxufVxyXG4iXX0=