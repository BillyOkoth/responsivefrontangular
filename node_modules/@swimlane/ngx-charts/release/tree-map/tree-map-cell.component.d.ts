import { EventEmitter, ElementRef, OnChanges } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class TreeMapCellComponent implements OnChanges {
    data: any;
    fill: any;
    x: any;
    y: any;
    width: any;
    height: any;
    label: any;
    value: any;
    valueType: any;
    valueFormatting: any;
    labelFormatting: any;
    gradient: boolean;
    animations: boolean;
    select: EventEmitter<{}>;
    gradientStops: any[];
    gradientId: string;
    gradientUrl: string;
    element: HTMLElement;
    transform: string;
    formattedLabel: string;
    formattedValue: string;
    initialized: boolean;
    constructor(element: ElementRef);
    ngOnChanges(): void;
    update(): void;
    loadAnimation(): void;
    getTextColor(): string;
    animateToCurrentForm(): void;
    onClick(): void;
    getGradientStops(): {
        offset: number;
        color: any;
        opacity: number;
    }[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TreeMapCellComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TreeMapCellComponent, "g[ngx-charts-tree-map-cell]", never, { "gradient": "gradient"; "animations": "animations"; "valueFormatting": "valueFormatting"; "data": "data"; "fill": "fill"; "x": "x"; "y": "y"; "width": "width"; "height": "height"; "label": "label"; "value": "value"; "valueType": "valueType"; "labelFormatting": "labelFormatting"; }, { "select": "select"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1tYXAtY2VsbC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidHJlZS1tYXAtY2VsbC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRyZWVNYXBDZWxsQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICAgIGRhdGE6IGFueTtcclxuICAgIGZpbGw6IGFueTtcclxuICAgIHg6IGFueTtcclxuICAgIHk6IGFueTtcclxuICAgIHdpZHRoOiBhbnk7XHJcbiAgICBoZWlnaHQ6IGFueTtcclxuICAgIGxhYmVsOiBhbnk7XHJcbiAgICB2YWx1ZTogYW55O1xyXG4gICAgdmFsdWVUeXBlOiBhbnk7XHJcbiAgICB2YWx1ZUZvcm1hdHRpbmc6IGFueTtcclxuICAgIGxhYmVsRm9ybWF0dGluZzogYW55O1xyXG4gICAgZ3JhZGllbnQ6IGJvb2xlYW47XHJcbiAgICBhbmltYXRpb25zOiBib29sZWFuO1xyXG4gICAgc2VsZWN0OiBFdmVudEVtaXR0ZXI8e30+O1xyXG4gICAgZ3JhZGllbnRTdG9wczogYW55W107XHJcbiAgICBncmFkaWVudElkOiBzdHJpbmc7XHJcbiAgICBncmFkaWVudFVybDogc3RyaW5nO1xyXG4gICAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgICB0cmFuc2Zvcm06IHN0cmluZztcclxuICAgIGZvcm1hdHRlZExhYmVsOiBzdHJpbmc7XHJcbiAgICBmb3JtYXR0ZWRWYWx1ZTogc3RyaW5nO1xyXG4gICAgaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmKTtcclxuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQ7XHJcbiAgICB1cGRhdGUoKTogdm9pZDtcclxuICAgIGxvYWRBbmltYXRpb24oKTogdm9pZDtcclxuICAgIGdldFRleHRDb2xvcigpOiBzdHJpbmc7XHJcbiAgICBhbmltYXRlVG9DdXJyZW50Rm9ybSgpOiB2b2lkO1xyXG4gICAgb25DbGljaygpOiB2b2lkO1xyXG4gICAgZ2V0R3JhZGllbnRTdG9wcygpOiB7XHJcbiAgICAgICAgb2Zmc2V0OiBudW1iZXI7XHJcbiAgICAgICAgY29sb3I6IGFueTtcclxuICAgICAgICBvcGFjaXR5OiBudW1iZXI7XHJcbiAgICB9W107XHJcbn1cclxuIl19