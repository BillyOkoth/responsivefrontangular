import { EventEmitter, TemplateRef } from '@angular/core';
import { BaseChartComponent } from '../common/base-chart.component';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import * as ɵngcc0 from '@angular/core';
export declare class BubbleChartComponent extends BaseChartComponent {
    showGridLines: boolean;
    legend: boolean;
    legendTitle: string;
    legendPosition: string;
    xAxis: boolean;
    yAxis: boolean;
    showXAxisLabel: boolean;
    showYAxisLabel: boolean;
    xAxisLabel: string;
    yAxisLabel: string;
    trimXAxisTicks: boolean;
    trimYAxisTicks: boolean;
    rotateXAxisTicks: boolean;
    maxXAxisTickLength: number;
    maxYAxisTickLength: number;
    xAxisTickFormatting: any;
    yAxisTickFormatting: any;
    xAxisTicks: any[];
    yAxisTicks: any[];
    roundDomains: boolean;
    maxRadius: number;
    minRadius: number;
    autoScale: boolean;
    schemeType: string;
    tooltipDisabled: boolean;
    xScaleMin: any;
    xScaleMax: any;
    yScaleMin: any;
    yScaleMax: any;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    colors: ColorHelper;
    scaleType: string;
    margin: number[];
    bubblePadding: number[];
    data: any;
    legendOptions: any;
    transform: string;
    clipPath: string;
    clipPathId: string;
    seriesDomain: any[];
    xDomain: any[];
    yDomain: any[];
    rDomain: number[];
    xScaleType: string;
    yScaleType: string;
    yScale: any;
    xScale: any;
    rScale: any;
    xAxisHeight: number;
    yAxisWidth: number;
    activeEntries: any[];
    update(): void;
    hideCircles(): void;
    onClick(data: any, series?: any): void;
    getBubblePadding(): number[];
    setScales(): void;
    getYScale(domain: any, height: any): any;
    getXScale(domain: any, width: any): any;
    getRScale(domain: any, range: any): any;
    getLegendOptions(): any;
    getXDomain(): any[];
    getYDomain(): any[];
    getRDomain(): number[];
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onActivate(item: any): void;
    onDeactivate(item: any): void;
    deactivateAll(): void;
    trackBy(index: any, item: any): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BubbleChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BubbleChartComponent, "ngx-charts-bubble-chart", never, { "minRadius": "minRadius"; "maxRadius": "maxRadius"; "showGridLines": "showGridLines"; "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "roundDomains": "roundDomains"; "autoScale": "autoScale"; "schemeType": "schemeType"; "tooltipDisabled": "tooltipDisabled"; "xScaleMin": "xScaleMin"; "xScaleMax": "xScaleMax"; "yScaleMin": "yScaleMin"; "yScaleMax": "yScaleMax"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnViYmxlLWNoYXJ0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJidWJibGUtY2hhcnQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJhc2VDaGFydENvbXBvbmVudCB9IGZyb20gJy4uL2NvbW1vbi9iYXNlLWNoYXJ0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFZpZXdEaW1lbnNpb25zIH0gZnJvbSAnLi4vY29tbW9uL3ZpZXctZGltZW5zaW9ucy5oZWxwZXInO1xyXG5pbXBvcnQgeyBDb2xvckhlbHBlciB9IGZyb20gJy4uL2NvbW1vbi9jb2xvci5oZWxwZXInO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCdWJibGVDaGFydENvbXBvbmVudCBleHRlbmRzIEJhc2VDaGFydENvbXBvbmVudCB7XHJcbiAgICBzaG93R3JpZExpbmVzOiBib29sZWFuO1xyXG4gICAgbGVnZW5kOiBib29sZWFuO1xyXG4gICAgbGVnZW5kVGl0bGU6IHN0cmluZztcclxuICAgIGxlZ2VuZFBvc2l0aW9uOiBzdHJpbmc7XHJcbiAgICB4QXhpczogYm9vbGVhbjtcclxuICAgIHlBeGlzOiBib29sZWFuO1xyXG4gICAgc2hvd1hBeGlzTGFiZWw6IGJvb2xlYW47XHJcbiAgICBzaG93WUF4aXNMYWJlbDogYm9vbGVhbjtcclxuICAgIHhBeGlzTGFiZWw6IHN0cmluZztcclxuICAgIHlBeGlzTGFiZWw6IHN0cmluZztcclxuICAgIHRyaW1YQXhpc1RpY2tzOiBib29sZWFuO1xyXG4gICAgdHJpbVlBeGlzVGlja3M6IGJvb2xlYW47XHJcbiAgICByb3RhdGVYQXhpc1RpY2tzOiBib29sZWFuO1xyXG4gICAgbWF4WEF4aXNUaWNrTGVuZ3RoOiBudW1iZXI7XHJcbiAgICBtYXhZQXhpc1RpY2tMZW5ndGg6IG51bWJlcjtcclxuICAgIHhBeGlzVGlja0Zvcm1hdHRpbmc6IGFueTtcclxuICAgIHlBeGlzVGlja0Zvcm1hdHRpbmc6IGFueTtcclxuICAgIHhBeGlzVGlja3M6IGFueVtdO1xyXG4gICAgeUF4aXNUaWNrczogYW55W107XHJcbiAgICByb3VuZERvbWFpbnM6IGJvb2xlYW47XHJcbiAgICBtYXhSYWRpdXM6IG51bWJlcjtcclxuICAgIG1pblJhZGl1czogbnVtYmVyO1xyXG4gICAgYXV0b1NjYWxlOiBib29sZWFuO1xyXG4gICAgc2NoZW1lVHlwZTogc3RyaW5nO1xyXG4gICAgdG9vbHRpcERpc2FibGVkOiBib29sZWFuO1xyXG4gICAgeFNjYWxlTWluOiBhbnk7XHJcbiAgICB4U2NhbGVNYXg6IGFueTtcclxuICAgIHlTY2FsZU1pbjogYW55O1xyXG4gICAgeVNjYWxlTWF4OiBhbnk7XHJcbiAgICBhY3RpdmF0ZTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICBkZWFjdGl2YXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIHRvb2x0aXBUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcclxuICAgIGRpbXM6IFZpZXdEaW1lbnNpb25zO1xyXG4gICAgY29sb3JzOiBDb2xvckhlbHBlcjtcclxuICAgIHNjYWxlVHlwZTogc3RyaW5nO1xyXG4gICAgbWFyZ2luOiBudW1iZXJbXTtcclxuICAgIGJ1YmJsZVBhZGRpbmc6IG51bWJlcltdO1xyXG4gICAgZGF0YTogYW55O1xyXG4gICAgbGVnZW5kT3B0aW9uczogYW55O1xyXG4gICAgdHJhbnNmb3JtOiBzdHJpbmc7XHJcbiAgICBjbGlwUGF0aDogc3RyaW5nO1xyXG4gICAgY2xpcFBhdGhJZDogc3RyaW5nO1xyXG4gICAgc2VyaWVzRG9tYWluOiBhbnlbXTtcclxuICAgIHhEb21haW46IGFueVtdO1xyXG4gICAgeURvbWFpbjogYW55W107XHJcbiAgICByRG9tYWluOiBudW1iZXJbXTtcclxuICAgIHhTY2FsZVR5cGU6IHN0cmluZztcclxuICAgIHlTY2FsZVR5cGU6IHN0cmluZztcclxuICAgIHlTY2FsZTogYW55O1xyXG4gICAgeFNjYWxlOiBhbnk7XHJcbiAgICByU2NhbGU6IGFueTtcclxuICAgIHhBeGlzSGVpZ2h0OiBudW1iZXI7XHJcbiAgICB5QXhpc1dpZHRoOiBudW1iZXI7XHJcbiAgICBhY3RpdmVFbnRyaWVzOiBhbnlbXTtcclxuICAgIHVwZGF0ZSgpOiB2b2lkO1xyXG4gICAgaGlkZUNpcmNsZXMoKTogdm9pZDtcclxuICAgIG9uQ2xpY2soZGF0YTogYW55LCBzZXJpZXM/OiBhbnkpOiB2b2lkO1xyXG4gICAgZ2V0QnViYmxlUGFkZGluZygpOiBudW1iZXJbXTtcclxuICAgIHNldFNjYWxlcygpOiB2b2lkO1xyXG4gICAgZ2V0WVNjYWxlKGRvbWFpbjogYW55LCBoZWlnaHQ6IGFueSk6IGFueTtcclxuICAgIGdldFhTY2FsZShkb21haW46IGFueSwgd2lkdGg6IGFueSk6IGFueTtcclxuICAgIGdldFJTY2FsZShkb21haW46IGFueSwgcmFuZ2U6IGFueSk6IGFueTtcclxuICAgIGdldExlZ2VuZE9wdGlvbnMoKTogYW55O1xyXG4gICAgZ2V0WERvbWFpbigpOiBhbnlbXTtcclxuICAgIGdldFlEb21haW4oKTogYW55W107XHJcbiAgICBnZXRSRG9tYWluKCk6IG51bWJlcltdO1xyXG4gICAgdXBkYXRlWUF4aXNXaWR0aCh7IHdpZHRoIH06IHtcclxuICAgICAgICB3aWR0aDogYW55O1xyXG4gICAgfSk6IHZvaWQ7XHJcbiAgICB1cGRhdGVYQXhpc0hlaWdodCh7IGhlaWdodCB9OiB7XHJcbiAgICAgICAgaGVpZ2h0OiBhbnk7XHJcbiAgICB9KTogdm9pZDtcclxuICAgIG9uQWN0aXZhdGUoaXRlbTogYW55KTogdm9pZDtcclxuICAgIG9uRGVhY3RpdmF0ZShpdGVtOiBhbnkpOiB2b2lkO1xyXG4gICAgZGVhY3RpdmF0ZUFsbCgpOiB2b2lkO1xyXG4gICAgdHJhY2tCeShpbmRleDogYW55LCBpdGVtOiBhbnkpOiBzdHJpbmc7XHJcbn1cclxuIl19