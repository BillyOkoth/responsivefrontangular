import { EventEmitter, TemplateRef } from '@angular/core';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import { BaseChartComponent } from '../common/base-chart.component';
import * as ɵngcc0 from '@angular/core';
export declare class PolarChartComponent extends BaseChartComponent {
    legend: boolean;
    legendTitle: string;
    legendPosition: string;
    xAxis: boolean;
    yAxis: boolean;
    showXAxisLabel: boolean;
    showYAxisLabel: boolean;
    xAxisLabel: string;
    yAxisLabel: string;
    autoScale: boolean;
    showGridLines: boolean;
    curve: any;
    activeEntries: any[];
    schemeType: string;
    rangeFillOpacity: number;
    trimYAxisTicks: boolean;
    maxYAxisTickLength: number;
    xAxisTickFormatting: (o: any) => any;
    yAxisTickFormatting: (o: any) => any;
    roundDomains: boolean;
    tooltipDisabled: boolean;
    showSeriesOnHover: boolean;
    gradient: boolean;
    yAxisMinScale: number;
    labelTrim: boolean;
    labelTrimSize: number;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    yAxisDims: ViewDimensions;
    labelOffset: number;
    xDomain: any;
    yDomain: any;
    seriesDomain: any;
    yScale: any;
    xScale: any;
    yAxisScale: any;
    colors: ColorHelper;
    scaleType: string;
    transform: string;
    transformPlot: string;
    transformYAxis: string;
    transformXAxis: string;
    series: any;
    margin: number[];
    xAxisHeight: number;
    yAxisWidth: number;
    filteredDomain: any;
    legendOptions: any;
    thetaTicks: any[];
    radiusTicks: number[];
    outerRadius: number;
    update(): void;
    setDims(): void;
    setScales(): void;
    setTicks(): void;
    getXValues(): any[];
    getXDomain(values?: any[]): any[];
    getYValues(): any[];
    getYDomain(domain?: any[]): any[];
    getSeriesDomain(): any[];
    getXScale(domain: any, width: any): any;
    getYScale(domain: any, height: any): any;
    onClick(data: any, series?: any): void;
    setColors(): void;
    getLegendOptions(): {
        scaleType: string;
        colors: ColorHelper;
        domain: any;
        title: string;
        position: string;
    } | {
        scaleType: string;
        colors: any;
        domain: any;
        title: any;
        position: string;
    };
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onActivate(item: any): void;
    onDeactivate(item: any): void;
    deactivateAll(): void;
    trackBy(index: any, item: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PolarChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PolarChartComponent, "ngx-charts-polar-chart", never, { "activeEntries": "activeEntries"; "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "autoScale": "autoScale"; "showGridLines": "showGridLines"; "curve": "curve"; "schemeType": "schemeType"; "rangeFillOpacity": "rangeFillOpacity"; "trimYAxisTicks": "trimYAxisTicks"; "maxYAxisTickLength": "maxYAxisTickLength"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "roundDomains": "roundDomains"; "tooltipDisabled": "tooltipDisabled"; "showSeriesOnHover": "showSeriesOnHover"; "gradient": "gradient"; "yAxisMinScale": "yAxisMinScale"; "labelTrim": "labelTrim"; "labelTrimSize": "labelTrimSize"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9sYXItY2hhcnQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvbGFyLWNoYXJ0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFZpZXdEaW1lbnNpb25zIH0gZnJvbSAnLi4vY29tbW9uL3ZpZXctZGltZW5zaW9ucy5oZWxwZXInO1xyXG5pbXBvcnQgeyBDb2xvckhlbHBlciB9IGZyb20gJy4uL2NvbW1vbi9jb2xvci5oZWxwZXInO1xyXG5pbXBvcnQgeyBCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vYmFzZS1jaGFydC5jb21wb25lbnQnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb2xhckNoYXJ0Q29tcG9uZW50IGV4dGVuZHMgQmFzZUNoYXJ0Q29tcG9uZW50IHtcclxuICAgIGxlZ2VuZDogYm9vbGVhbjtcclxuICAgIGxlZ2VuZFRpdGxlOiBzdHJpbmc7XHJcbiAgICBsZWdlbmRQb3NpdGlvbjogc3RyaW5nO1xyXG4gICAgeEF4aXM6IGJvb2xlYW47XHJcbiAgICB5QXhpczogYm9vbGVhbjtcclxuICAgIHNob3dYQXhpc0xhYmVsOiBib29sZWFuO1xyXG4gICAgc2hvd1lBeGlzTGFiZWw6IGJvb2xlYW47XHJcbiAgICB4QXhpc0xhYmVsOiBzdHJpbmc7XHJcbiAgICB5QXhpc0xhYmVsOiBzdHJpbmc7XHJcbiAgICBhdXRvU2NhbGU6IGJvb2xlYW47XHJcbiAgICBzaG93R3JpZExpbmVzOiBib29sZWFuO1xyXG4gICAgY3VydmU6IGFueTtcclxuICAgIGFjdGl2ZUVudHJpZXM6IGFueVtdO1xyXG4gICAgc2NoZW1lVHlwZTogc3RyaW5nO1xyXG4gICAgcmFuZ2VGaWxsT3BhY2l0eTogbnVtYmVyO1xyXG4gICAgdHJpbVlBeGlzVGlja3M6IGJvb2xlYW47XHJcbiAgICBtYXhZQXhpc1RpY2tMZW5ndGg6IG51bWJlcjtcclxuICAgIHhBeGlzVGlja0Zvcm1hdHRpbmc6IChvOiBhbnkpID0+IGFueTtcclxuICAgIHlBeGlzVGlja0Zvcm1hdHRpbmc6IChvOiBhbnkpID0+IGFueTtcclxuICAgIHJvdW5kRG9tYWluczogYm9vbGVhbjtcclxuICAgIHRvb2x0aXBEaXNhYmxlZDogYm9vbGVhbjtcclxuICAgIHNob3dTZXJpZXNPbkhvdmVyOiBib29sZWFuO1xyXG4gICAgZ3JhZGllbnQ6IGJvb2xlYW47XHJcbiAgICB5QXhpc01pblNjYWxlOiBudW1iZXI7XHJcbiAgICBsYWJlbFRyaW06IGJvb2xlYW47XHJcbiAgICBsYWJlbFRyaW1TaXplOiBudW1iZXI7XHJcbiAgICBhY3RpdmF0ZTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICBkZWFjdGl2YXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIHRvb2x0aXBUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcclxuICAgIGRpbXM6IFZpZXdEaW1lbnNpb25zO1xyXG4gICAgeUF4aXNEaW1zOiBWaWV3RGltZW5zaW9ucztcclxuICAgIGxhYmVsT2Zmc2V0OiBudW1iZXI7XHJcbiAgICB4RG9tYWluOiBhbnk7XHJcbiAgICB5RG9tYWluOiBhbnk7XHJcbiAgICBzZXJpZXNEb21haW46IGFueTtcclxuICAgIHlTY2FsZTogYW55O1xyXG4gICAgeFNjYWxlOiBhbnk7XHJcbiAgICB5QXhpc1NjYWxlOiBhbnk7XHJcbiAgICBjb2xvcnM6IENvbG9ySGVscGVyO1xyXG4gICAgc2NhbGVUeXBlOiBzdHJpbmc7XHJcbiAgICB0cmFuc2Zvcm06IHN0cmluZztcclxuICAgIHRyYW5zZm9ybVBsb3Q6IHN0cmluZztcclxuICAgIHRyYW5zZm9ybVlBeGlzOiBzdHJpbmc7XHJcbiAgICB0cmFuc2Zvcm1YQXhpczogc3RyaW5nO1xyXG4gICAgc2VyaWVzOiBhbnk7XHJcbiAgICBtYXJnaW46IG51bWJlcltdO1xyXG4gICAgeEF4aXNIZWlnaHQ6IG51bWJlcjtcclxuICAgIHlBeGlzV2lkdGg6IG51bWJlcjtcclxuICAgIGZpbHRlcmVkRG9tYWluOiBhbnk7XHJcbiAgICBsZWdlbmRPcHRpb25zOiBhbnk7XHJcbiAgICB0aGV0YVRpY2tzOiBhbnlbXTtcclxuICAgIHJhZGl1c1RpY2tzOiBudW1iZXJbXTtcclxuICAgIG91dGVyUmFkaXVzOiBudW1iZXI7XHJcbiAgICB1cGRhdGUoKTogdm9pZDtcclxuICAgIHNldERpbXMoKTogdm9pZDtcclxuICAgIHNldFNjYWxlcygpOiB2b2lkO1xyXG4gICAgc2V0VGlja3MoKTogdm9pZDtcclxuICAgIGdldFhWYWx1ZXMoKTogYW55W107XHJcbiAgICBnZXRYRG9tYWluKHZhbHVlcz86IGFueVtdKTogYW55W107XHJcbiAgICBnZXRZVmFsdWVzKCk6IGFueVtdO1xyXG4gICAgZ2V0WURvbWFpbihkb21haW4/OiBhbnlbXSk6IGFueVtdO1xyXG4gICAgZ2V0U2VyaWVzRG9tYWluKCk6IGFueVtdO1xyXG4gICAgZ2V0WFNjYWxlKGRvbWFpbjogYW55LCB3aWR0aDogYW55KTogYW55O1xyXG4gICAgZ2V0WVNjYWxlKGRvbWFpbjogYW55LCBoZWlnaHQ6IGFueSk6IGFueTtcclxuICAgIG9uQ2xpY2soZGF0YTogYW55LCBzZXJpZXM/OiBhbnkpOiB2b2lkO1xyXG4gICAgc2V0Q29sb3JzKCk6IHZvaWQ7XHJcbiAgICBnZXRMZWdlbmRPcHRpb25zKCk6IHtcclxuICAgICAgICBzY2FsZVR5cGU6IHN0cmluZztcclxuICAgICAgICBjb2xvcnM6IENvbG9ySGVscGVyO1xyXG4gICAgICAgIGRvbWFpbjogYW55O1xyXG4gICAgICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICAgICAgcG9zaXRpb246IHN0cmluZztcclxuICAgIH0gfCB7XHJcbiAgICAgICAgc2NhbGVUeXBlOiBzdHJpbmc7XHJcbiAgICAgICAgY29sb3JzOiBhbnk7XHJcbiAgICAgICAgZG9tYWluOiBhbnk7XHJcbiAgICAgICAgdGl0bGU6IGFueTtcclxuICAgICAgICBwb3NpdGlvbjogc3RyaW5nO1xyXG4gICAgfTtcclxuICAgIHVwZGF0ZVlBeGlzV2lkdGgoeyB3aWR0aCB9OiB7XHJcbiAgICAgICAgd2lkdGg6IGFueTtcclxuICAgIH0pOiB2b2lkO1xyXG4gICAgdXBkYXRlWEF4aXNIZWlnaHQoeyBoZWlnaHQgfToge1xyXG4gICAgICAgIGhlaWdodDogYW55O1xyXG4gICAgfSk6IHZvaWQ7XHJcbiAgICBvbkFjdGl2YXRlKGl0ZW06IGFueSk6IHZvaWQ7XHJcbiAgICBvbkRlYWN0aXZhdGUoaXRlbTogYW55KTogdm9pZDtcclxuICAgIGRlYWN0aXZhdGVBbGwoKTogdm9pZDtcclxuICAgIHRyYWNrQnkoaW5kZXg6IGFueSwgaXRlbTogYW55KTogYW55O1xyXG59XHJcbiJdfQ==