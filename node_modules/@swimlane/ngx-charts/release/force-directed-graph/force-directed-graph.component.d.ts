import { ElementRef, TemplateRef, EventEmitter } from '@angular/core';
import { BaseChartComponent } from '../common/base-chart.component';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import * as ɵngcc0 from '@angular/core';
export declare class ForceDirectedGraphComponent extends BaseChartComponent {
    force: any;
    forceLink: any;
    legend: boolean;
    legendTitle: string;
    legendPosition: string;
    nodes: any[];
    links: Array<{
        source: any;
        target: any;
    }>;
    activeEntries: any[];
    tooltipDisabled: boolean;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    linkTemplate: TemplateRef<any>;
    nodeTemplate: TemplateRef<any>;
    tooltipTemplate: TemplateRef<any>;
    chart: ElementRef;
    colors: ColorHelper;
    dims: ViewDimensions;
    draggingNode: any;
    draggingStart: {
        x: number;
        y: number;
    };
    margin: number[];
    results: any[];
    seriesDomain: any;
    transform: string;
    legendOptions: any;
    groupResultsBy: (node: any) => string;
    update(): void;
    onClick(data: any): void;
    onActivate(event: any): void;
    onDeactivate(event: any): void;
    getSeriesDomain(): any[];
    trackLinkBy(index: any, link: any): any;
    trackNodeBy(index: any, node: any): any;
    setColors(): void;
    getLegendOptions(): {
        scaleType: string;
        domain: any;
        colors: ColorHelper;
        title: string;
        position: string;
    };
    onDragStart(node: any, $event: MouseEvent): void;
    onDrag($event: MouseEvent): void;
    onDragEnd($event: MouseEvent): void;
    escape(label: any): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ForceDirectedGraphComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ForceDirectedGraphComponent, "ngx-charts-force-directed-graph", never, { "activeEntries": "activeEntries"; "force": "force"; "forceLink": "forceLink"; "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "nodes": "nodes"; "links": "links"; "tooltipDisabled": "tooltipDisabled"; "groupResultsBy": "groupResultsBy"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["linkTemplate", "nodeTemplate", "tooltipTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yY2UtZGlyZWN0ZWQtZ3JhcGguY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImZvcmNlLWRpcmVjdGVkLWdyYXBoLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBUZW1wbGF0ZVJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJhc2VDaGFydENvbXBvbmVudCB9IGZyb20gJy4uL2NvbW1vbi9iYXNlLWNoYXJ0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFZpZXdEaW1lbnNpb25zIH0gZnJvbSAnLi4vY29tbW9uL3ZpZXctZGltZW5zaW9ucy5oZWxwZXInO1xyXG5pbXBvcnQgeyBDb2xvckhlbHBlciB9IGZyb20gJy4uL2NvbW1vbi9jb2xvci5oZWxwZXInO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGb3JjZURpcmVjdGVkR3JhcGhDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ2hhcnRDb21wb25lbnQge1xyXG4gICAgZm9yY2U6IGFueTtcclxuICAgIGZvcmNlTGluazogYW55O1xyXG4gICAgbGVnZW5kOiBib29sZWFuO1xyXG4gICAgbGVnZW5kVGl0bGU6IHN0cmluZztcclxuICAgIGxlZ2VuZFBvc2l0aW9uOiBzdHJpbmc7XHJcbiAgICBub2RlczogYW55W107XHJcbiAgICBsaW5rczogQXJyYXk8e1xyXG4gICAgICAgIHNvdXJjZTogYW55O1xyXG4gICAgICAgIHRhcmdldDogYW55O1xyXG4gICAgfT47XHJcbiAgICBhY3RpdmVFbnRyaWVzOiBhbnlbXTtcclxuICAgIHRvb2x0aXBEaXNhYmxlZDogYm9vbGVhbjtcclxuICAgIGFjdGl2YXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGRlYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgbGlua1RlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgbm9kZVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgdG9vbHRpcFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgY2hhcnQ6IEVsZW1lbnRSZWY7XHJcbiAgICBjb2xvcnM6IENvbG9ySGVscGVyO1xyXG4gICAgZGltczogVmlld0RpbWVuc2lvbnM7XHJcbiAgICBkcmFnZ2luZ05vZGU6IGFueTtcclxuICAgIGRyYWdnaW5nU3RhcnQ6IHtcclxuICAgICAgICB4OiBudW1iZXI7XHJcbiAgICAgICAgeTogbnVtYmVyO1xyXG4gICAgfTtcclxuICAgIG1hcmdpbjogbnVtYmVyW107XHJcbiAgICByZXN1bHRzOiBhbnlbXTtcclxuICAgIHNlcmllc0RvbWFpbjogYW55O1xyXG4gICAgdHJhbnNmb3JtOiBzdHJpbmc7XHJcbiAgICBsZWdlbmRPcHRpb25zOiBhbnk7XHJcbiAgICBncm91cFJlc3VsdHNCeTogKG5vZGU6IGFueSkgPT4gc3RyaW5nO1xyXG4gICAgdXBkYXRlKCk6IHZvaWQ7XHJcbiAgICBvbkNsaWNrKGRhdGE6IGFueSk6IHZvaWQ7XHJcbiAgICBvbkFjdGl2YXRlKGV2ZW50OiBhbnkpOiB2b2lkO1xyXG4gICAgb25EZWFjdGl2YXRlKGV2ZW50OiBhbnkpOiB2b2lkO1xyXG4gICAgZ2V0U2VyaWVzRG9tYWluKCk6IGFueVtdO1xyXG4gICAgdHJhY2tMaW5rQnkoaW5kZXg6IGFueSwgbGluazogYW55KTogYW55O1xyXG4gICAgdHJhY2tOb2RlQnkoaW5kZXg6IGFueSwgbm9kZTogYW55KTogYW55O1xyXG4gICAgc2V0Q29sb3JzKCk6IHZvaWQ7XHJcbiAgICBnZXRMZWdlbmRPcHRpb25zKCk6IHtcclxuICAgICAgICBzY2FsZVR5cGU6IHN0cmluZztcclxuICAgICAgICBkb21haW46IGFueTtcclxuICAgICAgICBjb2xvcnM6IENvbG9ySGVscGVyO1xyXG4gICAgICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICAgICAgcG9zaXRpb246IHN0cmluZztcclxuICAgIH07XHJcbiAgICBvbkRyYWdTdGFydChub2RlOiBhbnksICRldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XHJcbiAgICBvbkRyYWcoJGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcclxuICAgIG9uRHJhZ0VuZCgkZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xyXG4gICAgZXNjYXBlKGxhYmVsOiBhbnkpOiBzdHJpbmc7XHJcbn1cclxuIl19