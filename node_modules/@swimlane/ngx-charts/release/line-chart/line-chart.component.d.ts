import { EventEmitter, TemplateRef } from '@angular/core';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import { BaseChartComponent } from '../common/base-chart.component';
import * as ɵngcc0 from '@angular/core';
export declare class LineChartComponent extends BaseChartComponent {
    legend: any;
    legendTitle: string;
    legendPosition: string;
    xAxis: any;
    yAxis: any;
    showXAxisLabel: any;
    showYAxisLabel: any;
    xAxisLabel: any;
    yAxisLabel: any;
    autoScale: any;
    timeline: any;
    gradient: boolean;
    showGridLines: boolean;
    curve: any;
    activeEntries: any[];
    schemeType: string;
    rangeFillOpacity: number;
    trimXAxisTicks: boolean;
    trimYAxisTicks: boolean;
    rotateXAxisTicks: boolean;
    maxXAxisTickLength: number;
    maxYAxisTickLength: number;
    xAxisTickFormatting: any;
    yAxisTickFormatting: any;
    xAxisTicks: any[];
    yAxisTicks: any[];
    roundDomains: boolean;
    tooltipDisabled: boolean;
    showRefLines: boolean;
    referenceLines: any;
    showRefLabels: boolean;
    xScaleMin: any;
    xScaleMax: any;
    yScaleMin: number;
    yScaleMax: number;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    seriesTooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    xSet: any;
    xDomain: any;
    yDomain: any;
    seriesDomain: any;
    yScale: any;
    xScale: any;
    colors: ColorHelper;
    scaleType: string;
    transform: string;
    clipPath: string;
    clipPathId: string;
    series: any;
    areaPath: any;
    margin: number[];
    hoveredVertical: any;
    xAxisHeight: number;
    yAxisWidth: number;
    filteredDomain: any;
    legendOptions: any;
    hasRange: boolean;
    timelineWidth: any;
    timelineHeight: number;
    timelineXScale: any;
    timelineYScale: any;
    timelineXDomain: any;
    timelineTransform: any;
    timelinePadding: number;
    update(): void;
    updateTimeline(): void;
    getXDomain(): any[];
    getYDomain(): any[];
    getSeriesDomain(): any[];
    getXScale(domain: any, width: any): any;
    getYScale(domain: any, height: any): any;
    updateDomain(domain: any): void;
    updateHoveredVertical(item: any): void;
    hideCircles(): void;
    onClick(data: any): void;
    trackBy(index: any, item: any): string;
    setColors(): void;
    getLegendOptions(): {
        scaleType: string;
        colors: any;
        domain: any[];
        title: any;
        position: string;
    };
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onActivate(item: any): void;
    onDeactivate(item: any): void;
    deactivateAll(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LineChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LineChartComponent, "ngx-charts-line-chart", never, { "activeEntries": "activeEntries"; "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "autoScale": "autoScale"; "timeline": "timeline"; "gradient": "gradient"; "showGridLines": "showGridLines"; "curve": "curve"; "schemeType": "schemeType"; "rangeFillOpacity": "rangeFillOpacity"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "roundDomains": "roundDomains"; "tooltipDisabled": "tooltipDisabled"; "showRefLines": "showRefLines"; "referenceLines": "referenceLines"; "showRefLabels": "showRefLabels"; "xScaleMin": "xScaleMin"; "xScaleMax": "xScaleMax"; "yScaleMin": "yScaleMin"; "yScaleMax": "yScaleMax"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate", "seriesTooltipTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS1jaGFydC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibGluZS1jaGFydC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFZpZXdEaW1lbnNpb25zIH0gZnJvbSAnLi4vY29tbW9uL3ZpZXctZGltZW5zaW9ucy5oZWxwZXInO1xyXG5pbXBvcnQgeyBDb2xvckhlbHBlciB9IGZyb20gJy4uL2NvbW1vbi9jb2xvci5oZWxwZXInO1xyXG5pbXBvcnQgeyBCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vYmFzZS1jaGFydC5jb21wb25lbnQnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMaW5lQ2hhcnRDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ2hhcnRDb21wb25lbnQge1xyXG4gICAgbGVnZW5kOiBhbnk7XHJcbiAgICBsZWdlbmRUaXRsZTogc3RyaW5nO1xyXG4gICAgbGVnZW5kUG9zaXRpb246IHN0cmluZztcclxuICAgIHhBeGlzOiBhbnk7XHJcbiAgICB5QXhpczogYW55O1xyXG4gICAgc2hvd1hBeGlzTGFiZWw6IGFueTtcclxuICAgIHNob3dZQXhpc0xhYmVsOiBhbnk7XHJcbiAgICB4QXhpc0xhYmVsOiBhbnk7XHJcbiAgICB5QXhpc0xhYmVsOiBhbnk7XHJcbiAgICBhdXRvU2NhbGU6IGFueTtcclxuICAgIHRpbWVsaW5lOiBhbnk7XHJcbiAgICBncmFkaWVudDogYm9vbGVhbjtcclxuICAgIHNob3dHcmlkTGluZXM6IGJvb2xlYW47XHJcbiAgICBjdXJ2ZTogYW55O1xyXG4gICAgYWN0aXZlRW50cmllczogYW55W107XHJcbiAgICBzY2hlbWVUeXBlOiBzdHJpbmc7XHJcbiAgICByYW5nZUZpbGxPcGFjaXR5OiBudW1iZXI7XHJcbiAgICB0cmltWEF4aXNUaWNrczogYm9vbGVhbjtcclxuICAgIHRyaW1ZQXhpc1RpY2tzOiBib29sZWFuO1xyXG4gICAgcm90YXRlWEF4aXNUaWNrczogYm9vbGVhbjtcclxuICAgIG1heFhBeGlzVGlja0xlbmd0aDogbnVtYmVyO1xyXG4gICAgbWF4WUF4aXNUaWNrTGVuZ3RoOiBudW1iZXI7XHJcbiAgICB4QXhpc1RpY2tGb3JtYXR0aW5nOiBhbnk7XHJcbiAgICB5QXhpc1RpY2tGb3JtYXR0aW5nOiBhbnk7XHJcbiAgICB4QXhpc1RpY2tzOiBhbnlbXTtcclxuICAgIHlBeGlzVGlja3M6IGFueVtdO1xyXG4gICAgcm91bmREb21haW5zOiBib29sZWFuO1xyXG4gICAgdG9vbHRpcERpc2FibGVkOiBib29sZWFuO1xyXG4gICAgc2hvd1JlZkxpbmVzOiBib29sZWFuO1xyXG4gICAgcmVmZXJlbmNlTGluZXM6IGFueTtcclxuICAgIHNob3dSZWZMYWJlbHM6IGJvb2xlYW47XHJcbiAgICB4U2NhbGVNaW46IGFueTtcclxuICAgIHhTY2FsZU1heDogYW55O1xyXG4gICAgeVNjYWxlTWluOiBudW1iZXI7XHJcbiAgICB5U2NhbGVNYXg6IG51bWJlcjtcclxuICAgIGFjdGl2YXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGRlYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgdG9vbHRpcFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgc2VyaWVzVG9vbHRpcFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgZGltczogVmlld0RpbWVuc2lvbnM7XHJcbiAgICB4U2V0OiBhbnk7XHJcbiAgICB4RG9tYWluOiBhbnk7XHJcbiAgICB5RG9tYWluOiBhbnk7XHJcbiAgICBzZXJpZXNEb21haW46IGFueTtcclxuICAgIHlTY2FsZTogYW55O1xyXG4gICAgeFNjYWxlOiBhbnk7XHJcbiAgICBjb2xvcnM6IENvbG9ySGVscGVyO1xyXG4gICAgc2NhbGVUeXBlOiBzdHJpbmc7XHJcbiAgICB0cmFuc2Zvcm06IHN0cmluZztcclxuICAgIGNsaXBQYXRoOiBzdHJpbmc7XHJcbiAgICBjbGlwUGF0aElkOiBzdHJpbmc7XHJcbiAgICBzZXJpZXM6IGFueTtcclxuICAgIGFyZWFQYXRoOiBhbnk7XHJcbiAgICBtYXJnaW46IG51bWJlcltdO1xyXG4gICAgaG92ZXJlZFZlcnRpY2FsOiBhbnk7XHJcbiAgICB4QXhpc0hlaWdodDogbnVtYmVyO1xyXG4gICAgeUF4aXNXaWR0aDogbnVtYmVyO1xyXG4gICAgZmlsdGVyZWREb21haW46IGFueTtcclxuICAgIGxlZ2VuZE9wdGlvbnM6IGFueTtcclxuICAgIGhhc1JhbmdlOiBib29sZWFuO1xyXG4gICAgdGltZWxpbmVXaWR0aDogYW55O1xyXG4gICAgdGltZWxpbmVIZWlnaHQ6IG51bWJlcjtcclxuICAgIHRpbWVsaW5lWFNjYWxlOiBhbnk7XHJcbiAgICB0aW1lbGluZVlTY2FsZTogYW55O1xyXG4gICAgdGltZWxpbmVYRG9tYWluOiBhbnk7XHJcbiAgICB0aW1lbGluZVRyYW5zZm9ybTogYW55O1xyXG4gICAgdGltZWxpbmVQYWRkaW5nOiBudW1iZXI7XHJcbiAgICB1cGRhdGUoKTogdm9pZDtcclxuICAgIHVwZGF0ZVRpbWVsaW5lKCk6IHZvaWQ7XHJcbiAgICBnZXRYRG9tYWluKCk6IGFueVtdO1xyXG4gICAgZ2V0WURvbWFpbigpOiBhbnlbXTtcclxuICAgIGdldFNlcmllc0RvbWFpbigpOiBhbnlbXTtcclxuICAgIGdldFhTY2FsZShkb21haW46IGFueSwgd2lkdGg6IGFueSk6IGFueTtcclxuICAgIGdldFlTY2FsZShkb21haW46IGFueSwgaGVpZ2h0OiBhbnkpOiBhbnk7XHJcbiAgICB1cGRhdGVEb21haW4oZG9tYWluOiBhbnkpOiB2b2lkO1xyXG4gICAgdXBkYXRlSG92ZXJlZFZlcnRpY2FsKGl0ZW06IGFueSk6IHZvaWQ7XHJcbiAgICBoaWRlQ2lyY2xlcygpOiB2b2lkO1xyXG4gICAgb25DbGljayhkYXRhOiBhbnkpOiB2b2lkO1xyXG4gICAgdHJhY2tCeShpbmRleDogYW55LCBpdGVtOiBhbnkpOiBzdHJpbmc7XHJcbiAgICBzZXRDb2xvcnMoKTogdm9pZDtcclxuICAgIGdldExlZ2VuZE9wdGlvbnMoKToge1xyXG4gICAgICAgIHNjYWxlVHlwZTogc3RyaW5nO1xyXG4gICAgICAgIGNvbG9yczogYW55O1xyXG4gICAgICAgIGRvbWFpbjogYW55W107XHJcbiAgICAgICAgdGl0bGU6IGFueTtcclxuICAgICAgICBwb3NpdGlvbjogc3RyaW5nO1xyXG4gICAgfTtcclxuICAgIHVwZGF0ZVlBeGlzV2lkdGgoeyB3aWR0aCB9OiB7XHJcbiAgICAgICAgd2lkdGg6IGFueTtcclxuICAgIH0pOiB2b2lkO1xyXG4gICAgdXBkYXRlWEF4aXNIZWlnaHQoeyBoZWlnaHQgfToge1xyXG4gICAgICAgIGhlaWdodDogYW55O1xyXG4gICAgfSk6IHZvaWQ7XHJcbiAgICBvbkFjdGl2YXRlKGl0ZW06IGFueSk6IHZvaWQ7XHJcbiAgICBvbkRlYWN0aXZhdGUoaXRlbTogYW55KTogdm9pZDtcclxuICAgIGRlYWN0aXZhdGVBbGwoKTogdm9pZDtcclxufVxyXG4iXX0=