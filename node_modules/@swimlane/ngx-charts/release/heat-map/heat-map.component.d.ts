import { TemplateRef, EventEmitter } from '@angular/core';
import { BaseChartComponent } from '../common/base-chart.component';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import * as ɵngcc0 from '@angular/core';
export declare class HeatMapComponent extends BaseChartComponent {
    legend: any;
    legendTitle: string;
    legendPosition: string;
    xAxis: any;
    yAxis: any;
    showXAxisLabel: any;
    showYAxisLabel: any;
    xAxisLabel: any;
    yAxisLabel: any;
    gradient: boolean;
    innerPadding: number | number[];
    trimXAxisTicks: boolean;
    trimYAxisTicks: boolean;
    rotateXAxisTicks: boolean;
    maxXAxisTickLength: number;
    maxYAxisTickLength: number;
    xAxisTickFormatting: any;
    yAxisTickFormatting: any;
    xAxisTicks: any[];
    yAxisTicks: any[];
    tooltipDisabled: boolean;
    tooltipText: any;
    min: any;
    max: any;
    activeEntries: any[];
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    xDomain: any[];
    yDomain: any[];
    valueDomain: any[];
    xScale: any;
    yScale: any;
    color: any;
    colors: ColorHelper;
    colorScale: any;
    transform: string;
    rects: any[];
    margin: number[];
    xAxisHeight: number;
    yAxisWidth: number;
    legendOptions: any;
    scaleType: string;
    update(): void;
    getXDomain(): any;
    getYDomain(): any[];
    getValueDomain(): any[];
    /**
     * Converts the input to gap paddingInner in fraction
     * Supports the following inputs:
     *    Numbers: 8
     *    Strings: "8", "8px", "8%"
     *    Arrays: [8,2], "8,2", "[8,2]"
     *    Mixed: [8,"2%"], ["8px","2%"], "8,2%", "[8,2%]"
     *
     * @param {(string | number | Array<string | number>)} value
     * @param {number} [index=0]
     * @param {number} N
     * @param {number} L
     * @returns {number}
     *
     * @memberOf HeatMapComponent
     */
    getDimension(value: string | number | Array<string | number>, index: number, N: number, L: number): number;
    getXScale(): any;
    getYScale(): any;
    getRects(): any[];
    onClick(data: any): void;
    setColors(): void;
    getLegendOptions(): {
        scaleType: string;
        domain: any[];
        colors: any;
        title: string;
        position: string;
    };
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onActivate(event: any, group: any, fromLegend?: boolean): void;
    onDeactivate(event: any, group: any, fromLegend?: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HeatMapComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<HeatMapComponent, "ngx-charts-heat-map", never, { "activeEntries": "activeEntries"; "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "gradient": "gradient"; "innerPadding": "innerPadding"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "tooltipDisabled": "tooltipDisabled"; "tooltipText": "tooltipText"; "min": "min"; "max": "max"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhdC1tYXAuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImhlYXQtbWFwLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGVSZWYsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vYmFzZS1jaGFydC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBWaWV3RGltZW5zaW9ucyB9IGZyb20gJy4uL2NvbW1vbi92aWV3LWRpbWVuc2lvbnMuaGVscGVyJztcclxuaW1wb3J0IHsgQ29sb3JIZWxwZXIgfSBmcm9tICcuLi9jb21tb24vY29sb3IuaGVscGVyJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSGVhdE1hcENvbXBvbmVudCBleHRlbmRzIEJhc2VDaGFydENvbXBvbmVudCB7XHJcbiAgICBsZWdlbmQ6IGFueTtcclxuICAgIGxlZ2VuZFRpdGxlOiBzdHJpbmc7XHJcbiAgICBsZWdlbmRQb3NpdGlvbjogc3RyaW5nO1xyXG4gICAgeEF4aXM6IGFueTtcclxuICAgIHlBeGlzOiBhbnk7XHJcbiAgICBzaG93WEF4aXNMYWJlbDogYW55O1xyXG4gICAgc2hvd1lBeGlzTGFiZWw6IGFueTtcclxuICAgIHhBeGlzTGFiZWw6IGFueTtcclxuICAgIHlBeGlzTGFiZWw6IGFueTtcclxuICAgIGdyYWRpZW50OiBib29sZWFuO1xyXG4gICAgaW5uZXJQYWRkaW5nOiBudW1iZXIgfCBudW1iZXJbXTtcclxuICAgIHRyaW1YQXhpc1RpY2tzOiBib29sZWFuO1xyXG4gICAgdHJpbVlBeGlzVGlja3M6IGJvb2xlYW47XHJcbiAgICByb3RhdGVYQXhpc1RpY2tzOiBib29sZWFuO1xyXG4gICAgbWF4WEF4aXNUaWNrTGVuZ3RoOiBudW1iZXI7XHJcbiAgICBtYXhZQXhpc1RpY2tMZW5ndGg6IG51bWJlcjtcclxuICAgIHhBeGlzVGlja0Zvcm1hdHRpbmc6IGFueTtcclxuICAgIHlBeGlzVGlja0Zvcm1hdHRpbmc6IGFueTtcclxuICAgIHhBeGlzVGlja3M6IGFueVtdO1xyXG4gICAgeUF4aXNUaWNrczogYW55W107XHJcbiAgICB0b29sdGlwRGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICB0b29sdGlwVGV4dDogYW55O1xyXG4gICAgbWluOiBhbnk7XHJcbiAgICBtYXg6IGFueTtcclxuICAgIGFjdGl2ZUVudHJpZXM6IGFueVtdO1xyXG4gICAgYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgZGVhY3RpdmF0ZTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICB0b29sdGlwVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgICBkaW1zOiBWaWV3RGltZW5zaW9ucztcclxuICAgIHhEb21haW46IGFueVtdO1xyXG4gICAgeURvbWFpbjogYW55W107XHJcbiAgICB2YWx1ZURvbWFpbjogYW55W107XHJcbiAgICB4U2NhbGU6IGFueTtcclxuICAgIHlTY2FsZTogYW55O1xyXG4gICAgY29sb3I6IGFueTtcclxuICAgIGNvbG9yczogQ29sb3JIZWxwZXI7XHJcbiAgICBjb2xvclNjYWxlOiBhbnk7XHJcbiAgICB0cmFuc2Zvcm06IHN0cmluZztcclxuICAgIHJlY3RzOiBhbnlbXTtcclxuICAgIG1hcmdpbjogbnVtYmVyW107XHJcbiAgICB4QXhpc0hlaWdodDogbnVtYmVyO1xyXG4gICAgeUF4aXNXaWR0aDogbnVtYmVyO1xyXG4gICAgbGVnZW5kT3B0aW9uczogYW55O1xyXG4gICAgc2NhbGVUeXBlOiBzdHJpbmc7XHJcbiAgICB1cGRhdGUoKTogdm9pZDtcclxuICAgIGdldFhEb21haW4oKTogYW55O1xyXG4gICAgZ2V0WURvbWFpbigpOiBhbnlbXTtcclxuICAgIGdldFZhbHVlRG9tYWluKCk6IGFueVtdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyB0aGUgaW5wdXQgdG8gZ2FwIHBhZGRpbmdJbm5lciBpbiBmcmFjdGlvblxyXG4gICAgICogU3VwcG9ydHMgdGhlIGZvbGxvd2luZyBpbnB1dHM6XHJcbiAgICAgKiAgICBOdW1iZXJzOiA4XHJcbiAgICAgKiAgICBTdHJpbmdzOiBcIjhcIiwgXCI4cHhcIiwgXCI4JVwiXHJcbiAgICAgKiAgICBBcnJheXM6IFs4LDJdLCBcIjgsMlwiLCBcIls4LDJdXCJcclxuICAgICAqICAgIE1peGVkOiBbOCxcIjIlXCJdLCBbXCI4cHhcIixcIjIlXCJdLCBcIjgsMiVcIiwgXCJbOCwyJV1cIlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7KHN0cmluZyB8IG51bWJlciB8IEFycmF5PHN0cmluZyB8IG51bWJlcj4pfSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtpbmRleD0wXVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IE5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBMXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJPZiBIZWF0TWFwQ29tcG9uZW50XHJcbiAgICAgKi9cclxuICAgIGdldERpbWVuc2lvbih2YWx1ZTogc3RyaW5nIHwgbnVtYmVyIHwgQXJyYXk8c3RyaW5nIHwgbnVtYmVyPiwgaW5kZXg6IG51bWJlciwgTjogbnVtYmVyLCBMOiBudW1iZXIpOiBudW1iZXI7XHJcbiAgICBnZXRYU2NhbGUoKTogYW55O1xyXG4gICAgZ2V0WVNjYWxlKCk6IGFueTtcclxuICAgIGdldFJlY3RzKCk6IGFueVtdO1xyXG4gICAgb25DbGljayhkYXRhOiBhbnkpOiB2b2lkO1xyXG4gICAgc2V0Q29sb3JzKCk6IHZvaWQ7XHJcbiAgICBnZXRMZWdlbmRPcHRpb25zKCk6IHtcclxuICAgICAgICBzY2FsZVR5cGU6IHN0cmluZztcclxuICAgICAgICBkb21haW46IGFueVtdO1xyXG4gICAgICAgIGNvbG9yczogYW55O1xyXG4gICAgICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICAgICAgcG9zaXRpb246IHN0cmluZztcclxuICAgIH07XHJcbiAgICB1cGRhdGVZQXhpc1dpZHRoKHsgd2lkdGggfToge1xyXG4gICAgICAgIHdpZHRoOiBhbnk7XHJcbiAgICB9KTogdm9pZDtcclxuICAgIHVwZGF0ZVhBeGlzSGVpZ2h0KHsgaGVpZ2h0IH06IHtcclxuICAgICAgICBoZWlnaHQ6IGFueTtcclxuICAgIH0pOiB2b2lkO1xyXG4gICAgb25BY3RpdmF0ZShldmVudDogYW55LCBncm91cDogYW55LCBmcm9tTGVnZW5kPzogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICBvbkRlYWN0aXZhdGUoZXZlbnQ6IGFueSwgZ3JvdXA6IGFueSwgZnJvbUxlZ2VuZD86IGJvb2xlYW4pOiB2b2lkO1xyXG59XHJcbiJdfQ==