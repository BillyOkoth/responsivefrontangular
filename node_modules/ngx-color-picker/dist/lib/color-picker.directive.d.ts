import { OnChanges, OnDestroy, EventEmitter, ApplicationRef, ElementRef, ViewContainerRef, Injector, ComponentFactoryResolver } from '@angular/core';
import { ColorPickerService } from './color-picker.service';
import { AlphaChannel, ColorMode, OutputFormat } from './helpers';
import * as ɵngcc0 from '@angular/core';
export declare class ColorPickerDirective implements OnChanges, OnDestroy {
    private injector;
    private cfr;
    private appRef;
    private vcRef;
    private elRef;
    private _service;
    private dialog;
    private dialogCreated;
    private ignoreChanges;
    private cmpRef;
    colorPicker: string;
    cpWidth: string;
    cpHeight: string;
    cpToggle: boolean;
    cpDisabled: boolean;
    cpIgnoredElements: any;
    cpFallbackColor: string;
    cpColorMode: ColorMode;
    cpCmykEnabled: boolean;
    cpOutputFormat: OutputFormat;
    cpAlphaChannel: AlphaChannel;
    cpDisableInput: boolean;
    cpDialogDisplay: string;
    cpSaveClickOutside: boolean;
    cpCloseClickOutside: boolean;
    cpUseRootViewContainer: boolean;
    cpPosition: string;
    cpPositionOffset: string;
    cpPositionRelativeToArrow: boolean;
    cpOKButton: boolean;
    cpOKButtonText: string;
    cpOKButtonClass: string;
    cpCancelButton: boolean;
    cpCancelButtonText: string;
    cpCancelButtonClass: string;
    cpPresetLabel: string;
    cpPresetColors: string[];
    cpPresetColorsClass: string;
    cpMaxPresetColorsLength: number;
    cpPresetEmptyMessage: string;
    cpPresetEmptyMessageClass: string;
    cpAddColorButton: boolean;
    cpAddColorButtonText: string;
    cpAddColorButtonClass: string;
    cpRemoveColorButtonClass: string;
    cpInputChange: EventEmitter<{
        input: string;
        value: string | number;
        color: string;
    }>;
    cpToggleChange: EventEmitter<boolean>;
    cpSliderChange: EventEmitter<{
        slider: string;
        value: string | number;
        color: string;
    }>;
    cpSliderDragEnd: EventEmitter<{
        slider: string;
        color: string;
    }>;
    cpSliderDragStart: EventEmitter<{
        slider: string;
        color: string;
    }>;
    colorPickerOpen: EventEmitter<string>;
    colorPickerClose: EventEmitter<string>;
    colorPickerCancel: EventEmitter<string>;
    colorPickerSelect: EventEmitter<string>;
    colorPickerChange: EventEmitter<string>;
    cpCmykColorChange: EventEmitter<string>;
    cpPresetColorsChange: EventEmitter<any>;
    handleClick(): void;
    handleFocus(): void;
    handleInput(event: any): void;
    constructor(injector: Injector, cfr: ComponentFactoryResolver, appRef: ApplicationRef, vcRef: ViewContainerRef, elRef: ElementRef, _service: ColorPickerService);
    ngOnDestroy(): void;
    ngOnChanges(changes: any): void;
    openDialog(): void;
    closeDialog(): void;
    cmykChanged(value: string): void;
    stateChanged(state: boolean): void;
    colorChanged(value: string, ignore?: boolean): void;
    colorSelected(value: string): void;
    colorCanceled(): void;
    inputFocus(): void;
    inputChange(event: any): void;
    inputChanged(event: any): void;
    sliderChanged(event: any): void;
    sliderDragEnd(event: {
        slider: string;
        color: string;
    }): void;
    sliderDragStart(event: {
        slider: string;
        color: string;
    }): void;
    presetColorsChanged(value: any[]): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ColorPickerDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ColorPickerDirective, "[colorPicker]", ["ngxColorPicker"], { "cpWidth": "cpWidth"; "cpHeight": "cpHeight"; "cpToggle": "cpToggle"; "cpDisabled": "cpDisabled"; "cpIgnoredElements": "cpIgnoredElements"; "cpFallbackColor": "cpFallbackColor"; "cpColorMode": "cpColorMode"; "cpCmykEnabled": "cpCmykEnabled"; "cpOutputFormat": "cpOutputFormat"; "cpAlphaChannel": "cpAlphaChannel"; "cpDisableInput": "cpDisableInput"; "cpDialogDisplay": "cpDialogDisplay"; "cpSaveClickOutside": "cpSaveClickOutside"; "cpCloseClickOutside": "cpCloseClickOutside"; "cpUseRootViewContainer": "cpUseRootViewContainer"; "cpPosition": "cpPosition"; "cpPositionOffset": "cpPositionOffset"; "cpPositionRelativeToArrow": "cpPositionRelativeToArrow"; "cpOKButton": "cpOKButton"; "cpOKButtonText": "cpOKButtonText"; "cpOKButtonClass": "cpOKButtonClass"; "cpCancelButton": "cpCancelButton"; "cpCancelButtonText": "cpCancelButtonText"; "cpCancelButtonClass": "cpCancelButtonClass"; "cpPresetLabel": "cpPresetLabel"; "cpPresetColorsClass": "cpPresetColorsClass"; "cpMaxPresetColorsLength": "cpMaxPresetColorsLength"; "cpPresetEmptyMessage": "cpPresetEmptyMessage"; "cpPresetEmptyMessageClass": "cpPresetEmptyMessageClass"; "cpAddColorButton": "cpAddColorButton"; "cpAddColorButtonText": "cpAddColorButtonText"; "cpAddColorButtonClass": "cpAddColorButtonClass"; "cpRemoveColorButtonClass": "cpRemoveColorButtonClass"; "colorPicker": "colorPicker"; "cpPresetColors": "cpPresetColors"; }, { "cpInputChange": "cpInputChange"; "cpToggleChange": "cpToggleChange"; "cpSliderChange": "cpSliderChange"; "cpSliderDragEnd": "cpSliderDragEnd"; "cpSliderDragStart": "cpSliderDragStart"; "colorPickerOpen": "colorPickerOpen"; "colorPickerClose": "colorPickerClose"; "colorPickerCancel": "colorPickerCancel"; "colorPickerSelect": "colorPickerSelect"; "colorPickerChange": "colorPickerChange"; "cpCmykColorChange": "cpCmykColorChange"; "cpPresetColorsChange": "cpPresetColorsChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItcGlja2VyLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJjb2xvci1waWNrZXIuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIEV2ZW50RW1pdHRlciwgQXBwbGljYXRpb25SZWYsIEVsZW1lbnRSZWYsIFZpZXdDb250YWluZXJSZWYsIEluamVjdG9yLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbG9yUGlja2VyU2VydmljZSB9IGZyb20gJy4vY29sb3ItcGlja2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWxwaGFDaGFubmVsLCBDb2xvck1vZGUsIE91dHB1dEZvcm1hdCB9IGZyb20gJy4vaGVscGVycyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDb2xvclBpY2tlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIHByaXZhdGUgY2ZyO1xuICAgIHByaXZhdGUgYXBwUmVmO1xuICAgIHByaXZhdGUgdmNSZWY7XG4gICAgcHJpdmF0ZSBlbFJlZjtcbiAgICBwcml2YXRlIF9zZXJ2aWNlO1xuICAgIHByaXZhdGUgZGlhbG9nO1xuICAgIHByaXZhdGUgZGlhbG9nQ3JlYXRlZDtcbiAgICBwcml2YXRlIGlnbm9yZUNoYW5nZXM7XG4gICAgcHJpdmF0ZSBjbXBSZWY7XG4gICAgY29sb3JQaWNrZXI6IHN0cmluZztcbiAgICBjcFdpZHRoOiBzdHJpbmc7XG4gICAgY3BIZWlnaHQ6IHN0cmluZztcbiAgICBjcFRvZ2dsZTogYm9vbGVhbjtcbiAgICBjcERpc2FibGVkOiBib29sZWFuO1xuICAgIGNwSWdub3JlZEVsZW1lbnRzOiBhbnk7XG4gICAgY3BGYWxsYmFja0NvbG9yOiBzdHJpbmc7XG4gICAgY3BDb2xvck1vZGU6IENvbG9yTW9kZTtcbiAgICBjcENteWtFbmFibGVkOiBib29sZWFuO1xuICAgIGNwT3V0cHV0Rm9ybWF0OiBPdXRwdXRGb3JtYXQ7XG4gICAgY3BBbHBoYUNoYW5uZWw6IEFscGhhQ2hhbm5lbDtcbiAgICBjcERpc2FibGVJbnB1dDogYm9vbGVhbjtcbiAgICBjcERpYWxvZ0Rpc3BsYXk6IHN0cmluZztcbiAgICBjcFNhdmVDbGlja091dHNpZGU6IGJvb2xlYW47XG4gICAgY3BDbG9zZUNsaWNrT3V0c2lkZTogYm9vbGVhbjtcbiAgICBjcFVzZVJvb3RWaWV3Q29udGFpbmVyOiBib29sZWFuO1xuICAgIGNwUG9zaXRpb246IHN0cmluZztcbiAgICBjcFBvc2l0aW9uT2Zmc2V0OiBzdHJpbmc7XG4gICAgY3BQb3NpdGlvblJlbGF0aXZlVG9BcnJvdzogYm9vbGVhbjtcbiAgICBjcE9LQnV0dG9uOiBib29sZWFuO1xuICAgIGNwT0tCdXR0b25UZXh0OiBzdHJpbmc7XG4gICAgY3BPS0J1dHRvbkNsYXNzOiBzdHJpbmc7XG4gICAgY3BDYW5jZWxCdXR0b246IGJvb2xlYW47XG4gICAgY3BDYW5jZWxCdXR0b25UZXh0OiBzdHJpbmc7XG4gICAgY3BDYW5jZWxCdXR0b25DbGFzczogc3RyaW5nO1xuICAgIGNwUHJlc2V0TGFiZWw6IHN0cmluZztcbiAgICBjcFByZXNldENvbG9yczogc3RyaW5nW107XG4gICAgY3BQcmVzZXRDb2xvcnNDbGFzczogc3RyaW5nO1xuICAgIGNwTWF4UHJlc2V0Q29sb3JzTGVuZ3RoOiBudW1iZXI7XG4gICAgY3BQcmVzZXRFbXB0eU1lc3NhZ2U6IHN0cmluZztcbiAgICBjcFByZXNldEVtcHR5TWVzc2FnZUNsYXNzOiBzdHJpbmc7XG4gICAgY3BBZGRDb2xvckJ1dHRvbjogYm9vbGVhbjtcbiAgICBjcEFkZENvbG9yQnV0dG9uVGV4dDogc3RyaW5nO1xuICAgIGNwQWRkQ29sb3JCdXR0b25DbGFzczogc3RyaW5nO1xuICAgIGNwUmVtb3ZlQ29sb3JCdXR0b25DbGFzczogc3RyaW5nO1xuICAgIGNwSW5wdXRDaGFuZ2U6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIGlucHV0OiBzdHJpbmc7XG4gICAgICAgIHZhbHVlOiBzdHJpbmcgfCBudW1iZXI7XG4gICAgICAgIGNvbG9yOiBzdHJpbmc7XG4gICAgfT47XG4gICAgY3BUb2dnbGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICBjcFNsaWRlckNoYW5nZTogRXZlbnRFbWl0dGVyPHtcbiAgICAgICAgc2xpZGVyOiBzdHJpbmc7XG4gICAgICAgIHZhbHVlOiBzdHJpbmcgfCBudW1iZXI7XG4gICAgICAgIGNvbG9yOiBzdHJpbmc7XG4gICAgfT47XG4gICAgY3BTbGlkZXJEcmFnRW5kOiBFdmVudEVtaXR0ZXI8e1xuICAgICAgICBzbGlkZXI6IHN0cmluZztcbiAgICAgICAgY29sb3I6IHN0cmluZztcbiAgICB9PjtcbiAgICBjcFNsaWRlckRyYWdTdGFydDogRXZlbnRFbWl0dGVyPHtcbiAgICAgICAgc2xpZGVyOiBzdHJpbmc7XG4gICAgICAgIGNvbG9yOiBzdHJpbmc7XG4gICAgfT47XG4gICAgY29sb3JQaWNrZXJPcGVuOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICBjb2xvclBpY2tlckNsb3NlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICBjb2xvclBpY2tlckNhbmNlbDogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgY29sb3JQaWNrZXJTZWxlY3Q6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIGNvbG9yUGlja2VyQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICBjcENteWtDb2xvckNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgY3BQcmVzZXRDb2xvcnNDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGhhbmRsZUNsaWNrKCk6IHZvaWQ7XG4gICAgaGFuZGxlRm9jdXMoKTogdm9pZDtcbiAgICBoYW5kbGVJbnB1dChldmVudDogYW55KTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihpbmplY3RvcjogSW5qZWN0b3IsIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBhcHBSZWY6IEFwcGxpY2F0aW9uUmVmLCB2Y1JlZjogVmlld0NvbnRhaW5lclJlZiwgZWxSZWY6IEVsZW1lbnRSZWYsIF9zZXJ2aWNlOiBDb2xvclBpY2tlclNlcnZpY2UpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogYW55KTogdm9pZDtcbiAgICBvcGVuRGlhbG9nKCk6IHZvaWQ7XG4gICAgY2xvc2VEaWFsb2coKTogdm9pZDtcbiAgICBjbXlrQ2hhbmdlZCh2YWx1ZTogc3RyaW5nKTogdm9pZDtcbiAgICBzdGF0ZUNoYW5nZWQoc3RhdGU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIGNvbG9yQ2hhbmdlZCh2YWx1ZTogc3RyaW5nLCBpZ25vcmU/OiBib29sZWFuKTogdm9pZDtcbiAgICBjb2xvclNlbGVjdGVkKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgIGNvbG9yQ2FuY2VsZWQoKTogdm9pZDtcbiAgICBpbnB1dEZvY3VzKCk6IHZvaWQ7XG4gICAgaW5wdXRDaGFuZ2UoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgaW5wdXRDaGFuZ2VkKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHNsaWRlckNoYW5nZWQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgc2xpZGVyRHJhZ0VuZChldmVudDoge1xuICAgICAgICBzbGlkZXI6IHN0cmluZztcbiAgICAgICAgY29sb3I6IHN0cmluZztcbiAgICB9KTogdm9pZDtcbiAgICBzbGlkZXJEcmFnU3RhcnQoZXZlbnQ6IHtcbiAgICAgICAgc2xpZGVyOiBzdHJpbmc7XG4gICAgICAgIGNvbG9yOiBzdHJpbmc7XG4gICAgfSk6IHZvaWQ7XG4gICAgcHJlc2V0Q29sb3JzQ2hhbmdlZCh2YWx1ZTogYW55W10pOiB2b2lkO1xufVxuIl19