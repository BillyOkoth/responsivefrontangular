import { EventEmitter, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare type ColorMode = 'color' | 'c' | '1' | 'grayscale' | 'g' | '2' | 'presets' | 'p' | '3';
export declare type AlphaChannel = 'enabled' | 'disabled' | 'always' | 'forced';
export declare type OutputFormat = 'auto' | 'hex' | 'rgba' | 'hsla';
export declare function detectIE(): boolean | number;
export declare class TextDirective {
    rg: number;
    text: any;
    newValue: EventEmitter<any>;
    inputChange(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TextDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TextDirective, "[text]", never, { "rg": "rg"; "text": "text"; }, { "newValue": "newValue"; }, never>;
}
export declare class SliderDirective {
    private elRef;
    private listenerMove;
    private listenerStop;
    rgX: number;
    rgY: number;
    slider: string;
    dragEnd: EventEmitter<{}>;
    dragStart: EventEmitter<{}>;
    newValue: EventEmitter<any>;
    mouseDown(event: any): void;
    touchStart(event: any): void;
    constructor(elRef: ElementRef);
    private move;
    private start;
    private stop;
    private getX;
    private getY;
    private setCursor;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SliderDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SliderDirective, "[slider]", never, { "rgX": "rgX"; "rgY": "rgY"; "slider": "slider"; }, { "dragEnd": "dragEnd"; "dragStart": "dragStart"; "newValue": "newValue"; }, never>;
}
export declare class SliderPosition {
    h: number;
    s: number;
    v: number;
    a: number;
    constructor(h: number, s: number, v: number, a: number);
}
export declare class SliderDimension {
    h: number;
    s: number;
    v: number;
    a: number;
    constructor(h: number, s: number, v: number, a: number);
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5kLnRzIiwic291cmNlcyI6WyJoZWxwZXJzLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIHR5cGUgQ29sb3JNb2RlID0gJ2NvbG9yJyB8ICdjJyB8ICcxJyB8ICdncmF5c2NhbGUnIHwgJ2cnIHwgJzInIHwgJ3ByZXNldHMnIHwgJ3AnIHwgJzMnO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBBbHBoYUNoYW5uZWwgPSAnZW5hYmxlZCcgfCAnZGlzYWJsZWQnIHwgJ2Fsd2F5cycgfCAnZm9yY2VkJztcbmV4cG9ydCBkZWNsYXJlIHR5cGUgT3V0cHV0Rm9ybWF0ID0gJ2F1dG8nIHwgJ2hleCcgfCAncmdiYScgfCAnaHNsYSc7XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBkZXRlY3RJRSgpOiBib29sZWFuIHwgbnVtYmVyO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGV4dERpcmVjdGl2ZSB7XG4gICAgcmc6IG51bWJlcjtcbiAgICB0ZXh0OiBhbnk7XG4gICAgbmV3VmFsdWU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGlucHV0Q2hhbmdlKGV2ZW50OiBhbnkpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2xpZGVyRGlyZWN0aXZlIHtcbiAgICBwcml2YXRlIGVsUmVmO1xuICAgIHByaXZhdGUgbGlzdGVuZXJNb3ZlO1xuICAgIHByaXZhdGUgbGlzdGVuZXJTdG9wO1xuICAgIHJnWDogbnVtYmVyO1xuICAgIHJnWTogbnVtYmVyO1xuICAgIHNsaWRlcjogc3RyaW5nO1xuICAgIGRyYWdFbmQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgZHJhZ1N0YXJ0OiBFdmVudEVtaXR0ZXI8e30+O1xuICAgIG5ld1ZhbHVlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBtb3VzZURvd24oZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgdG91Y2hTdGFydChldmVudDogYW55KTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihlbFJlZjogRWxlbWVudFJlZik7XG4gICAgcHJpdmF0ZSBtb3ZlO1xuICAgIHByaXZhdGUgc3RhcnQ7XG4gICAgcHJpdmF0ZSBzdG9wO1xuICAgIHByaXZhdGUgZ2V0WDtcbiAgICBwcml2YXRlIGdldFk7XG4gICAgcHJpdmF0ZSBzZXRDdXJzb3I7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTbGlkZXJQb3NpdGlvbiB7XG4gICAgaDogbnVtYmVyO1xuICAgIHM6IG51bWJlcjtcbiAgICB2OiBudW1iZXI7XG4gICAgYTogbnVtYmVyO1xuICAgIGNvbnN0cnVjdG9yKGg6IG51bWJlciwgczogbnVtYmVyLCB2OiBudW1iZXIsIGE6IG51bWJlcik7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTbGlkZXJEaW1lbnNpb24ge1xuICAgIGg6IG51bWJlcjtcbiAgICBzOiBudW1iZXI7XG4gICAgdjogbnVtYmVyO1xuICAgIGE6IG51bWJlcjtcbiAgICBjb25zdHJ1Y3RvcihoOiBudW1iZXIsIHM6IG51bWJlciwgdjogbnVtYmVyLCBhOiBudW1iZXIpO1xufVxuIl19