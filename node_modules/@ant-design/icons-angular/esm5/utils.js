import { isDevMode } from '@angular/core';
import { generate as generateColor } from '@ant-design/colors';
export var ANT_ICON_ANGULAR_CONSOLE_PREFIX = '[@ant-design/icons-angular]:';
export function error(message) {
    console.error(ANT_ICON_ANGULAR_CONSOLE_PREFIX + " " + message + ".");
}
export function warn(message) {
    if (isDevMode()) {
        console.warn(ANT_ICON_ANGULAR_CONSOLE_PREFIX + " " + message + ".");
    }
}
export function getSecondaryColor(primaryColor) {
    return generateColor(primaryColor)[0];
}
export function withSuffix(name, theme) {
    switch (theme) {
        case 'fill': return name + "-fill";
        case 'outline': return name + "-o";
        case 'twotone': return name + "-twotone";
        case undefined: return name;
        default: throw new Error(ANT_ICON_ANGULAR_CONSOLE_PREFIX + "Theme \"" + theme + "\" is not a recognized theme!");
    }
}
export function withSuffixAndColor(name, theme, pri, sec) {
    return withSuffix(name, theme) + "-" + pri + "-" + sec;
}
export function mapAbbrToTheme(abbr) {
    return abbr === 'o' ? 'outline' : abbr;
}
export function alreadyHasAThemeSuffix(name) {
    return name.endsWith('-fill') || name.endsWith('-o') || name.endsWith('-twotone');
}
export function isIconDefinition(target) {
    return (typeof target === 'object' &&
        typeof target.name === 'string' &&
        (typeof target.theme === 'string' || target.theme === undefined) &&
        typeof target.icon === 'string');
}
/**
 * Get an `IconDefinition` object from abbreviation type, like `account-book-fill`.
 * @param str
 */
export function getIconDefinitionFromAbbr(str) {
    var arr = str.split('-');
    var theme = mapAbbrToTheme(arr.splice(arr.length - 1, 1)[0]);
    var name = arr.join('-');
    return {
        name: name,
        theme: theme,
        icon: ''
    };
}
export function cloneSVG(svg) {
    return svg.cloneNode(true);
}
/**
 * Parse inline SVG string and replace colors with placeholders. For twotone icons only.
 */
export function replaceFillColor(raw) {
    return raw
        .replace(/['"]#333['"]/g, '"primaryColor"')
        .replace(/['"]#E6E6E6['"]/g, '"secondaryColor"')
        .replace(/['"]#D9D9D9['"]/g, '"secondaryColor"')
        .replace(/['"]#D8D8D8['"]/g, '"secondaryColor"');
}
/**
 * Split a name with namespace in it into a tuple like [ name, namespace ].
 */
export function getNameAndNamespace(type) {
    var split = type.split(':');
    switch (split.length) {
        case 1: return [type, ''];
        case 2: return [split[1], split[0]];
        default: throw new Error(ANT_ICON_ANGULAR_CONSOLE_PREFIX + "The icon type " + type + " is not valid!");
    }
}
export function hasNamespace(type) {
    return getNameAndNamespace(type)[1] !== '';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW50LWRlc2lnbi9pY29ucy1hbmd1bGFyLyIsInNvdXJjZXMiOlsidXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsUUFBUSxJQUFJLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSS9ELE1BQU0sQ0FBQyxJQUFNLCtCQUErQixHQUFHLDhCQUE4QixDQUFDO0FBRTlFLE1BQU0sVUFBVSxLQUFLLENBQUMsT0FBZTtJQUNuQyxPQUFPLENBQUMsS0FBSyxDQUFJLCtCQUErQixTQUFJLE9BQU8sTUFBRyxDQUFDLENBQUM7QUFDbEUsQ0FBQztBQUVELE1BQU0sVUFBVSxJQUFJLENBQUMsT0FBZTtJQUNsQyxJQUFJLFNBQVMsRUFBRSxFQUFFO1FBQ2YsT0FBTyxDQUFDLElBQUksQ0FBSSwrQkFBK0IsU0FBSSxPQUFPLE1BQUcsQ0FBQyxDQUFDO0tBQ2hFO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxZQUFvQjtJQUNwRCxPQUFPLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxJQUFZLEVBQUUsS0FBNEI7SUFDbkUsUUFBUSxLQUFLLEVBQUU7UUFDYixLQUFLLE1BQU0sQ0FBQyxDQUFDLE9BQVUsSUFBSSxVQUFPLENBQUM7UUFDbkMsS0FBSyxTQUFTLENBQUMsQ0FBQyxPQUFVLElBQUksT0FBSSxDQUFDO1FBQ25DLEtBQUssU0FBUyxDQUFDLENBQUMsT0FBVSxJQUFJLGFBQVUsQ0FBQztRQUN6QyxLQUFLLFNBQVMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUksK0JBQStCLGdCQUFVLEtBQUssa0NBQThCLENBQUMsQ0FB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QUFFLENBQUM7QUFDN0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRGV2TW9kZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2VuZXJhdGUgYXMgZ2VuZXJhdGVDb2xvciB9IGZyb20gJ0BhbnQtZGVzaWduL2NvbG9ycyc7XG5cbmltcG9ydCB7IEljb25EZWZpbml0aW9uLCBUaGVtZVR5cGUgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IEFOVF9JQ09OX0FOR1VMQVJfQ09OU09MRV9QUkVGSVggPSAnW0BhbnQtZGVzaWduL2ljb25zLWFuZ3VsYXJdOic7XG5cbmV4cG9ydCBmdW5jdGlvbiBlcnJvcihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgY29uc29sZS5lcnJvcihgJHtBTlRfSUNPTl9BTkdVTEFSX0NPTlNPTEVfUFJFRklYfSAke21lc3NhZ2V9LmApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2FybihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgaWYgKGlzRGV2TW9kZSgpKSB7XG4gICAgY29uc29sZS53YXJuKGAke0FOVF9JQ09OX0FOR1VMQVJfQ09OU09MRV9QUkVGSVh9ICR7bWVzc2FnZX0uYCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlY29uZGFyeUNvbG9yKHByaW1hcnlDb2xvcjogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGdlbmVyYXRlQ29sb3IocHJpbWFyeUNvbG9yKVswXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhTdWZmaXgobmFtZTogc3RyaW5nLCB0aGVtZTogVGhlbWVUeXBlIHwgdW5kZWZpbmVkKTogc3RyaW5nIHtcbiAgc3dpdGNoICh0aGVtZSkge1xuICAgIGNhc2UgJ2ZpbGwnOiByZXR1cm4gYCR7bmFtZX0tZmlsbGA7XG4gICAgY2FzZSAnb3V0bGluZSc6IHJldHVybiBgJHtuYW1lfS1vYDtcbiAgICBjYXNlICd0d290b25lJzogcmV0dXJuIGAke25hbWV9LXR3b3RvbmVgO1xuICAgIGNhc2UgdW5kZWZpbmVkOiByZXR1cm4gbmFtZTtcbiAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYCR7QU5UX0lDT05fQU5HVUxBUl9DT05TT0xFX1BSRUZJWH1UaGVtZSBcIiR7dGhlbWV9XCIgaXMgbm90IGEgcmVjb2duaXplZCB0aGVtZSFgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd2l0aFN1ZmZpeEFuZENvbG9yKG5hbWU6IHN0cmluZywgdGhlbWU6IFRoZW1lVHlwZSwgcHJpOiBzdHJpbmcsIHNlYzogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke3dpdGhTdWZmaXgobmFtZSwgdGhlbWUpfS0ke3ByaX0tJHtzZWN9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcEFiYnJUb1RoZW1lKGFiYnI6IHN0cmluZyk6IFRoZW1lVHlwZSB7XG4gIHJldHVybiBhYmJyID09PSAnbycgPyAnb3V0bGluZScgOiBhYmJyIGFzIFRoZW1lVHlwZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFscmVhZHlIYXNBVGhlbWVTdWZmaXgobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBuYW1lLmVuZHNXaXRoKCctZmlsbCcpIHx8IG5hbWUuZW5kc1dpdGgoJy1vJykgfHwgbmFtZS5lbmRzV2l0aCgnLXR3b3RvbmUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSWNvbkRlZmluaXRpb24odGFyZ2V0OiBzdHJpbmcgfCBJY29uRGVmaW5pdGlvbik6IHRhcmdldCBpcyBJY29uRGVmaW5pdGlvbiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2YgdGFyZ2V0Lm5hbWUgPT09ICdzdHJpbmcnICYmXG4gICAgKHR5cGVvZiB0YXJnZXQudGhlbWUgPT09ICdzdHJpbmcnIHx8IHRhcmdldC50aGVtZSA9PT0gdW5kZWZpbmVkKSAmJlxuICAgIHR5cGVvZiB0YXJnZXQuaWNvbiA9PT0gJ3N0cmluZydcbiAgKTtcbn1cblxuLyoqXG4gKiBHZXQgYW4gYEljb25EZWZpbml0aW9uYCBvYmplY3QgZnJvbSBhYmJyZXZpYXRpb24gdHlwZSwgbGlrZSBgYWNjb3VudC1ib29rLWZpbGxgLlxuICogQHBhcmFtIHN0clxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SWNvbkRlZmluaXRpb25Gcm9tQWJicihzdHI6IHN0cmluZyk6IEljb25EZWZpbml0aW9uIHtcbiAgY29uc3QgYXJyID0gc3RyLnNwbGl0KCctJyk7XG4gIGNvbnN0IHRoZW1lID0gbWFwQWJiclRvVGhlbWUoYXJyLnNwbGljZShhcnIubGVuZ3RoIC0gMSwgMSlbMF0pO1xuICBjb25zdCBuYW1lID0gYXJyLmpvaW4oJy0nKTtcblxuICByZXR1cm4ge1xuICAgIG5hbWUsXG4gICAgdGhlbWUsXG4gICAgaWNvbjogJydcbiAgfSBhcyBJY29uRGVmaW5pdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lU1ZHKHN2ZzogU1ZHRWxlbWVudCk6IFNWR0VsZW1lbnQge1xuICByZXR1cm4gc3ZnLmNsb25lTm9kZSh0cnVlKSBhcyBTVkdFbGVtZW50O1xufVxuXG4vKipcbiAqIFBhcnNlIGlubGluZSBTVkcgc3RyaW5nIGFuZCByZXBsYWNlIGNvbG9ycyB3aXRoIHBsYWNlaG9sZGVycy4gRm9yIHR3b3RvbmUgaWNvbnMgb25seS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VGaWxsQ29sb3IocmF3OiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gcmF3XG4gICAgLnJlcGxhY2UoL1snXCJdIzMzM1snXCJdL2csICdcInByaW1hcnlDb2xvclwiJylcbiAgICAucmVwbGFjZSgvWydcIl0jRTZFNkU2WydcIl0vZywgJ1wic2Vjb25kYXJ5Q29sb3JcIicpXG4gICAgLnJlcGxhY2UoL1snXCJdI0Q5RDlEOVsnXCJdL2csICdcInNlY29uZGFyeUNvbG9yXCInKVxuICAgIC5yZXBsYWNlKC9bJ1wiXSNEOEQ4RDhbJ1wiXS9nLCAnXCJzZWNvbmRhcnlDb2xvclwiJyk7XG59XG5cbi8qKlxuICogU3BsaXQgYSBuYW1lIHdpdGggbmFtZXNwYWNlIGluIGl0IGludG8gYSB0dXBsZSBsaWtlIFsgbmFtZSwgbmFtZXNwYWNlIF0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lQW5kTmFtZXNwYWNlKHR5cGU6IHN0cmluZyk6IFtzdHJpbmcsIHN0cmluZ10ge1xuICBjb25zdCBzcGxpdCA9IHR5cGUuc3BsaXQoJzonKTtcbiAgc3dpdGNoIChzcGxpdC5sZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBbdHlwZSwgJyddO1xuICAgIGNhc2UgMjogcmV0dXJuIFtzcGxpdFsxXSwgc3BsaXRbMF1dO1xuICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgJHtBTlRfSUNPTl9BTkdVTEFSX0NPTlNPTEVfUFJFRklYfVRoZSBpY29uIHR5cGUgJHt0eXBlfSBpcyBub3QgdmFsaWQhYCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc05hbWVzcGFjZSh0eXBlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGdldE5hbWVBbmROYW1lc3BhY2UodHlwZSlbMV0gIT09ICcnO1xufVxuIl19