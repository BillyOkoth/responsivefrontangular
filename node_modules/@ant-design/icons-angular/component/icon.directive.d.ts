import { ElementRef, OnChanges, Renderer2, SimpleChanges } from '@angular/core';
import { IconDefinition, ThemeType } from '../types';
import { IconService } from './icon.service';
import * as ɵngcc0 from '@angular/core';
export declare class IconDirective implements OnChanges {
    protected _iconService: IconService;
    protected _elementRef: ElementRef;
    protected _renderer: Renderer2;
    type: string | IconDefinition;
    theme: ThemeType;
    twoToneColor: string;
    constructor(_iconService: IconService, _elementRef: ElementRef, _renderer: Renderer2);
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Render a new icon in the current element. Remove the icon when `type` is falsy.
     */
    protected _changeIcon(): Promise<SVGElement | null>;
    /**
     * Parse a icon to the standard form, an `IconDefinition` or a string like 'account-book-fill` (with a theme suffixed).
     * If namespace is specified, ignore theme because it meaningless for users' icons.
     * @param type
     * @param theme
     */
    protected _parseIconType(type: string | IconDefinition, theme: ThemeType): IconDefinition | string;
    protected _setSVGElement(svg: SVGElement): void;
    protected _clearSVGElement(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IconDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<IconDirective, "[antIcon]", never, { "type": "type"; "theme": "theme"; "twoToneColor": "twoToneColor"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiaWNvbi5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgT25DaGFuZ2VzLCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEljb25EZWZpbml0aW9uLCBUaGVtZVR5cGUgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBJY29uU2VydmljZSB9IGZyb20gJy4vaWNvbi5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEljb25EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAgIHByb3RlY3RlZCBfaWNvblNlcnZpY2U6IEljb25TZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBfZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgX3JlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgdHlwZTogc3RyaW5nIHwgSWNvbkRlZmluaXRpb247XG4gICAgdGhlbWU6IFRoZW1lVHlwZTtcbiAgICB0d29Ub25lQ29sb3I6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihfaWNvblNlcnZpY2U6IEljb25TZXJ2aWNlLCBfZWxlbWVudFJlZjogRWxlbWVudFJlZiwgX3JlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlbmRlciBhIG5ldyBpY29uIGluIHRoZSBjdXJyZW50IGVsZW1lbnQuIFJlbW92ZSB0aGUgaWNvbiB3aGVuIGB0eXBlYCBpcyBmYWxzeS5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2NoYW5nZUljb24oKTogUHJvbWlzZTxTVkdFbGVtZW50IHwgbnVsbD47XG4gICAgLyoqXG4gICAgICogUGFyc2UgYSBpY29uIHRvIHRoZSBzdGFuZGFyZCBmb3JtLCBhbiBgSWNvbkRlZmluaXRpb25gIG9yIGEgc3RyaW5nIGxpa2UgJ2FjY291bnQtYm9vay1maWxsYCAod2l0aCBhIHRoZW1lIHN1ZmZpeGVkKS5cbiAgICAgKiBJZiBuYW1lc3BhY2UgaXMgc3BlY2lmaWVkLCBpZ25vcmUgdGhlbWUgYmVjYXVzZSBpdCBtZWFuaW5nbGVzcyBmb3IgdXNlcnMnIGljb25zLlxuICAgICAqIEBwYXJhbSB0eXBlXG4gICAgICogQHBhcmFtIHRoZW1lXG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9wYXJzZUljb25UeXBlKHR5cGU6IHN0cmluZyB8IEljb25EZWZpbml0aW9uLCB0aGVtZTogVGhlbWVUeXBlKTogSWNvbkRlZmluaXRpb24gfCBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIF9zZXRTVkdFbGVtZW50KHN2ZzogU1ZHRWxlbWVudCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIF9jbGVhclNWR0VsZW1lbnQoKTogdm9pZDtcbn1cbiJdfQ==