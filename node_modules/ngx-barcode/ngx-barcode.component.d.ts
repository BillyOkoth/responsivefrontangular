import { OnChanges, Renderer2, ElementRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class NgxBarcodeComponent implements OnChanges {
    private renderer;
    elementType: 'svg' | 'img' | 'canvas';
    cssClass: string;
    format: '' | 'CODE128' | 'CODE128A' | 'CODE128B' | 'CODE128C' | 'EAN' | 'UPC' | 'EAN8' | 'EAN5' | 'EAN2' | 'CODE39' | 'ITF14' | 'MSI' | 'MSI10' | 'MSI11' | 'MSI1010' | 'MSI1110' | 'pharmacode' | 'codabar';
    lineColor: string;
    width: number;
    height: number;
    displayValue: boolean;
    fontOptions: string;
    font: string;
    textAlign: string;
    textPosition: string;
    textMargin: number;
    fontSize: number;
    background: string;
    margin: number;
    marginTop: number;
    marginBottom: number;
    marginLeft: number;
    marginRight: number;
    value: string;
    bcElement: ElementRef;
    valid: () => boolean;
    readonly options: {
        format: "" | "CODE128" | "CODE128A" | "CODE128B" | "CODE128C" | "EAN" | "UPC" | "EAN8" | "EAN5" | "EAN2" | "CODE39" | "ITF14" | "MSI" | "MSI10" | "MSI11" | "MSI1010" | "MSI1110" | "pharmacode" | "codabar";
        lineColor: string;
        width: number;
        height: number;
        displayValue: boolean;
        fontOptions: string;
        font: string;
        textAlign: string;
        textPosition: string;
        textMargin: number;
        fontSize: number;
        background: string;
        margin: number;
        marginTop: number;
        marginBottom: number;
        marginLeft: number;
        marginRight: number;
        valid: () => boolean;
    };
    constructor(renderer: Renderer2);
    ngOnChanges(): void;
    createBarcode(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxBarcodeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxBarcodeComponent, "ngx-barcode", never, { "elementType": "bc-element-type"; "cssClass": "bc-class"; "format": "bc-format"; "lineColor": "bc-line-color"; "width": "bc-width"; "height": "bc-height"; "displayValue": "bc-display-value"; "fontOptions": "bc-font-options"; "font": "bc-font"; "textAlign": "bc-text-align"; "textPosition": "bc-text-position"; "textMargin": "bc-text-margin"; "fontSize": "bc-font-size"; "background": "bc-background"; "margin": "bc-margin"; "marginTop": "bc-margin-top"; "marginBottom": "bc-margin-bottom"; "marginLeft": "bc-margin-left"; "marginRight": "bc-margin-right"; "value": "bc-value"; "valid": "bc-valid"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWJhcmNvZGUuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5neC1iYXJjb2RlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25DaGFuZ2VzLCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neEJhcmNvZGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgZWxlbWVudFR5cGU6ICdzdmcnIHwgJ2ltZycgfCAnY2FudmFzJztcbiAgICBjc3NDbGFzczogc3RyaW5nO1xuICAgIGZvcm1hdDogJycgfCAnQ09ERTEyOCcgfCAnQ09ERTEyOEEnIHwgJ0NPREUxMjhCJyB8ICdDT0RFMTI4QycgfCAnRUFOJyB8ICdVUEMnIHwgJ0VBTjgnIHwgJ0VBTjUnIHwgJ0VBTjInIHwgJ0NPREUzOScgfCAnSVRGMTQnIHwgJ01TSScgfCAnTVNJMTAnIHwgJ01TSTExJyB8ICdNU0kxMDEwJyB8ICdNU0kxMTEwJyB8ICdwaGFybWFjb2RlJyB8ICdjb2RhYmFyJztcbiAgICBsaW5lQ29sb3I6IHN0cmluZztcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIGRpc3BsYXlWYWx1ZTogYm9vbGVhbjtcbiAgICBmb250T3B0aW9uczogc3RyaW5nO1xuICAgIGZvbnQ6IHN0cmluZztcbiAgICB0ZXh0QWxpZ246IHN0cmluZztcbiAgICB0ZXh0UG9zaXRpb246IHN0cmluZztcbiAgICB0ZXh0TWFyZ2luOiBudW1iZXI7XG4gICAgZm9udFNpemU6IG51bWJlcjtcbiAgICBiYWNrZ3JvdW5kOiBzdHJpbmc7XG4gICAgbWFyZ2luOiBudW1iZXI7XG4gICAgbWFyZ2luVG9wOiBudW1iZXI7XG4gICAgbWFyZ2luQm90dG9tOiBudW1iZXI7XG4gICAgbWFyZ2luTGVmdDogbnVtYmVyO1xuICAgIG1hcmdpblJpZ2h0OiBudW1iZXI7XG4gICAgdmFsdWU6IHN0cmluZztcbiAgICBiY0VsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgdmFsaWQ6ICgpID0+IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgb3B0aW9uczoge1xuICAgICAgICBmb3JtYXQ6IFwiXCIgfCBcIkNPREUxMjhcIiB8IFwiQ09ERTEyOEFcIiB8IFwiQ09ERTEyOEJcIiB8IFwiQ09ERTEyOENcIiB8IFwiRUFOXCIgfCBcIlVQQ1wiIHwgXCJFQU44XCIgfCBcIkVBTjVcIiB8IFwiRUFOMlwiIHwgXCJDT0RFMzlcIiB8IFwiSVRGMTRcIiB8IFwiTVNJXCIgfCBcIk1TSTEwXCIgfCBcIk1TSTExXCIgfCBcIk1TSTEwMTBcIiB8IFwiTVNJMTExMFwiIHwgXCJwaGFybWFjb2RlXCIgfCBcImNvZGFiYXJcIjtcbiAgICAgICAgbGluZUNvbG9yOiBzdHJpbmc7XG4gICAgICAgIHdpZHRoOiBudW1iZXI7XG4gICAgICAgIGhlaWdodDogbnVtYmVyO1xuICAgICAgICBkaXNwbGF5VmFsdWU6IGJvb2xlYW47XG4gICAgICAgIGZvbnRPcHRpb25zOiBzdHJpbmc7XG4gICAgICAgIGZvbnQ6IHN0cmluZztcbiAgICAgICAgdGV4dEFsaWduOiBzdHJpbmc7XG4gICAgICAgIHRleHRQb3NpdGlvbjogc3RyaW5nO1xuICAgICAgICB0ZXh0TWFyZ2luOiBudW1iZXI7XG4gICAgICAgIGZvbnRTaXplOiBudW1iZXI7XG4gICAgICAgIGJhY2tncm91bmQ6IHN0cmluZztcbiAgICAgICAgbWFyZ2luOiBudW1iZXI7XG4gICAgICAgIG1hcmdpblRvcDogbnVtYmVyO1xuICAgICAgICBtYXJnaW5Cb3R0b206IG51bWJlcjtcbiAgICAgICAgbWFyZ2luTGVmdDogbnVtYmVyO1xuICAgICAgICBtYXJnaW5SaWdodDogbnVtYmVyO1xuICAgICAgICB2YWxpZDogKCkgPT4gYm9vbGVhbjtcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQ7XG4gICAgY3JlYXRlQmFyY29kZSgpOiB2b2lkO1xufVxuIl19