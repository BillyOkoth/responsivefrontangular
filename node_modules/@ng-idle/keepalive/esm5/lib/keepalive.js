/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Injectable, NgZone } from '@angular/core';
import { HttpClient, HttpRequest } from '@angular/common/http';
import { KeepaliveSvc } from '@ng-idle/core';
/**
 * An example of an injectable service.
 */
var Keepalive = /** @class */ (function (_super) {
    tslib_1.__extends(Keepalive, _super);
    /*
     * Initializes a new instance of Keepalive
     * @param http - The HTTP service.
     */
    function Keepalive(http, zone) {
        var _this = _super.call(this) || this;
        _this.http = http;
        _this.zone = zone;
        _this.pingInterval = 10 * 60;
        /*
           * An event emitted when the service is pinging.
           */
        _this.onPing = new EventEmitter();
        /*
           * An event emitted when the service has pinged an HTTP endpoint and received a response.
           */
        _this.onPingResponse = new EventEmitter();
        return _this;
    }
    /*
     * Sets the string or Request that should be used when pinging.
     * @param url - The URL or Request object to use when pinging.
     * @return The current Request used when pinging.
     */
    /*
       * Sets the string or Request that should be used when pinging.
       * @param url - The URL or Request object to use when pinging.
       * @return The current Request used when pinging.
       */
    /**
     * @template T
     * @param {?=} url
     * @return {?}
     */
    Keepalive.prototype.request = /*
       * Sets the string or Request that should be used when pinging.
       * @param url - The URL or Request object to use when pinging.
       * @return The current Request used when pinging.
       */
    /**
     * @template T
     * @param {?=} url
     * @return {?}
     */
    function (url) {
        if (typeof url === 'string') {
            this.pingRequest = new HttpRequest('GET', url);
        }
        else if (url instanceof HttpRequest) {
            this.pingRequest = url;
        }
        else if (url === null) {
            this.pingRequest = null;
        }
        return this.pingRequest;
    };
    /*
     * Sets the interval (in seconds) at which the ping operation will occur when start() is called.
     * @param seconds - The ping interval in seconds.
     * @return The current interval value.
     */
    /*
       * Sets the interval (in seconds) at which the ping operation will occur when start() is called.
       * @param seconds - The ping interval in seconds.
       * @return The current interval value.
       */
    /**
     * @param {?=} seconds
     * @return {?}
     */
    Keepalive.prototype.interval = /*
       * Sets the interval (in seconds) at which the ping operation will occur when start() is called.
       * @param seconds - The ping interval in seconds.
       * @return The current interval value.
       */
    /**
     * @param {?=} seconds
     * @return {?}
     */
    function (seconds) {
        if (!isNaN(seconds) && seconds > 0) {
            this.pingInterval = seconds;
        }
        else if (!isNaN(seconds) && seconds <= 0) {
            throw new Error('Interval value must be greater than zero.');
        }
        return this.pingInterval;
    };
    /*
     * Immediately performs the ping operation. If a request has been set, an HTTP
     * request will be made and the response will be emitted via the
     * onPingResponse event.
     */
    /*
       * Immediately performs the ping operation. If a request has been set, an HTTP
       * request will be made and the response will be emitted via the
       * onPingResponse event.
       */
    /**
     * @return {?}
     */
    Keepalive.prototype.ping = /*
       * Immediately performs the ping operation. If a request has been set, an HTTP
       * request will be made and the response will be emitted via the
       * onPingResponse event.
       */
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.onPing.emit(null);
        if (this.pingRequest) {
            this.http.request(this.pingRequest).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.onPingResponse.emit(response);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.onPingResponse.emit(error);
            }));
        }
    };
    /*
     * Starts pinging on an interval.
     */
    /*
       * Starts pinging on an interval.
       */
    /**
     * @return {?}
     */
    Keepalive.prototype.start = /*
       * Starts pinging on an interval.
       */
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.stop();
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.pingHandle = setInterval((/**
             * @return {?}
             */
            function () {
                _this.zone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.ping();
                }));
            }), _this.pingInterval * 1000);
        }));
    };
    /*
     * Stops pinging on an interval.
     */
    /*
       * Stops pinging on an interval.
       */
    /**
     * @return {?}
     */
    Keepalive.prototype.stop = /*
       * Stops pinging on an interval.
       */
    /**
     * @return {?}
     */
    function () {
        if (this.hasPingHandle()) {
            clearInterval(this.pingHandle);
            this.pingHandle = null;
        }
    };
    /*
     * Performs any cleanup tasks when Angular destroys the instance.
     */
    /*
       * Performs any cleanup tasks when Angular destroys the instance.
       */
    /**
     * @return {?}
     */
    Keepalive.prototype.ngOnDestroy = /*
       * Performs any cleanup tasks when Angular destroys the instance.
       */
    /**
     * @return {?}
     */
    function () {
        this.stop();
    };
    /*
     * Returns whether or not the service will ping automatically at the specified interval.
     * @return True if the service will ping at the specified interval; otherwise, false.
     */
    /*
       * Returns whether or not the service will ping automatically at the specified interval.
       * @return True if the service will ping at the specified interval; otherwise, false.
       */
    /**
     * @return {?}
     */
    Keepalive.prototype.isRunning = /*
       * Returns whether or not the service will ping automatically at the specified interval.
       * @return True if the service will ping at the specified interval; otherwise, false.
       */
    /**
     * @return {?}
     */
    function () {
        return this.hasPingHandle();
    };
    /**
     * @private
     * @return {?}
     */
    Keepalive.prototype.hasPingHandle = /**
     * @private
     * @return {?}
     */
    function () {
        return this.pingHandle !== null && typeof this.pingHandle !== 'undefined';
    };
    Keepalive.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    Keepalive.ctorParameters = function () { return [
        { type: HttpClient },
        { type: NgZone }
    ]; };
    return Keepalive;
}(KeepaliveSvc));
export { Keepalive };
if (false) {
    /**
     * @type {?}
     * @private
     */
    Keepalive.prototype.pingRequest;
    /**
     * @type {?}
     * @private
     */
    Keepalive.prototype.pingInterval;
    /**
     * @type {?}
     * @private
     */
    Keepalive.prototype.pingHandle;
    /** @type {?} */
    Keepalive.prototype.onPing;
    /** @type {?} */
    Keepalive.prototype.onPingResponse;
    /**
     * @type {?}
     * @private
     */
    Keepalive.prototype.http;
    /**
     * @type {?}
     * @private
     */
    Keepalive.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,