(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@ng-idle/core')) :
    typeof define === 'function' && define.amd ? define('@ng-idle/keepalive', ['exports', '@angular/core', '@angular/common/http', '@ng-idle/core'], factory) :
    (global = global || self, factory((global['ng-idle'] = global['ng-idle'] || {}, global['ng-idle'].keepalive = {}), global.ng.core, global.ng.common.http, global['ng-idle'].core));
}(this, function (exports, core, http, core$1) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * An example of an injectable service.
     */
    var Keepalive = /** @class */ (function (_super) {
        __extends(Keepalive, _super);
        /*
         * Initializes a new instance of Keepalive
         * @param http - The HTTP service.
         */
        function Keepalive(http, zone) {
            var _this = _super.call(this) || this;
            _this.http = http;
            _this.zone = zone;
            _this.pingInterval = 10 * 60;
            /*
               * An event emitted when the service is pinging.
               */
            _this.onPing = new core.EventEmitter();
            /*
               * An event emitted when the service has pinged an HTTP endpoint and received a response.
               */
            _this.onPingResponse = new core.EventEmitter();
            return _this;
        }
        /*
         * Sets the string or Request that should be used when pinging.
         * @param url - The URL or Request object to use when pinging.
         * @return The current Request used when pinging.
         */
        /*
           * Sets the string or Request that should be used when pinging.
           * @param url - The URL or Request object to use when pinging.
           * @return The current Request used when pinging.
           */
        /**
         * @template T
         * @param {?=} url
         * @return {?}
         */
        Keepalive.prototype.request = /*
           * Sets the string or Request that should be used when pinging.
           * @param url - The URL or Request object to use when pinging.
           * @return The current Request used when pinging.
           */
        /**
         * @template T
         * @param {?=} url
         * @return {?}
         */
        function (url) {
            if (typeof url === 'string') {
                this.pingRequest = new http.HttpRequest('GET', url);
            }
            else if (url instanceof http.HttpRequest) {
                this.pingRequest = url;
            }
            else if (url === null) {
                this.pingRequest = null;
            }
            return this.pingRequest;
        };
        /*
         * Sets the interval (in seconds) at which the ping operation will occur when start() is called.
         * @param seconds - The ping interval in seconds.
         * @return The current interval value.
         */
        /*
           * Sets the interval (in seconds) at which the ping operation will occur when start() is called.
           * @param seconds - The ping interval in seconds.
           * @return The current interval value.
           */
        /**
         * @param {?=} seconds
         * @return {?}
         */
        Keepalive.prototype.interval = /*
           * Sets the interval (in seconds) at which the ping operation will occur when start() is called.
           * @param seconds - The ping interval in seconds.
           * @return The current interval value.
           */
        /**
         * @param {?=} seconds
         * @return {?}
         */
        function (seconds) {
            if (!isNaN(seconds) && seconds > 0) {
                this.pingInterval = seconds;
            }
            else if (!isNaN(seconds) && seconds <= 0) {
                throw new Error('Interval value must be greater than zero.');
            }
            return this.pingInterval;
        };
        /*
         * Immediately performs the ping operation. If a request has been set, an HTTP
         * request will be made and the response will be emitted via the
         * onPingResponse event.
         */
        /*
           * Immediately performs the ping operation. If a request has been set, an HTTP
           * request will be made and the response will be emitted via the
           * onPingResponse event.
           */
        /**
         * @return {?}
         */
        Keepalive.prototype.ping = /*
           * Immediately performs the ping operation. If a request has been set, an HTTP
           * request will be made and the response will be emitted via the
           * onPingResponse event.
           */
        /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.onPing.emit(null);
            if (this.pingRequest) {
                this.http.request(this.pingRequest).subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    _this.onPingResponse.emit(response);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    _this.onPingResponse.emit(error);
                }));
            }
        };
        /*
         * Starts pinging on an interval.
         */
        /*
           * Starts pinging on an interval.
           */
        /**
         * @return {?}
         */
        Keepalive.prototype.start = /*
           * Starts pinging on an interval.
           */
        /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.stop();
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.pingHandle = setInterval((/**
                 * @return {?}
                 */
                function () {
                    _this.zone.run((/**
                     * @return {?}
                     */
                    function () {
                        _this.ping();
                    }));
                }), _this.pingInterval * 1000);
            }));
        };
        /*
         * Stops pinging on an interval.
         */
        /*
           * Stops pinging on an interval.
           */
        /**
         * @return {?}
         */
        Keepalive.prototype.stop = /*
           * Stops pinging on an interval.
           */
        /**
         * @return {?}
         */
        function () {
            if (this.hasPingHandle()) {
                clearInterval(this.pingHandle);
                this.pingHandle = null;
            }
        };
        /*
         * Performs any cleanup tasks when Angular destroys the instance.
         */
        /*
           * Performs any cleanup tasks when Angular destroys the instance.
           */
        /**
         * @return {?}
         */
        Keepalive.prototype.ngOnDestroy = /*
           * Performs any cleanup tasks when Angular destroys the instance.
           */
        /**
         * @return {?}
         */
        function () {
            this.stop();
        };
        /*
         * Returns whether or not the service will ping automatically at the specified interval.
         * @return True if the service will ping at the specified interval; otherwise, false.
         */
        /*
           * Returns whether or not the service will ping automatically at the specified interval.
           * @return True if the service will ping at the specified interval; otherwise, false.
           */
        /**
         * @return {?}
         */
        Keepalive.prototype.isRunning = /*
           * Returns whether or not the service will ping automatically at the specified interval.
           * @return True if the service will ping at the specified interval; otherwise, false.
           */
        /**
         * @return {?}
         */
        function () {
            return this.hasPingHandle();
        };
        /**
         * @private
         * @return {?}
         */
        Keepalive.prototype.hasPingHandle = /**
         * @private
         * @return {?}
         */
        function () {
            return this.pingHandle !== null && typeof this.pingHandle !== 'undefined';
        };
        Keepalive.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        Keepalive.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: core.NgZone }
        ]; };
        return Keepalive;
    }(core$1.KeepaliveSvc));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgIdleKeepaliveModule = /** @class */ (function () {
        function NgIdleKeepaliveModule() {
        }
        /**
         * @return {?}
         */
        NgIdleKeepaliveModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: NgIdleKeepaliveModule,
                providers: [Keepalive, { provide: core$1.KeepaliveSvc, useExisting: Keepalive }]
            };
        };
        NgIdleKeepaliveModule.decorators = [
            { type: core.NgModule, args: [{ imports: [core$1.NgIdleModule.forRoot()] },] }
        ];
        return NgIdleKeepaliveModule;
    }());

    exports.Keepalive = Keepalive;
    exports.NgIdleKeepaliveModule = NgIdleKeepaliveModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng-idle-keepalive.umd.js.map
