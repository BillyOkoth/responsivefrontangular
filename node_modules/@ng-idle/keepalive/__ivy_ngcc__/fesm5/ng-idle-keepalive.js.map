{"version":3,"file":"ng-idle-keepalive.js","sources":["ng:/@ng-idle/keepalive/lib/keepalive.ts","ng:/@ng-idle/keepalive/lib/module.ts"],"names":["tslib_1.__extends"],"mappings":"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","sourcesContent":["import { EventEmitter, Injectable, NgZone, OnDestroy } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { KeepaliveSvc } from '@ng-idle/core';\n\n/**\n * An example of an injectable service.\n */\n@Injectable()\nexport class Keepalive extends KeepaliveSvc implements OnDestroy {\n  private pingRequest: HttpRequest<any>;\n  private pingInterval: number = 10 * 60;\n  private pingHandle: any;\n\n  /*\n   * An event emitted when the service is pinging.\n   */\n  public onPing: EventEmitter<any> = new EventEmitter();\n\n  /*\n   * An event emitted when the service has pinged an HTTP endpoint and received a response.\n   */\n  public onPingResponse: EventEmitter<HttpResponse<any>> = new EventEmitter<\n    HttpResponse<any>\n  >();\n\n  /*\n   * Initializes a new instance of Keepalive\n   * @param http - The HTTP service.\n   */\n  constructor(private http: HttpClient, private zone: NgZone) {\n    super();\n  }\n\n  /*\n   * Sets the string or Request that should be used when pinging.\n   * @param url - The URL or Request object to use when pinging.\n   * @return The current Request used when pinging.\n   */\n  request<T>(url?: string | HttpRequest<T>): HttpRequest<T> {\n    if (typeof url === 'string') {\n      this.pingRequest = new HttpRequest<T>('GET', url);\n    } else if (url instanceof HttpRequest) {\n      this.pingRequest = url;\n    } else if (url === null) {\n      this.pingRequest = null;\n    }\n\n    return this.pingRequest;\n  }\n\n  /*\n   * Sets the interval (in seconds) at which the ping operation will occur when start() is called.\n   * @param seconds - The ping interval in seconds.\n   * @return The current interval value.\n   */\n  interval(seconds?: number): number {\n    if (!isNaN(seconds) && seconds > 0) {\n      this.pingInterval = seconds;\n    } else if (!isNaN(seconds) && seconds <= 0) {\n      throw new Error('Interval value must be greater than zero.');\n    }\n\n    return this.pingInterval;\n  }\n\n  /*\n   * Immediately performs the ping operation. If a request has been set, an HTTP\n   * request will be made and the response will be emitted via the\n   * onPingResponse event.\n   */\n  ping(): void {\n    this.onPing.emit(null);\n    if (this.pingRequest) {\n      this.http.request(this.pingRequest).subscribe(\n        (response: HttpResponse<any>) => {\n          this.onPingResponse.emit(response);\n        },\n        (error: HttpResponse<any>) => {\n          this.onPingResponse.emit(error);\n        }\n      );\n    }\n  }\n\n  /*\n   * Starts pinging on an interval.\n   */\n  start(): void {\n    this.stop();\n\n    this.zone.runOutsideAngular(() => {\n      this.pingHandle = setInterval(() => {\n        this.zone.run(() => {\n          this.ping();\n        });\n      }, this.pingInterval * 1000);\n    });\n  }\n\n  /*\n   * Stops pinging on an interval.\n   */\n  stop(): void {\n    if (this.hasPingHandle()) {\n      clearInterval(this.pingHandle);\n      this.pingHandle = null;\n    }\n  }\n\n  /*\n   * Performs any cleanup tasks when Angular destroys the instance.\n   */\n  ngOnDestroy(): void {\n    this.stop();\n  }\n\n  /*\n   * Returns whether or not the service will ping automatically at the specified interval.\n   * @return True if the service will ping at the specified interval; otherwise, false.\n   */\n  isRunning(): boolean {\n    return this.hasPingHandle();\n  }\n\n  private hasPingHandle(): boolean {\n    return this.pingHandle !== null && typeof this.pingHandle !== 'undefined';\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { KeepaliveSvc, NgIdleModule } from '@ng-idle/core';\n\nimport { Keepalive } from './keepalive';\n\n@NgModule({ imports: [NgIdleModule.forRoot()] })\nexport class NgIdleKeepaliveModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgIdleKeepaliveModule,\n      providers: [Keepalive, { provide: KeepaliveSvc, useExisting: Keepalive }]\n    };\n  }\n}\n"]}