import { EventEmitter, NgZone, OnDestroy } from '@angular/core';
import { IdleExpiry } from './idleexpiry';
import { Interrupt } from './interrupt';
import { InterruptSource } from './interruptsource';
import { KeepaliveSvc } from './keepalivesvc';
import * as ɵngcc0 from '@angular/core';
export declare enum AutoResume {
    disabled = 0,
    idle = 1,
    notIdle = 2
}
/**
 * A service for detecting and responding to user idleness.
 */
export declare class Idle implements OnDestroy {
    private expiry;
    private zone;
    private idle;
    private timeoutVal;
    private autoResume;
    private interrupts;
    private running;
    private idling;
    private idleHandle;
    private timeoutHandle;
    private countdown;
    private keepaliveEnabled;
    private keepaliveSvc;
    onIdleStart: EventEmitter<any>;
    onIdleEnd: EventEmitter<any>;
    onTimeoutWarning: EventEmitter<number>;
    onTimeout: EventEmitter<number>;
    onInterrupt: EventEmitter<any>;
    [key: string]: any;
    constructor(expiry: IdleExpiry, zone: NgZone, keepaliveSvc?: KeepaliveSvc);
    setIdleName(key: string): void;
    getKeepaliveEnabled(): boolean;
    setKeepaliveEnabled(value: boolean): boolean;
    getTimeout(): number;
    setTimeout(seconds: number | boolean): number;
    getIdle(): number;
    setIdle(seconds: number): number;
    getAutoResume(): AutoResume;
    setAutoResume(value: AutoResume): AutoResume;
    setInterrupts(sources: Array<InterruptSource>): Array<Interrupt>;
    getInterrupts(): Array<Interrupt>;
    clearInterrupts(): void;
    isRunning(): boolean;
    isIdling(): boolean;
    watch(skipExpiry?: boolean): void;
    setIdleIntervalOutsideOfZone(watchFn: () => void, frequency: number): void;
    stop(): void;
    timeout(): void;
    interrupt(force?: boolean, eventArgs?: any): void;
    private setIdling;
    private toggleState;
    private setTimoutIntervalOutsideZone;
    private toggleInterrupts;
    private getExpiryDiff;
    private doCountdownInZone;
    private doCountdown;
    private safeClearInterval;
    private startKeepalive;
    private stopKeepalive;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Idle, [null, null, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Idle>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRsZS5kLnRzIiwic291cmNlcyI6WyJpZGxlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElkbGVFeHBpcnkgfSBmcm9tICcuL2lkbGVleHBpcnknO1xuaW1wb3J0IHsgSW50ZXJydXB0IH0gZnJvbSAnLi9pbnRlcnJ1cHQnO1xuaW1wb3J0IHsgSW50ZXJydXB0U291cmNlIH0gZnJvbSAnLi9pbnRlcnJ1cHRzb3VyY2UnO1xuaW1wb3J0IHsgS2VlcGFsaXZlU3ZjIH0gZnJvbSAnLi9rZWVwYWxpdmVzdmMnO1xuZXhwb3J0IGRlY2xhcmUgZW51bSBBdXRvUmVzdW1lIHtcbiAgICBkaXNhYmxlZCA9IDAsXG4gICAgaWRsZSA9IDEsXG4gICAgbm90SWRsZSA9IDJcbn1cbi8qKlxuICogQSBzZXJ2aWNlIGZvciBkZXRlY3RpbmcgYW5kIHJlc3BvbmRpbmcgdG8gdXNlciBpZGxlbmVzcy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSWRsZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBleHBpcnk7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIHByaXZhdGUgaWRsZTtcbiAgICBwcml2YXRlIHRpbWVvdXRWYWw7XG4gICAgcHJpdmF0ZSBhdXRvUmVzdW1lO1xuICAgIHByaXZhdGUgaW50ZXJydXB0cztcbiAgICBwcml2YXRlIHJ1bm5pbmc7XG4gICAgcHJpdmF0ZSBpZGxpbmc7XG4gICAgcHJpdmF0ZSBpZGxlSGFuZGxlO1xuICAgIHByaXZhdGUgdGltZW91dEhhbmRsZTtcbiAgICBwcml2YXRlIGNvdW50ZG93bjtcbiAgICBwcml2YXRlIGtlZXBhbGl2ZUVuYWJsZWQ7XG4gICAgcHJpdmF0ZSBrZWVwYWxpdmVTdmM7XG4gICAgb25JZGxlU3RhcnQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uSWRsZUVuZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25UaW1lb3V0V2FybmluZzogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgb25UaW1lb3V0OiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICBvbkludGVycnVwdDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgW2tleTogc3RyaW5nXTogYW55O1xuICAgIGNvbnN0cnVjdG9yKGV4cGlyeTogSWRsZUV4cGlyeSwgem9uZTogTmdab25lLCBrZWVwYWxpdmVTdmM/OiBLZWVwYWxpdmVTdmMpO1xuICAgIHNldElkbGVOYW1lKGtleTogc3RyaW5nKTogdm9pZDtcbiAgICBnZXRLZWVwYWxpdmVFbmFibGVkKCk6IGJvb2xlYW47XG4gICAgc2V0S2VlcGFsaXZlRW5hYmxlZCh2YWx1ZTogYm9vbGVhbik6IGJvb2xlYW47XG4gICAgZ2V0VGltZW91dCgpOiBudW1iZXI7XG4gICAgc2V0VGltZW91dChzZWNvbmRzOiBudW1iZXIgfCBib29sZWFuKTogbnVtYmVyO1xuICAgIGdldElkbGUoKTogbnVtYmVyO1xuICAgIHNldElkbGUoc2Vjb25kczogbnVtYmVyKTogbnVtYmVyO1xuICAgIGdldEF1dG9SZXN1bWUoKTogQXV0b1Jlc3VtZTtcbiAgICBzZXRBdXRvUmVzdW1lKHZhbHVlOiBBdXRvUmVzdW1lKTogQXV0b1Jlc3VtZTtcbiAgICBzZXRJbnRlcnJ1cHRzKHNvdXJjZXM6IEFycmF5PEludGVycnVwdFNvdXJjZT4pOiBBcnJheTxJbnRlcnJ1cHQ+O1xuICAgIGdldEludGVycnVwdHMoKTogQXJyYXk8SW50ZXJydXB0PjtcbiAgICBjbGVhckludGVycnVwdHMoKTogdm9pZDtcbiAgICBpc1J1bm5pbmcoKTogYm9vbGVhbjtcbiAgICBpc0lkbGluZygpOiBib29sZWFuO1xuICAgIHdhdGNoKHNraXBFeHBpcnk/OiBib29sZWFuKTogdm9pZDtcbiAgICBzZXRJZGxlSW50ZXJ2YWxPdXRzaWRlT2Zab25lKHdhdGNoRm46ICgpID0+IHZvaWQsIGZyZXF1ZW5jeTogbnVtYmVyKTogdm9pZDtcbiAgICBzdG9wKCk6IHZvaWQ7XG4gICAgdGltZW91dCgpOiB2b2lkO1xuICAgIGludGVycnVwdChmb3JjZT86IGJvb2xlYW4sIGV2ZW50QXJncz86IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBzZXRJZGxpbmc7XG4gICAgcHJpdmF0ZSB0b2dnbGVTdGF0ZTtcbiAgICBwcml2YXRlIHNldFRpbW91dEludGVydmFsT3V0c2lkZVpvbmU7XG4gICAgcHJpdmF0ZSB0b2dnbGVJbnRlcnJ1cHRzO1xuICAgIHByaXZhdGUgZ2V0RXhwaXJ5RGlmZjtcbiAgICBwcml2YXRlIGRvQ291bnRkb3duSW5ab25lO1xuICAgIHByaXZhdGUgZG9Db3VudGRvd247XG4gICAgcHJpdmF0ZSBzYWZlQ2xlYXJJbnRlcnZhbDtcbiAgICBwcml2YXRlIHN0YXJ0S2VlcGFsaXZlO1xuICAgIHByaXZhdGUgc3RvcEtlZXBhbGl2ZTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19