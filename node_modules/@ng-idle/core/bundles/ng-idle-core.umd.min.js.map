{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@ng-idle/core/lib/idleexpiry.ts","ng://@ng-idle/core/lib/interrupt.ts","ng://@ng-idle/core/lib/keepalivesvc.ts","ng://@ng-idle/core/lib/alternativestorage.ts","ng://@ng-idle/core/lib/localstorage.ts","ng://@ng-idle/core/lib/localstorageexpiry.ts","ng://@ng-idle/core/lib/idle.ts","ng://@ng-idle/core/lib/interruptargs.ts","ng://@ng-idle/core/lib/interruptsource.ts","ng://@ng-idle/core/lib/eventtargetinterruptsource.ts","ng://@ng-idle/core/lib/documentinterruptsource.ts","ng://@ng-idle/core/lib/windowinterruptsource.ts","ng://@ng-idle/core/lib/storageinterruptsource.ts","ng://@ng-idle/core/lib/simpleexpiry.ts","ng://@ng-idle/core/lib/module.ts","ng://@ng-idle/core/lib/defaultinterruptsources.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","IdleExpiry","idValue","Date","idlingValue","id","Error","idling","now","isExpired","expiry","last","Interrupt","source","subscribe","fn","sub","onInterrupt","unsubscribe","resume","attach","pause","detach","AlternativeStorage","storageMap","defineProperty","keys","clear","getItem","key","index","removeItem","undefined","setItem","LocalStorage","storage","getStorage","localStorage","err","data","_wrapped","Injectable","LocalStorageExpiry","_super","_this","idleName","tslib_1.__extends","setExpiry","getExpiry","setIdling","getIdling","getIdleName","setIdleName","parseInt","getTime","toString","disabled","idle","notIdle","Idle","zone","keepaliveSvc","timeoutVal","autoResume","AutoResume","interrupts","running","keepaliveEnabled","onIdleStart","EventEmitter","onIdleEnd","onTimeoutWarning","onTimeout","getKeepaliveEnabled","setKeepaliveEnabled","getTimeout","setTimeout","seconds","getIdle","setIdle","getAutoResume","setAutoResume","setInterrupts","sources","clearInterrupts","self","sources_1","tslib_1.__values","sources_1_1","args","interrupt","force","innerArgs","getInterrupts","_b","_c","isRunning","isIdling","watch","skipExpiry","safeClearInterval","timeout","toggleState","startKeepalive","toggleInterrupts","watchFn","run","diff","getExpiryDiff","setIdleIntervalOutsideOfZone","frequency","runOutsideAngular","idleHandle","setInterval","stop","stopKeepalive","countdown","emit","eventArgs","doCountdown","setTimoutIntervalOutsideZone","doCountdownInZone","intervalFn","timeoutHandle","handleName","handle","clearInterval","ping","start","ngOnDestroy","NgZone","KeepaliveSvc","decorators","type","Optional","InterruptSource","attachFn","detachFn","isAttached","Zone","current","get","parent","defaultThrottleDelay","EventTargetInterruptSource","target","events","options","eventSubscription","Subscription","throttleDelay","passive","opts","fromEvents","split","map","eventName","fromEvent","eventSrc","merge","apply","arguments","concat","__spread","pipe","filter","filterEvent","throttleTime","handler","InterruptArgs","event","DocumentInterruptSource","document","documentElement","originalEvent","movementX","movementY","WindowInterruptSource","window","StorageInterruptSource","indexOf","SimpleExpiry","lastValue","NgIdleModule","forRoot","ngModule","providers","provide","useExisting","NgModule","createDefaultInterruptSources","DEFAULT_INTERRUPTSOURCES"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*\n * Represents a base class for types that provide expiry detection for the Idle service.\n */\nexport abstract class IdleExpiry {\n  protected idValue: any;\n  protected idlingValue: boolean;\n\n  constructor() {\n    this.idValue = new Date();\n    this.idlingValue = false;\n  }\n\n  /*\n   * Gets or sets a unique ID for the window\n   * @param id - The id.\n   * @return The current id.\n   */\n  id(value?: any): any {\n    if (value !== void 0) {\n      if (!value) {\n        throw new Error('A value must be specified for the ID.');\n      }\n\n      this.idValue = value;\n    }\n\n    return this.idValue;\n  }\n\n  /*\n   * Gets or sets the last expiry date.\n   * @param value - The value to set.\n   * @return The last expiry value.\n   */\n  abstract last(value?: Date): Date;\n\n  /*\n   * Gets or sets the idling value.\n   * @param value - The value to set.\n   * @return The idling value.\n   */\n  idling(value?: boolean): boolean {\n    if (value !== void 0) {\n      this.idlingValue = value;\n    }\n\n    return this.idlingValue;\n  }\n\n  /*\n   * Returns the current Date.\n   * @return The current Date.\n   */\n  now(): Date {\n    /* istanbul ignore next */\n    return new Date();\n  }\n\n  /*\n   * Returns whether or not it is expired.\n   * @return True if expired; otherwise, false.\n   */\n  isExpired(): boolean {\n    const expiry = this.last();\n    return expiry != null && expiry <= this.now();\n  }\n}\n","import { Subscription } from 'rxjs';\n\nimport { InterruptArgs } from './interruptargs';\nimport { InterruptSource } from './interruptsource';\n\n/*\n * A class for managing an interrupt from an interrupt source.\n */\nexport class Interrupt {\n  private sub: Subscription;\n\n  constructor(public source: InterruptSource) {}\n\n  /*\n   * Subscribes to the interrupt using the specified function.\n   * @param fn - The subscription function.\n   */\n  subscribe(fn: (args: InterruptArgs) => void): void {\n    this.sub = this.source.onInterrupt.subscribe(fn);\n  }\n\n  /*\n   * Unsubscribes the interrupt.\n   */\n  unsubscribe(): void {\n    this.sub.unsubscribe();\n    this.sub = null;\n  }\n\n  /*\n   * Keeps the subscription but resumes interrupt events.\n   */\n  resume(): void {\n    this.source.attach();\n  }\n\n  /*\n   * Keeps the subscription but pauses interrupt events.\n   */\n  pause(): void {\n    this.source.detach();\n  }\n}\n","export abstract class KeepaliveSvc {\n  abstract start(): void;\n  abstract stop(): void;\n  abstract ping(): void;\n}\n","/*\n * Represents an alternative storage for browser that doesn't support localstorage. (i.e. Safari in\n * private mode)\n * @implements Storage\n */\nexport class AlternativeStorage implements Storage {\n  private storageMap: any = {};\n\n  /*\n   * Returns an integer representing the number of data items stored in the storageMap object.\n   */\n  get length() {\n    return Object.keys(this.storageMap).length;\n  }\n\n  /*\n   * Remove all keys out of the storage.\n   */\n  clear(): void {\n    this.storageMap = {};\n  }\n\n  /*\n   * Return the key's value\n   *\n   * @param key - name of the key to retrieve the value of.\n   * @return The key's value\n   */\n  getItem(key: string): string | null {\n    if (typeof this.storageMap[key] !== 'undefined') {\n      return this.storageMap[key];\n    }\n    return null;\n  }\n\n  /*\n   * Return the nth key in the storage\n   *\n   * @param index - the number of the key you want to get the name of.\n   * @return The name of the key.\n   */\n  key(index: number): string | null {\n    return Object.keys(this.storageMap)[index] || null;\n  }\n\n  /*\n   * Remove a key from the storage.\n   *\n   * @param key - the name of the key you want to remove.\n   */\n  removeItem(key: string): void {\n    this.storageMap[key] = undefined;\n  }\n\n  /*\n   * Add a key to the storage, or update a key's value if it already exists.\n   *\n   * @param key - the name of the key.\n   * @param value - the value you want to give to the key.\n   */\n  setItem(key: string, value: string): void {\n    this.storageMap[key] = value;\n  }\n\n  [key: string]: any;\n  [index: number]: string;\n}\n","import { Injectable } from '@angular/core';\nimport { AlternativeStorage } from './alternativestorage';\n\n/*\n * Represents a localStorage store.\n */\n@Injectable()\nexport class LocalStorage {\n  private storage: Storage;\n\n  constructor() {\n    this.storage = this.getStorage();\n  }\n\n  /*\n   * Safari, in Private Browsing Mode, looks like it supports localStorage but all calls to setItem\n   * throw QuotaExceededError. We're going to detect this and just silently drop any calls to\n   * setItem\n   * to avoid the entire page breaking, without having to do a check at each usage of Storage.\n   */\n  private getStorage(): Storage {\n    try {\n      const storage = localStorage;\n      storage.setItem('ng2IdleStorage', '');\n      storage.removeItem('ng2IdleStorage');\n      return storage;\n    } catch (err) {\n      return new AlternativeStorage();\n    }\n  }\n\n  /*\n   * Gets an item in the storage.\n   *\n   * @param value - The value to get.\n   * @return The current value.\n   */\n  getItem(key: string): string | null {\n    return this.storage.getItem('ng2Idle.' + key);\n  }\n\n  /*\n   * Removes an item in the storage.\n   *\n   * @param value - The value to remove.\n   */\n  removeItem(key: string): void {\n    this.storage.removeItem('ng2Idle.' + key);\n  }\n\n  /*\n   * Sets an item in the storage.\n   *\n   * @param key - The key to set the value.\n   * @param value - The value to set to the key.\n   */\n  setItem(key: string, data: string): void {\n    this.storage.setItem('ng2Idle.' + key, data);\n  }\n\n  /*\n   * Represents the storage, commonly use for testing purposes.\n   *\n   * @param key - The key to set the value.\n   * @param value - The value to set to the key.\n   */\n  _wrapped(): Storage {\n    return this.storage;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IdleExpiry } from './idleexpiry';\nimport { LocalStorage } from './localstorage';\n\n/*\n * Represents a localStorage store of expiry values.\n * @extends IdleExpiry\n */\n@Injectable()\nexport class LocalStorageExpiry extends IdleExpiry {\n  private idleName = 'main';\n\n  constructor(private localStorage: LocalStorage) {\n    super();\n  }\n\n  /*\n   * Gets or sets the last expiry date in localStorage.\n   * If localStorage doesn't work correctly (i.e. Safari in private mode), we store the expiry value in memory.\n   * @param value - The expiry value to set; omit to only return the value.\n   * @return The current expiry value.\n   */\n  last(value?: Date): Date {\n    if (value !== void 0) {\n      this.setExpiry(value);\n    }\n    return this.getExpiry();\n  }\n\n  idling(value?: boolean): boolean {\n    if (value !== void 0) {\n      this.setIdling(value);\n    }\n    return this.getIdling();\n  }\n\n  /*\n   * Gets the idle name.\n   * @return The name of the idle.\n   */\n  getIdleName(): string {\n    return this.idleName;\n  }\n\n  /*\n   * Sets the idle name.\n   * @param The name of the idle.\n   */\n  setIdleName(key: string): void {\n    if (key) {\n      this.idleName = key;\n    }\n  }\n\n  private getExpiry(): Date {\n    const expiry: string = this.localStorage.getItem(this.idleName + '.expiry');\n    if (expiry) {\n      return new Date(parseInt(expiry, 10));\n    } else {\n      return null;\n    }\n  }\n\n  private setExpiry(value: Date) {\n    if (value) {\n      this.localStorage.setItem(\n        this.idleName + '.expiry',\n        value.getTime().toString()\n      );\n    } else {\n      this.localStorage.removeItem(this.idleName + '.expiry');\n    }\n  }\n\n  private getIdling(): boolean {\n    const idling: string = this.localStorage.getItem(this.idleName + '.idling');\n    if (idling) {\n      return idling === 'true';\n    } else {\n      return false;\n    }\n  }\n\n  private setIdling(value: boolean) {\n    if (value) {\n      this.localStorage.setItem(this.idleName + '.idling', value.toString());\n    } else {\n      this.localStorage.setItem(this.idleName + '.idling', 'false');\n    }\n  }\n}\n","import {\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional\n} from '@angular/core';\n\nimport { IdleExpiry } from './idleexpiry';\nimport { Interrupt } from './interrupt';\nimport { InterruptArgs } from './interruptargs';\nimport { InterruptSource } from './interruptsource';\nimport { KeepaliveSvc } from './keepalivesvc';\nimport { LocalStorageExpiry } from './localstorageexpiry';\n\n/*\n * Indicates the desired auto resume behavior.\n */\nexport enum AutoResume {\n  /*\n   * Auto resume functionality will be disabled.\n   */\n  disabled,\n  /*\n   * Can resume automatically even if they are idle.\n   */\n  idle,\n  /*\n   * Can only resume automatically if they are not yet idle.\n   */\n  notIdle\n}\n\n/**\n * A service for detecting and responding to user idleness.\n */\n@Injectable()\nexport class Idle implements OnDestroy {\n  private idle: number = 20 * 60; // in seconds\n  private timeoutVal = 30; // in seconds\n  private autoResume: AutoResume = AutoResume.idle;\n  private interrupts: Array<Interrupt> = new Array();\n  private running = false;\n  private idling: boolean;\n  private idleHandle: any;\n  private timeoutHandle: any;\n  private countdown: number;\n  private keepaliveEnabled = false;\n  private keepaliveSvc: KeepaliveSvc;\n\n  public onIdleStart: EventEmitter<any> = new EventEmitter();\n  public onIdleEnd: EventEmitter<any> = new EventEmitter();\n  public onTimeoutWarning: EventEmitter<number> = new EventEmitter<number>();\n  public onTimeout: EventEmitter<number> = new EventEmitter<number>();\n  public onInterrupt: EventEmitter<any> = new EventEmitter();\n\n  [key: string]: any;\n\n  constructor(\n    private expiry: IdleExpiry,\n    private zone: NgZone,\n    @Optional() keepaliveSvc?: KeepaliveSvc\n  ) {\n    if (keepaliveSvc) {\n      this.keepaliveSvc = keepaliveSvc;\n      this.keepaliveEnabled = true;\n    }\n    this.setIdling(false);\n  }\n\n  /*\n   * Sets the idle name for localStorage.\n   * Important to set if multiple instances of Idle with LocalStorageExpiry\n   * @param The name of the idle.\n   */\n  setIdleName(key: string): void {\n    if (this.expiry instanceof LocalStorageExpiry) {\n      this.expiry.setIdleName(key);\n    } else {\n      throw new Error(\n        'Cannot set expiry key name because no LocalStorageExpiry has been provided.'\n      );\n    }\n  }\n\n  /*\n   * Returns whether or not keepalive integration is enabled.\n   * @return True if integration is enabled; otherwise, false.\n   */\n  getKeepaliveEnabled(): boolean {\n    return this.keepaliveEnabled;\n  }\n\n  /*\n   * Sets and returns whether or not keepalive integration is enabled.\n   * @param True if the integration is enabled; otherwise, false.\n   * @return The current value.\n   */\n  setKeepaliveEnabled(value: boolean): boolean {\n    if (!this.keepaliveSvc) {\n      throw new Error(\n        'Cannot enable keepalive integration because no KeepaliveSvc has been provided.'\n      );\n    }\n\n    return (this.keepaliveEnabled = value);\n  }\n\n  /*\n   * Returns the current timeout value.\n   * @return The timeout value in seconds.\n   */\n  getTimeout(): number {\n    return this.timeoutVal;\n  }\n\n  /*\n   * Sets the timeout value.\n   * @param seconds - The timeout value in seconds. 0 or false to disable timeout feature.\n   * @return The current value. If disabled, the value will be 0.\n   */\n  setTimeout(seconds: number | boolean): number {\n    if (seconds === false) {\n      this.timeoutVal = 0;\n    } else if (typeof seconds === 'number' && seconds >= 0) {\n      this.timeoutVal = seconds;\n    } else {\n      throw new Error(\"'seconds' can only be 'false' or a positive number.\");\n    }\n\n    return this.timeoutVal;\n  }\n\n  /*\n   * Returns the current idle value.\n   * @return The idle value in seconds.\n   */\n  getIdle(): number {\n    return this.idle;\n  }\n\n  /*\n   * Sets the idle value.\n   * @param seconds - The idle value in seconds.\n   * @return The idle value in seconds.\n   */\n  setIdle(seconds: number): number {\n    if (seconds <= 0) {\n      throw new Error(\"'seconds' must be greater zero\");\n    }\n\n    return (this.idle = seconds);\n  }\n\n  /*\n   * Returns the current autoresume value.\n   * @return The current value.\n   */\n  getAutoResume(): AutoResume {\n    return this.autoResume;\n  }\n\n  setAutoResume(value: AutoResume): AutoResume {\n    return (this.autoResume = value);\n  }\n\n  /*\n   * Sets interrupts from the specified sources.\n   * @param sources - Interrupt sources.\n   * @return The resulting interrupts.\n   */\n  setInterrupts(sources: Array<InterruptSource>): Array<Interrupt> {\n    this.clearInterrupts();\n\n    const self = this;\n\n    for (const source of sources) {\n      const sub = new Interrupt(source);\n      sub.subscribe((args: InterruptArgs) => {\n        self.interrupt(args.force, args.innerArgs);\n      });\n\n      this.interrupts.push(sub);\n    }\n\n    return this.interrupts;\n  }\n\n  /*\n   * Returns the current interrupts.\n   * @return The current interrupts.\n   */\n  getInterrupts(): Array<Interrupt> {\n    return this.interrupts;\n  }\n\n  /*\n   * Pauses, unsubscribes, and clears the current interrupt subscriptions.\n   */\n  clearInterrupts(): void {\n    for (const sub of this.interrupts) {\n      sub.pause();\n      sub.unsubscribe();\n    }\n\n    this.interrupts.length = 0;\n  }\n\n  /*\n   * Returns whether or not the service is running i.e. watching for idleness.\n   * @return True if service is watching; otherwise, false.\n   */\n  isRunning(): boolean {\n    return this.running;\n  }\n\n  /*\n   * Returns whether or not the user is considered idle.\n   * @return True if the user is in the idle state; otherwise, false.\n   */\n  isIdling(): boolean {\n    return this.idling;\n  }\n\n  /*\n   * Starts watching for inactivity.\n   */\n  watch(skipExpiry?: boolean): void {\n    this.safeClearInterval('idleHandle');\n    this.safeClearInterval('timeoutHandle');\n\n    const timeout = !this.timeoutVal ? 0 : this.timeoutVal;\n    if (!skipExpiry) {\n      const value = new Date(\n        this.expiry.now().getTime() + (this.idle + timeout) * 1000\n      );\n      this.expiry.last(value);\n    }\n\n    if (this.idling) {\n      this.toggleState();\n    }\n    if (!this.running) {\n      this.startKeepalive();\n      this.toggleInterrupts(true);\n    }\n\n    this.running = true;\n\n    const watchFn = () => {\n      this.zone.run(() => {\n        const diff = this.getExpiryDiff(timeout);\n        if (diff > 0) {\n          this.safeClearInterval('idleHandle');\n          this.setIdleIntervalOutsideOfZone(watchFn, diff);\n        } else {\n          this.toggleState();\n        }\n      });\n    };\n\n    this.setIdleIntervalOutsideOfZone(watchFn, this.idle * 1000);\n  }\n\n  /*\n   * Allows protractor tests to call waitForAngular without hanging\n   */\n  setIdleIntervalOutsideOfZone(watchFn: () => void, frequency: number): void {\n    this.zone.runOutsideAngular(() => {\n      this.idleHandle = setInterval(watchFn, frequency);\n    });\n  }\n\n  /*\n   * Stops watching for inactivity.\n   */\n  stop(): void {\n    this.stopKeepalive();\n\n    this.toggleInterrupts(false);\n\n    this.safeClearInterval('idleHandle');\n    this.safeClearInterval('timeoutHandle');\n\n    this.setIdling(false);\n    this.running = false;\n\n    this.expiry.last(null);\n  }\n\n  /*\n   * Forces a timeout event and state.\n   */\n  timeout(): void {\n    this.stopKeepalive();\n\n    this.toggleInterrupts(false);\n\n    this.safeClearInterval('idleHandle');\n    this.safeClearInterval('timeoutHandle');\n\n    this.setIdling(true);\n    this.running = false;\n    this.countdown = 0;\n\n    this.onTimeout.emit(null);\n  }\n\n  /*\n   * Signals that user activity has occurred.\n   * @param force - Forces watch to be called, unless they are timed out.\n   * @param eventArgs - Optional source event arguments.\n   */\n  interrupt(force?: boolean, eventArgs?: any): void {\n    if (!this.running) {\n      return;\n    }\n\n    if (this.timeoutVal && this.expiry.isExpired()) {\n      this.timeout();\n      return;\n    }\n    this.onInterrupt.emit(eventArgs);\n\n    if (\n      force === true ||\n      this.autoResume === AutoResume.idle ||\n      (this.autoResume === AutoResume.notIdle && !this.expiry.idling())\n    ) {\n      this.watch(force);\n    }\n  }\n\n  private setIdling(value: boolean): void {\n    this.idling = value;\n    this.expiry.idling(value);\n  }\n\n  private toggleState(): void {\n    this.setIdling(!this.idling);\n\n    if (this.idling) {\n      this.onIdleStart.emit(null);\n      this.stopKeepalive();\n\n      if (this.timeoutVal > 0) {\n        this.countdown = this.timeoutVal;\n        this.doCountdown();\n        this.setTimoutIntervalOutsideZone(() => {\n          this.doCountdownInZone();\n        }, 1000);\n      }\n    } else {\n      this.toggleInterrupts(true);\n      this.onIdleEnd.emit(null);\n      this.startKeepalive();\n    }\n\n    this.safeClearInterval('idleHandle');\n  }\n\n  private setTimoutIntervalOutsideZone(\n    intervalFn: () => void,\n    frequency: number\n  ) {\n    this.zone.runOutsideAngular(() => {\n      this.timeoutHandle = setInterval(() => {\n        intervalFn();\n      }, frequency);\n    });\n  }\n\n  private toggleInterrupts(resume: boolean): void {\n    for (const interrupt of this.interrupts) {\n      if (resume) {\n        interrupt.resume();\n      } else {\n        interrupt.pause();\n      }\n    }\n  }\n\n  private getExpiryDiff(timeout: number): number {\n    const now: Date = this.expiry.now();\n    const last: Date = this.expiry.last() || now;\n    return last.getTime() - now.getTime() - timeout * 1000;\n  }\n\n  private doCountdownInZone(): void {\n    this.zone.run(() => {\n      this.doCountdown();\n    });\n  }\n\n  private doCountdown(): void {\n    const diff = this.getExpiryDiff(this.timeoutVal);\n    if (diff > 0) {\n      this.safeClearInterval('timeoutHandle');\n      this.interrupt(true);\n      return;\n    }\n\n    if (!this.idling) {\n      return;\n    }\n\n    if (this.countdown <= 0) {\n      this.timeout();\n      return;\n    }\n\n    this.onTimeoutWarning.emit(this.countdown);\n    this.countdown--;\n  }\n\n  private safeClearInterval(handleName: string): void {\n    const handle = this[handleName];\n    if (handle !== null && typeof handle !== 'undefined') {\n      clearInterval(this[handleName]);\n      this[handleName] = null;\n    }\n  }\n\n  private startKeepalive(): void {\n    if (!this.keepaliveSvc || !this.keepaliveEnabled) {\n      return;\n    }\n\n    if (this.running) {\n      this.keepaliveSvc.ping();\n    }\n\n    this.keepaliveSvc.start();\n  }\n\n  private stopKeepalive(): void {\n    if (!this.keepaliveSvc || !this.keepaliveEnabled) {\n      return;\n    }\n\n    this.keepaliveSvc.stop();\n  }\n\n  /*\n   * Called by Angular when destroying the instance.\n   */\n  ngOnDestroy(): void {\n    this.stop();\n    this.clearInterrupts();\n  }\n}\n","import { InterruptSource } from './interruptsource';\n\n/*\n * A class for expressing arguments to interrupt events.\n */\nexport class InterruptArgs {\n  constructor(\n    public source: InterruptSource,\n    public innerArgs: any,\n    public force = false\n  ) {}\n}\n","import { EventEmitter } from '@angular/core';\n\nimport { InterruptArgs } from './interruptargs';\n\ndeclare const Zone: any;\n\n/*\n * A base for classes that act as a source for interrupts.\n */\nexport abstract class InterruptSource {\n  isAttached = false;\n\n  public onInterrupt: EventEmitter<InterruptArgs> = new EventEmitter<\n    InterruptArgs\n  >();\n\n  constructor(\n    protected attachFn?: (source: InterruptSource) => void,\n    protected detachFn?: (source: InterruptSource) => void\n  ) {}\n\n  /*\n   * Attaches to the specified events on the specified source.\n   */\n  attach(): void {\n    // If the current zone is the 'angular' zone (a.k.a. NgZone) then re-enter this method in its parent zone\n    // The parent zone is usually the '<root>' zone but it can also be 'long-stack-trace-zone' in debug mode\n    // In tests, the current zone is typically a 'ProxyZone' created by async/fakeAsync (from @angular/core/testing)\n    if (Zone.current.get('isAngularZone') === true) {\n      Zone.current.parent.run(() => this.attach());\n      return;\n    }\n\n    if (!this.isAttached && this.attachFn) {\n      this.attachFn(this);\n    }\n\n    this.isAttached = true;\n  }\n\n  /*\n   * Detaches from the specified events on the specified source.\n   */\n  detach(): void {\n    if (this.isAttached && this.detachFn) {\n      this.detachFn(this);\n    }\n\n    this.isAttached = false;\n  }\n}\n","import { Observable, Subscription, fromEvent, merge } from 'rxjs';\nimport { filter, throttleTime } from 'rxjs/operators';\n\nimport { InterruptArgs } from './interruptargs';\nimport { InterruptSource } from './interruptsource';\n\n/**\n * Options for EventTargetInterruptSource\n */\nexport interface EventTargetInterruptOptions {\n  /**\n   * The number of milliseconds to throttle the events coming from the target.\n   */\n  throttleDelay?: number;\n\n  /**\n   * Whether or not to use passive event listeners.\n   * Note: you need to detect if the browser supports passive listeners, and only set this to true if it does.\n   */\n  passive?: boolean;\n}\n\nconst defaultThrottleDelay = 500;\n\n/*\n * An interrupt source on an EventTarget object, such as a Window or HTMLElement.\n */\nexport class EventTargetInterruptSource extends InterruptSource {\n  private eventSrc: Observable<any>;\n  private eventSubscription: Subscription = new Subscription();\n  protected throttleDelay: number;\n  protected passive: boolean;\n\n  constructor(\n    protected target: any,\n    protected events: string,\n    options?: number | EventTargetInterruptOptions\n  ) {\n    super(null, null);\n\n    if (typeof options === 'number') {\n      options = { throttleDelay: options, passive: false };\n    }\n\n    options = options || {\n      throttleDelay: defaultThrottleDelay,\n      passive: false\n    };\n\n    if (options.throttleDelay === undefined || options.throttleDelay === null) {\n      options.throttleDelay = defaultThrottleDelay;\n    }\n\n    this.throttleDelay = options.throttleDelay;\n    this.passive = !!options.passive;\n\n    const opts = this.passive ? { passive: true } : null;\n    const fromEvents = events\n      .split(' ')\n      .map(eventName => fromEvent<any>(target, eventName, opts));\n    this.eventSrc = merge(...fromEvents);\n    this.eventSrc = this.eventSrc.pipe(\n      filter(innerArgs => !this.filterEvent(innerArgs))\n    );\n    if (this.throttleDelay > 0) {\n      this.eventSrc = this.eventSrc.pipe(throttleTime(this.throttleDelay));\n    }\n\n    const handler = (innerArgs: any) =>\n      this.onInterrupt.emit(new InterruptArgs(this, innerArgs));\n\n    this.attachFn = () =>\n      (this.eventSubscription = this.eventSrc.subscribe(handler));\n\n    this.detachFn = () => this.eventSubscription.unsubscribe();\n  }\n\n  /*\n   * Checks to see if the event should be filtered. Always returns false unless overriden.\n   * @param event - The original event object.\n   * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\n   */\n  protected filterEvent(event: any): boolean {\n    return false;\n  }\n\n  /**\n   * Returns the current options being used.\n   * @return The current option values.\n   */\n  get options(): EventTargetInterruptOptions {\n    return { throttleDelay: this.throttleDelay, passive: this.passive };\n  }\n}\n","import {\n  EventTargetInterruptOptions,\n  EventTargetInterruptSource\n} from './eventtargetinterruptsource';\n\n/*\n * An interrupt source that uses events on the document element (html tag).\n */\nexport class DocumentInterruptSource extends EventTargetInterruptSource {\n  constructor(events: string, options?: number | EventTargetInterruptOptions) {\n    super(document.documentElement, events, options);\n  }\n\n  /*\n   * Checks to see if the event should be filtered.\n   * @param event - The original event object.\n   * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\n   */\n  filterEvent(event: any): boolean {\n    // some browser bad input hacks\n    if (\n      event.type === 'mousemove' &&\n      // fix for Chrome destop notifications\n      ((event.originalEvent &&\n        event.originalEvent.movementX === 0 &&\n        event.originalEvent.movementY === 0) ||\n        // fix for webkit fake mousemove\n        ((event.movementX !== void 0 && !event.movementX) || !event.movementY))\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n}\n","import {\n  EventTargetInterruptOptions,\n  EventTargetInterruptSource\n} from './eventtargetinterruptsource';\n\n/*\n * An interrupt source on the Window object.\n */\nexport class WindowInterruptSource extends EventTargetInterruptSource {\n  constructor(events: string, options?: number | EventTargetInterruptOptions) {\n    super(window, events, options);\n  }\n}\n","import { WindowInterruptSource } from './windowinterruptsource';\n\n/*\n * An interrupt source on the storage event of Window.\n */\nexport class StorageInterruptSource extends WindowInterruptSource {\n  constructor(throttleDelay = 500) {\n    super('storage', throttleDelay);\n  }\n\n  /*\n   * Checks to see if the event should be filtered.\n   * @param event - The original event object.\n   * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\n   */\n  filterEvent(event: StorageEvent): boolean {\n    if (\n      event.key &&\n      event.key.indexOf('ng2Idle.') >= 0 &&\n      event.key.indexOf('.expiry') >= 0\n    ) {\n      return false;\n    }\n    return true;\n  }\n}\n","import { IdleExpiry } from './idleexpiry';\n\n/*\n * Represents a simple in-memory store of expiry values.\n * @extends IdleExpiry\n */\nexport class SimpleExpiry extends IdleExpiry {\n  private lastValue: Date = null;\n\n  constructor() {\n    super();\n  }\n\n  /*\n   * Gets or sets the last expiry date.\n   * @param value - The expiry value to set; omit to only return the value.\n   * @return The current expiry value.\n   */\n  last(value?: Date): Date {\n    if (value !== void 0) {\n      this.lastValue = value;\n    }\n\n    return this.lastValue;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { Idle } from './idle';\nimport { IdleExpiry } from './idleexpiry';\nimport { LocalStorageExpiry } from './localstorageexpiry';\nimport { LocalStorage } from './localstorage';\n\n@NgModule({\n  providers: [LocalStorage]\n})\nexport class NgIdleModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgIdleModule,\n      providers: [\n        LocalStorageExpiry,\n        { provide: IdleExpiry, useExisting: LocalStorageExpiry },\n        Idle\n      ]\n    };\n  }\n}\n","import { DocumentInterruptSource } from './documentinterruptsource';\nimport { EventTargetInterruptOptions } from './eventtargetinterruptsource';\nimport { StorageInterruptSource } from './storageinterruptsource';\n\nexport function createDefaultInterruptSources(\n  options?: EventTargetInterruptOptions\n) {\n  return [\n    new DocumentInterruptSource(\n      'mousemove keydown DOMMouseScroll mousewheel mousedown touchstart touchmove scroll',\n      options\n    ),\n    new StorageInterruptSource()\n  ];\n}\n\nexport const DEFAULT_INTERRUPTSOURCES: any[] = createDefaultInterruptSources();\n"]}