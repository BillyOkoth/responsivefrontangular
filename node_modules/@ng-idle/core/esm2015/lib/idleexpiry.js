/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * Represents a base class for types that provide expiry detection for the Idle service.
 */
/**
 * @abstract
 */
export class IdleExpiry {
    constructor() {
        this.idValue = new Date();
        this.idlingValue = false;
    }
    /*
       * Gets or sets a unique ID for the window
       * @param id - The id.
       * @return The current id.
       */
    /**
     * @param {?=} value
     * @return {?}
     */
    id(value) {
        if (value !== void 0) {
            if (!value) {
                throw new Error('A value must be specified for the ID.');
            }
            this.idValue = value;
        }
        return this.idValue;
    }
    /*
       * Gets or sets the idling value.
       * @param value - The value to set.
       * @return The idling value.
       */
    /**
     * @param {?=} value
     * @return {?}
     */
    idling(value) {
        if (value !== void 0) {
            this.idlingValue = value;
        }
        return this.idlingValue;
    }
    /*
       * Returns the current Date.
       * @return The current Date.
       */
    /**
     * @return {?}
     */
    now() {
        /* istanbul ignore next */
        return new Date();
    }
    /*
       * Returns whether or not it is expired.
       * @return True if expired; otherwise, false.
       */
    /**
     * @return {?}
     */
    isExpired() {
        /** @type {?} */
        const expiry = this.last();
        return expiry != null && expiry <= this.now();
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    IdleExpiry.prototype.idValue;
    /**
     * @type {?}
     * @protected
     */
    IdleExpiry.prototype.idlingValue;
    /**
     * @abstract
     * @param {?=} value
     * @return {?}
     */
    IdleExpiry.prototype.last = function (value) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRsZWV4cGlyeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy1pZGxlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvaWRsZWV4cGlyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBR0EsTUFBTSxPQUFnQixVQUFVO0lBSTlCO1FBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0lBQzNCLENBQUM7Ozs7Ozs7Ozs7SUFPRCxFQUFFLENBQUMsS0FBVztRQUNaLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO2FBQzFEO1lBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7U0FDdEI7UUFFRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQzs7Ozs7Ozs7OztJQWNELE1BQU0sQ0FBQyxLQUFlO1FBQ3BCLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1NBQzFCO1FBRUQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7Ozs7Ozs7O0lBTUQsR0FBRztRQUNELDBCQUEwQjtRQUMxQixPQUFPLElBQUksSUFBSSxFQUFFLENBQUM7SUFDcEIsQ0FBQzs7Ozs7Ozs7SUFNRCxTQUFTOztjQUNELE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQzFCLE9BQU8sTUFBTSxJQUFJLElBQUksSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2hELENBQUM7Q0FDRjs7Ozs7O0lBOURDLDZCQUF1Qjs7Ozs7SUFDdkIsaUNBQStCOzs7Ozs7SUE2Qi9CLGlEQUFrQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBSZXByZXNlbnRzIGEgYmFzZSBjbGFzcyBmb3IgdHlwZXMgdGhhdCBwcm92aWRlIGV4cGlyeSBkZXRlY3Rpb24gZm9yIHRoZSBJZGxlIHNlcnZpY2UuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJZGxlRXhwaXJ5IHtcbiAgcHJvdGVjdGVkIGlkVmFsdWU6IGFueTtcbiAgcHJvdGVjdGVkIGlkbGluZ1ZhbHVlOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaWRWYWx1ZSA9IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5pZGxpbmdWYWx1ZSA9IGZhbHNlO1xuICB9XG5cbiAgLypcbiAgICogR2V0cyBvciBzZXRzIGEgdW5pcXVlIElEIGZvciB0aGUgd2luZG93XG4gICAqIEBwYXJhbSBpZCAtIFRoZSBpZC5cbiAgICogQHJldHVybiBUaGUgY3VycmVudCBpZC5cbiAgICovXG4gIGlkKHZhbHVlPzogYW55KTogYW55IHtcbiAgICBpZiAodmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgdmFsdWUgbXVzdCBiZSBzcGVjaWZpZWQgZm9yIHRoZSBJRC4nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pZFZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaWRWYWx1ZTtcbiAgfVxuXG4gIC8qXG4gICAqIEdldHMgb3Igc2V0cyB0aGUgbGFzdCBleHBpcnkgZGF0ZS5cbiAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHNldC5cbiAgICogQHJldHVybiBUaGUgbGFzdCBleHBpcnkgdmFsdWUuXG4gICAqL1xuICBhYnN0cmFjdCBsYXN0KHZhbHVlPzogRGF0ZSk6IERhdGU7XG5cbiAgLypcbiAgICogR2V0cyBvciBzZXRzIHRoZSBpZGxpbmcgdmFsdWUuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAqIEByZXR1cm4gVGhlIGlkbGluZyB2YWx1ZS5cbiAgICovXG4gIGlkbGluZyh2YWx1ZT86IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgICBpZiAodmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5pZGxpbmdWYWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmlkbGluZ1ZhbHVlO1xuICB9XG5cbiAgLypcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBEYXRlLlxuICAgKiBAcmV0dXJuIFRoZSBjdXJyZW50IERhdGUuXG4gICAqL1xuICBub3coKTogRGF0ZSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gbmV3IERhdGUoKTtcbiAgfVxuXG4gIC8qXG4gICAqIFJldHVybnMgd2hldGhlciBvciBub3QgaXQgaXMgZXhwaXJlZC5cbiAgICogQHJldHVybiBUcnVlIGlmIGV4cGlyZWQ7IG90aGVyd2lzZSwgZmFsc2UuXG4gICAqL1xuICBpc0V4cGlyZWQoKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZXhwaXJ5ID0gdGhpcy5sYXN0KCk7XG4gICAgcmV0dXJuIGV4cGlyeSAhPSBudWxsICYmIGV4cGlyeSA8PSB0aGlzLm5vdygpO1xuICB9XG59XG4iXX0=