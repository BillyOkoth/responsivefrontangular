/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * Represents an alternative storage for browser that doesn't support localstorage. (i.e. Safari in
 * private mode)
 * @implements Storage
 */
export class AlternativeStorage {
    constructor() {
        this.storageMap = {};
    }
    /*
       * Returns an integer representing the number of data items stored in the storageMap object.
       */
    /**
     * @return {?}
     */
    get length() {
        return Object.keys(this.storageMap).length;
    }
    /*
       * Remove all keys out of the storage.
       */
    /**
     * @return {?}
     */
    clear() {
        this.storageMap = {};
    }
    /*
       * Return the key's value
       *
       * @param key - name of the key to retrieve the value of.
       * @return The key's value
       */
    /**
     * @param {?} key
     * @return {?}
     */
    getItem(key) {
        if (typeof this.storageMap[key] !== 'undefined') {
            return this.storageMap[key];
        }
        return null;
    }
    /*
       * Return the nth key in the storage
       *
       * @param index - the number of the key you want to get the name of.
       * @return The name of the key.
       */
    /**
     * @param {?} index
     * @return {?}
     */
    key(index) {
        return Object.keys(this.storageMap)[index] || null;
    }
    /*
       * Remove a key from the storage.
       *
       * @param key - the name of the key you want to remove.
       */
    /**
     * @param {?} key
     * @return {?}
     */
    removeItem(key) {
        this.storageMap[key] = undefined;
    }
    /*
       * Add a key to the storage, or update a key's value if it already exists.
       *
       * @param key - the name of the key.
       * @param value - the value you want to give to the key.
       */
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setItem(key, value) {
        this.storageMap[key] = value;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    AlternativeStorage.prototype.storageMap;
    /* Skipping unhandled member: [key: string]: any;*/
    /* Skipping unhandled member: [index: number]: string;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWx0ZXJuYXRpdmVzdG9yYWdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWlkbGUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9hbHRlcm5hdGl2ZXN0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBS0EsTUFBTSxPQUFPLGtCQUFrQjtJQUEvQjtRQUNVLGVBQVUsR0FBUSxFQUFFLENBQUM7SUE0RC9CLENBQUM7Ozs7Ozs7SUF2REMsSUFBSSxNQUFNO1FBQ1IsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDN0MsQ0FBQzs7Ozs7OztJQUtELEtBQUs7UUFDSCxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUN2QixDQUFDOzs7Ozs7Ozs7OztJQVFELE9BQU8sQ0FBQyxHQUFXO1FBQ2pCLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFdBQVcsRUFBRTtZQUMvQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDN0I7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7Ozs7Ozs7O0lBUUQsR0FBRyxDQUFDLEtBQWE7UUFDZixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQztJQUNyRCxDQUFDOzs7Ozs7Ozs7O0lBT0QsVUFBVSxDQUFDLEdBQVc7UUFDcEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUM7SUFDbkMsQ0FBQzs7Ozs7Ozs7Ozs7O0lBUUQsT0FBTyxDQUFDLEdBQVcsRUFBRSxLQUFhO1FBQ2hDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQy9CLENBQUM7Q0FJRjs7Ozs7O0lBNURDLHdDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBSZXByZXNlbnRzIGFuIGFsdGVybmF0aXZlIHN0b3JhZ2UgZm9yIGJyb3dzZXIgdGhhdCBkb2Vzbid0IHN1cHBvcnQgbG9jYWxzdG9yYWdlLiAoaS5lLiBTYWZhcmkgaW5cbiAqIHByaXZhdGUgbW9kZSlcbiAqIEBpbXBsZW1lbnRzIFN0b3JhZ2VcbiAqL1xuZXhwb3J0IGNsYXNzIEFsdGVybmF0aXZlU3RvcmFnZSBpbXBsZW1lbnRzIFN0b3JhZ2Uge1xuICBwcml2YXRlIHN0b3JhZ2VNYXA6IGFueSA9IHt9O1xuXG4gIC8qXG4gICAqIFJldHVybnMgYW4gaW50ZWdlciByZXByZXNlbnRpbmcgdGhlIG51bWJlciBvZiBkYXRhIGl0ZW1zIHN0b3JlZCBpbiB0aGUgc3RvcmFnZU1hcCBvYmplY3QuXG4gICAqL1xuICBnZXQgbGVuZ3RoKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnN0b3JhZ2VNYXApLmxlbmd0aDtcbiAgfVxuXG4gIC8qXG4gICAqIFJlbW92ZSBhbGwga2V5cyBvdXQgb2YgdGhlIHN0b3JhZ2UuXG4gICAqL1xuICBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3JhZ2VNYXAgPSB7fTtcbiAgfVxuXG4gIC8qXG4gICAqIFJldHVybiB0aGUga2V5J3MgdmFsdWVcbiAgICpcbiAgICogQHBhcmFtIGtleSAtIG5hbWUgb2YgdGhlIGtleSB0byByZXRyaWV2ZSB0aGUgdmFsdWUgb2YuXG4gICAqIEByZXR1cm4gVGhlIGtleSdzIHZhbHVlXG4gICAqL1xuICBnZXRJdGVtKGtleTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnN0b3JhZ2VNYXBba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VNYXBba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKlxuICAgKiBSZXR1cm4gdGhlIG50aCBrZXkgaW4gdGhlIHN0b3JhZ2VcbiAgICpcbiAgICogQHBhcmFtIGluZGV4IC0gdGhlIG51bWJlciBvZiB0aGUga2V5IHlvdSB3YW50IHRvIGdldCB0aGUgbmFtZSBvZi5cbiAgICogQHJldHVybiBUaGUgbmFtZSBvZiB0aGUga2V5LlxuICAgKi9cbiAga2V5KGluZGV4OiBudW1iZXIpOiBzdHJpbmcgfCBudWxsIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5zdG9yYWdlTWFwKVtpbmRleF0gfHwgbnVsbDtcbiAgfVxuXG4gIC8qXG4gICAqIFJlbW92ZSBhIGtleSBmcm9tIHRoZSBzdG9yYWdlLlxuICAgKlxuICAgKiBAcGFyYW0ga2V5IC0gdGhlIG5hbWUgb2YgdGhlIGtleSB5b3Ugd2FudCB0byByZW1vdmUuXG4gICAqL1xuICByZW1vdmVJdGVtKGtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5zdG9yYWdlTWFwW2tleV0gPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvKlxuICAgKiBBZGQgYSBrZXkgdG8gdGhlIHN0b3JhZ2UsIG9yIHVwZGF0ZSBhIGtleSdzIHZhbHVlIGlmIGl0IGFscmVhZHkgZXhpc3RzLlxuICAgKlxuICAgKiBAcGFyYW0ga2V5IC0gdGhlIG5hbWUgb2YgdGhlIGtleS5cbiAgICogQHBhcmFtIHZhbHVlIC0gdGhlIHZhbHVlIHlvdSB3YW50IHRvIGdpdmUgdG8gdGhlIGtleS5cbiAgICovXG4gIHNldEl0ZW0oa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3JhZ2VNYXBba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgW2tleTogc3RyaW5nXTogYW55O1xuICBbaW5kZXg6IG51bWJlcl06IHN0cmluZztcbn1cbiJdfQ==