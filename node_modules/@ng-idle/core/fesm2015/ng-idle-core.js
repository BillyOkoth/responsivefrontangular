import { Injectable, EventEmitter, NgZone, Optional, NgModule } from '@angular/core';
import { Subscription, fromEvent, merge } from 'rxjs';
import { filter, throttleTime } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * Represents a base class for types that provide expiry detection for the Idle service.
 */
/**
 * @abstract
 */
class IdleExpiry {
    constructor() {
        this.idValue = new Date();
        this.idlingValue = false;
    }
    /*
       * Gets or sets a unique ID for the window
       * @param id - The id.
       * @return The current id.
       */
    /**
     * @param {?=} value
     * @return {?}
     */
    id(value) {
        if (value !== void 0) {
            if (!value) {
                throw new Error('A value must be specified for the ID.');
            }
            this.idValue = value;
        }
        return this.idValue;
    }
    /*
       * Gets or sets the idling value.
       * @param value - The value to set.
       * @return The idling value.
       */
    /**
     * @param {?=} value
     * @return {?}
     */
    idling(value) {
        if (value !== void 0) {
            this.idlingValue = value;
        }
        return this.idlingValue;
    }
    /*
       * Returns the current Date.
       * @return The current Date.
       */
    /**
     * @return {?}
     */
    now() {
        /* istanbul ignore next */
        return new Date();
    }
    /*
       * Returns whether or not it is expired.
       * @return True if expired; otherwise, false.
       */
    /**
     * @return {?}
     */
    isExpired() {
        /** @type {?} */
        const expiry = this.last();
        return expiry != null && expiry <= this.now();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * A class for managing an interrupt from an interrupt source.
 */
class Interrupt {
    /**
     * @param {?} source
     */
    constructor(source) {
        this.source = source;
    }
    /*
       * Subscribes to the interrupt using the specified function.
       * @param fn - The subscription function.
       */
    /**
     * @param {?} fn
     * @return {?}
     */
    subscribe(fn) {
        this.sub = this.source.onInterrupt.subscribe(fn);
    }
    /*
       * Unsubscribes the interrupt.
       */
    /**
     * @return {?}
     */
    unsubscribe() {
        this.sub.unsubscribe();
        this.sub = null;
    }
    /*
       * Keeps the subscription but resumes interrupt events.
       */
    /**
     * @return {?}
     */
    resume() {
        this.source.attach();
    }
    /*
       * Keeps the subscription but pauses interrupt events.
       */
    /**
     * @return {?}
     */
    pause() {
        this.source.detach();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class KeepaliveSvc {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * Represents an alternative storage for browser that doesn't support localstorage. (i.e. Safari in
 * private mode)
 * @implements Storage
 */
class AlternativeStorage {
    constructor() {
        this.storageMap = {};
    }
    /*
       * Returns an integer representing the number of data items stored in the storageMap object.
       */
    /**
     * @return {?}
     */
    get length() {
        return Object.keys(this.storageMap).length;
    }
    /*
       * Remove all keys out of the storage.
       */
    /**
     * @return {?}
     */
    clear() {
        this.storageMap = {};
    }
    /*
       * Return the key's value
       *
       * @param key - name of the key to retrieve the value of.
       * @return The key's value
       */
    /**
     * @param {?} key
     * @return {?}
     */
    getItem(key) {
        if (typeof this.storageMap[key] !== 'undefined') {
            return this.storageMap[key];
        }
        return null;
    }
    /*
       * Return the nth key in the storage
       *
       * @param index - the number of the key you want to get the name of.
       * @return The name of the key.
       */
    /**
     * @param {?} index
     * @return {?}
     */
    key(index) {
        return Object.keys(this.storageMap)[index] || null;
    }
    /*
       * Remove a key from the storage.
       *
       * @param key - the name of the key you want to remove.
       */
    /**
     * @param {?} key
     * @return {?}
     */
    removeItem(key) {
        this.storageMap[key] = undefined;
    }
    /*
       * Add a key to the storage, or update a key's value if it already exists.
       *
       * @param key - the name of the key.
       * @param value - the value you want to give to the key.
       */
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setItem(key, value) {
        this.storageMap[key] = value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * Represents a localStorage store.
 */
class LocalStorage {
    constructor() {
        this.storage = this.getStorage();
    }
    /*
       * Safari, in Private Browsing Mode, looks like it supports localStorage but all calls to setItem
       * throw QuotaExceededError. We're going to detect this and just silently drop any calls to
       * setItem
       * to avoid the entire page breaking, without having to do a check at each usage of Storage.
       */
    /**
     * @private
     * @return {?}
     */
    getStorage() {
        try {
            /** @type {?} */
            const storage = localStorage;
            storage.setItem('ng2IdleStorage', '');
            storage.removeItem('ng2IdleStorage');
            return storage;
        }
        catch (err) {
            return new AlternativeStorage();
        }
    }
    /*
       * Gets an item in the storage.
       *
       * @param value - The value to get.
       * @return The current value.
       */
    /**
     * @param {?} key
     * @return {?}
     */
    getItem(key) {
        return this.storage.getItem('ng2Idle.' + key);
    }
    /*
       * Removes an item in the storage.
       *
       * @param value - The value to remove.
       */
    /**
     * @param {?} key
     * @return {?}
     */
    removeItem(key) {
        this.storage.removeItem('ng2Idle.' + key);
    }
    /*
       * Sets an item in the storage.
       *
       * @param key - The key to set the value.
       * @param value - The value to set to the key.
       */
    /**
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    setItem(key, data) {
        this.storage.setItem('ng2Idle.' + key, data);
    }
    /*
       * Represents the storage, commonly use for testing purposes.
       *
       * @param key - The key to set the value.
       * @param value - The value to set to the key.
       */
    /**
     * @return {?}
     */
    _wrapped() {
        return this.storage;
    }
}
LocalStorage.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LocalStorage.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * Represents a localStorage store of expiry values.
 * @extends IdleExpiry
 */
class LocalStorageExpiry extends IdleExpiry {
    /**
     * @param {?} localStorage
     */
    constructor(localStorage) {
        super();
        this.localStorage = localStorage;
        this.idleName = 'main';
    }
    /*
       * Gets or sets the last expiry date in localStorage.
       * If localStorage doesn't work correctly (i.e. Safari in private mode), we store the expiry value in memory.
       * @param value - The expiry value to set; omit to only return the value.
       * @return The current expiry value.
       */
    /**
     * @param {?=} value
     * @return {?}
     */
    last(value) {
        if (value !== void 0) {
            this.setExpiry(value);
        }
        return this.getExpiry();
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    idling(value) {
        if (value !== void 0) {
            this.setIdling(value);
        }
        return this.getIdling();
    }
    /*
       * Gets the idle name.
       * @return The name of the idle.
       */
    /**
     * @return {?}
     */
    getIdleName() {
        return this.idleName;
    }
    /*
       * Sets the idle name.
       * @param The name of the idle.
       */
    /**
     * @param {?} key
     * @return {?}
     */
    setIdleName(key) {
        if (key) {
            this.idleName = key;
        }
    }
    /**
     * @private
     * @return {?}
     */
    getExpiry() {
        /** @type {?} */
        const expiry = this.localStorage.getItem(this.idleName + '.expiry');
        if (expiry) {
            return new Date(parseInt(expiry, 10));
        }
        else {
            return null;
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    setExpiry(value) {
        if (value) {
            this.localStorage.setItem(this.idleName + '.expiry', value.getTime().toString());
        }
        else {
            this.localStorage.removeItem(this.idleName + '.expiry');
        }
    }
    /**
     * @private
     * @return {?}
     */
    getIdling() {
        /** @type {?} */
        const idling = this.localStorage.getItem(this.idleName + '.idling');
        if (idling) {
            return idling === 'true';
        }
        else {
            return false;
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    setIdling(value) {
        if (value) {
            this.localStorage.setItem(this.idleName + '.idling', value.toString());
        }
        else {
            this.localStorage.setItem(this.idleName + '.idling', 'false');
        }
    }
}
LocalStorageExpiry.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LocalStorageExpiry.ctorParameters = () => [
    { type: LocalStorage }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const AutoResume = {
    /*
     * Auto resume functionality will be disabled.
     */
    disabled: 0,
    /*
     * Can resume automatically even if they are idle.
     */
    idle: 1,
    /*
     * Can only resume automatically if they are not yet idle.
     */
    notIdle: 2,
};
AutoResume[AutoResume.disabled] = 'disabled';
AutoResume[AutoResume.idle] = 'idle';
AutoResume[AutoResume.notIdle] = 'notIdle';
/**
 * A service for detecting and responding to user idleness.
 */
class Idle {
    /**
     * @param {?} expiry
     * @param {?} zone
     * @param {?=} keepaliveSvc
     */
    constructor(expiry, zone, keepaliveSvc) {
        this.expiry = expiry;
        this.zone = zone;
        this.idle = 20 * 60; // in seconds
        // in seconds
        this.timeoutVal = 30; // in seconds
        // in seconds
        this.autoResume = AutoResume.idle;
        this.interrupts = new Array();
        this.running = false;
        this.keepaliveEnabled = false;
        this.onIdleStart = new EventEmitter();
        this.onIdleEnd = new EventEmitter();
        this.onTimeoutWarning = new EventEmitter();
        this.onTimeout = new EventEmitter();
        this.onInterrupt = new EventEmitter();
        if (keepaliveSvc) {
            this.keepaliveSvc = keepaliveSvc;
            this.keepaliveEnabled = true;
        }
        this.setIdling(false);
    }
    /*
       * Sets the idle name for localStorage.
       * Important to set if multiple instances of Idle with LocalStorageExpiry
       * @param The name of the idle.
       */
    /**
     * @param {?} key
     * @return {?}
     */
    setIdleName(key) {
        if (this.expiry instanceof LocalStorageExpiry) {
            this.expiry.setIdleName(key);
        }
        else {
            throw new Error('Cannot set expiry key name because no LocalStorageExpiry has been provided.');
        }
    }
    /*
       * Returns whether or not keepalive integration is enabled.
       * @return True if integration is enabled; otherwise, false.
       */
    /**
     * @return {?}
     */
    getKeepaliveEnabled() {
        return this.keepaliveEnabled;
    }
    /*
       * Sets and returns whether or not keepalive integration is enabled.
       * @param True if the integration is enabled; otherwise, false.
       * @return The current value.
       */
    /**
     * @param {?} value
     * @return {?}
     */
    setKeepaliveEnabled(value) {
        if (!this.keepaliveSvc) {
            throw new Error('Cannot enable keepalive integration because no KeepaliveSvc has been provided.');
        }
        return (this.keepaliveEnabled = value);
    }
    /*
       * Returns the current timeout value.
       * @return The timeout value in seconds.
       */
    /**
     * @return {?}
     */
    getTimeout() {
        return this.timeoutVal;
    }
    /*
       * Sets the timeout value.
       * @param seconds - The timeout value in seconds. 0 or false to disable timeout feature.
       * @return The current value. If disabled, the value will be 0.
       */
    /**
     * @param {?} seconds
     * @return {?}
     */
    setTimeout(seconds) {
        if (seconds === false) {
            this.timeoutVal = 0;
        }
        else if (typeof seconds === 'number' && seconds >= 0) {
            this.timeoutVal = seconds;
        }
        else {
            throw new Error("'seconds' can only be 'false' or a positive number.");
        }
        return this.timeoutVal;
    }
    /*
       * Returns the current idle value.
       * @return The idle value in seconds.
       */
    /**
     * @return {?}
     */
    getIdle() {
        return this.idle;
    }
    /*
       * Sets the idle value.
       * @param seconds - The idle value in seconds.
       * @return The idle value in seconds.
       */
    /**
     * @param {?} seconds
     * @return {?}
     */
    setIdle(seconds) {
        if (seconds <= 0) {
            throw new Error("'seconds' must be greater zero");
        }
        return (this.idle = seconds);
    }
    /*
       * Returns the current autoresume value.
       * @return The current value.
       */
    /**
     * @return {?}
     */
    getAutoResume() {
        return this.autoResume;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setAutoResume(value) {
        return (this.autoResume = value);
    }
    /*
       * Sets interrupts from the specified sources.
       * @param sources - Interrupt sources.
       * @return The resulting interrupts.
       */
    /**
     * @param {?} sources
     * @return {?}
     */
    setInterrupts(sources) {
        this.clearInterrupts();
        /** @type {?} */
        const self = this;
        for (const source of sources) {
            /** @type {?} */
            const sub = new Interrupt(source);
            sub.subscribe((/**
             * @param {?} args
             * @return {?}
             */
            (args) => {
                self.interrupt(args.force, args.innerArgs);
            }));
            this.interrupts.push(sub);
        }
        return this.interrupts;
    }
    /*
       * Returns the current interrupts.
       * @return The current interrupts.
       */
    /**
     * @return {?}
     */
    getInterrupts() {
        return this.interrupts;
    }
    /*
       * Pauses, unsubscribes, and clears the current interrupt subscriptions.
       */
    /**
     * @return {?}
     */
    clearInterrupts() {
        for (const sub of this.interrupts) {
            sub.pause();
            sub.unsubscribe();
        }
        this.interrupts.length = 0;
    }
    /*
       * Returns whether or not the service is running i.e. watching for idleness.
       * @return True if service is watching; otherwise, false.
       */
    /**
     * @return {?}
     */
    isRunning() {
        return this.running;
    }
    /*
       * Returns whether or not the user is considered idle.
       * @return True if the user is in the idle state; otherwise, false.
       */
    /**
     * @return {?}
     */
    isIdling() {
        return this.idling;
    }
    /*
       * Starts watching for inactivity.
       */
    /**
     * @param {?=} skipExpiry
     * @return {?}
     */
    watch(skipExpiry) {
        this.safeClearInterval('idleHandle');
        this.safeClearInterval('timeoutHandle');
        /** @type {?} */
        const timeout = !this.timeoutVal ? 0 : this.timeoutVal;
        if (!skipExpiry) {
            /** @type {?} */
            const value = new Date(this.expiry.now().getTime() + (this.idle + timeout) * 1000);
            this.expiry.last(value);
        }
        if (this.idling) {
            this.toggleState();
        }
        if (!this.running) {
            this.startKeepalive();
            this.toggleInterrupts(true);
        }
        this.running = true;
        /** @type {?} */
        const watchFn = (/**
         * @return {?}
         */
        () => {
            this.zone.run((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const diff = this.getExpiryDiff(timeout);
                if (diff > 0) {
                    this.safeClearInterval('idleHandle');
                    this.setIdleIntervalOutsideOfZone(watchFn, diff);
                }
                else {
                    this.toggleState();
                }
            }));
        });
        this.setIdleIntervalOutsideOfZone(watchFn, this.idle * 1000);
    }
    /*
       * Allows protractor tests to call waitForAngular without hanging
       */
    /**
     * @param {?} watchFn
     * @param {?} frequency
     * @return {?}
     */
    setIdleIntervalOutsideOfZone(watchFn, frequency) {
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.idleHandle = setInterval(watchFn, frequency);
        }));
    }
    /*
       * Stops watching for inactivity.
       */
    /**
     * @return {?}
     */
    stop() {
        this.stopKeepalive();
        this.toggleInterrupts(false);
        this.safeClearInterval('idleHandle');
        this.safeClearInterval('timeoutHandle');
        this.setIdling(false);
        this.running = false;
        this.expiry.last(null);
    }
    /*
       * Forces a timeout event and state.
       */
    /**
     * @return {?}
     */
    timeout() {
        this.stopKeepalive();
        this.toggleInterrupts(false);
        this.safeClearInterval('idleHandle');
        this.safeClearInterval('timeoutHandle');
        this.setIdling(true);
        this.running = false;
        this.countdown = 0;
        this.onTimeout.emit(null);
    }
    /*
       * Signals that user activity has occurred.
       * @param force - Forces watch to be called, unless they are timed out.
       * @param eventArgs - Optional source event arguments.
       */
    /**
     * @param {?=} force
     * @param {?=} eventArgs
     * @return {?}
     */
    interrupt(force, eventArgs) {
        if (!this.running) {
            return;
        }
        if (this.timeoutVal && this.expiry.isExpired()) {
            this.timeout();
            return;
        }
        this.onInterrupt.emit(eventArgs);
        if (force === true ||
            this.autoResume === AutoResume.idle ||
            (this.autoResume === AutoResume.notIdle && !this.expiry.idling())) {
            this.watch(force);
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    setIdling(value) {
        this.idling = value;
        this.expiry.idling(value);
    }
    /**
     * @private
     * @return {?}
     */
    toggleState() {
        this.setIdling(!this.idling);
        if (this.idling) {
            this.onIdleStart.emit(null);
            this.stopKeepalive();
            if (this.timeoutVal > 0) {
                this.countdown = this.timeoutVal;
                this.doCountdown();
                this.setTimoutIntervalOutsideZone((/**
                 * @return {?}
                 */
                () => {
                    this.doCountdownInZone();
                }), 1000);
            }
        }
        else {
            this.toggleInterrupts(true);
            this.onIdleEnd.emit(null);
            this.startKeepalive();
        }
        this.safeClearInterval('idleHandle');
    }
    /**
     * @private
     * @param {?} intervalFn
     * @param {?} frequency
     * @return {?}
     */
    setTimoutIntervalOutsideZone(intervalFn, frequency) {
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.timeoutHandle = setInterval((/**
             * @return {?}
             */
            () => {
                intervalFn();
            }), frequency);
        }));
    }
    /**
     * @private
     * @param {?} resume
     * @return {?}
     */
    toggleInterrupts(resume) {
        for (const interrupt of this.interrupts) {
            if (resume) {
                interrupt.resume();
            }
            else {
                interrupt.pause();
            }
        }
    }
    /**
     * @private
     * @param {?} timeout
     * @return {?}
     */
    getExpiryDiff(timeout) {
        /** @type {?} */
        const now = this.expiry.now();
        /** @type {?} */
        const last = this.expiry.last() || now;
        return last.getTime() - now.getTime() - timeout * 1000;
    }
    /**
     * @private
     * @return {?}
     */
    doCountdownInZone() {
        this.zone.run((/**
         * @return {?}
         */
        () => {
            this.doCountdown();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    doCountdown() {
        /** @type {?} */
        const diff = this.getExpiryDiff(this.timeoutVal);
        if (diff > 0) {
            this.safeClearInterval('timeoutHandle');
            this.interrupt(true);
            return;
        }
        if (!this.idling) {
            return;
        }
        if (this.countdown <= 0) {
            this.timeout();
            return;
        }
        this.onTimeoutWarning.emit(this.countdown);
        this.countdown--;
    }
    /**
     * @private
     * @param {?} handleName
     * @return {?}
     */
    safeClearInterval(handleName) {
        /** @type {?} */
        const handle = this[handleName];
        if (handle !== null && typeof handle !== 'undefined') {
            clearInterval(this[handleName]);
            this[handleName] = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    startKeepalive() {
        if (!this.keepaliveSvc || !this.keepaliveEnabled) {
            return;
        }
        if (this.running) {
            this.keepaliveSvc.ping();
        }
        this.keepaliveSvc.start();
    }
    /**
     * @private
     * @return {?}
     */
    stopKeepalive() {
        if (!this.keepaliveSvc || !this.keepaliveEnabled) {
            return;
        }
        this.keepaliveSvc.stop();
    }
    /*
       * Called by Angular when destroying the instance.
       */
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.stop();
        this.clearInterrupts();
    }
}
Idle.decorators = [
    { type: Injectable }
];
/** @nocollapse */
Idle.ctorParameters = () => [
    { type: IdleExpiry },
    { type: NgZone },
    { type: KeepaliveSvc, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * A class for expressing arguments to interrupt events.
 */
class InterruptArgs {
    /**
     * @param {?} source
     * @param {?} innerArgs
     * @param {?=} force
     */
    constructor(source, innerArgs, force = false) {
        this.source = source;
        this.innerArgs = innerArgs;
        this.force = force;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * A base for classes that act as a source for interrupts.
 */
/**
 * @abstract
 */
class InterruptSource {
    /**
     * @param {?=} attachFn
     * @param {?=} detachFn
     */
    constructor(attachFn, detachFn) {
        this.attachFn = attachFn;
        this.detachFn = detachFn;
        this.isAttached = false;
        this.onInterrupt = new EventEmitter();
    }
    /*
       * Attaches to the specified events on the specified source.
       */
    /**
     * @return {?}
     */
    attach() {
        // If the current zone is the 'angular' zone (a.k.a. NgZone) then re-enter this method in its parent zone
        // The parent zone is usually the '<root>' zone but it can also be 'long-stack-trace-zone' in debug mode
        // In tests, the current zone is typically a 'ProxyZone' created by async/fakeAsync (from @angular/core/testing)
        if (Zone.current.get('isAngularZone') === true) {
            Zone.current.parent.run((/**
             * @return {?}
             */
            () => this.attach()));
            return;
        }
        if (!this.isAttached && this.attachFn) {
            this.attachFn(this);
        }
        this.isAttached = true;
    }
    /*
       * Detaches from the specified events on the specified source.
       */
    /**
     * @return {?}
     */
    detach() {
        if (this.isAttached && this.detachFn) {
            this.detachFn(this);
        }
        this.isAttached = false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const defaultThrottleDelay = 500;
/*
 * An interrupt source on an EventTarget object, such as a Window or HTMLElement.
 */
class EventTargetInterruptSource extends InterruptSource {
    /**
     * @param {?} target
     * @param {?} events
     * @param {?=} options
     */
    constructor(target, events, options) {
        super(null, null);
        this.target = target;
        this.events = events;
        this.eventSubscription = new Subscription();
        if (typeof options === 'number') {
            options = { throttleDelay: options, passive: false };
        }
        options = options || {
            throttleDelay: defaultThrottleDelay,
            passive: false
        };
        if (options.throttleDelay === undefined || options.throttleDelay === null) {
            options.throttleDelay = defaultThrottleDelay;
        }
        this.throttleDelay = options.throttleDelay;
        this.passive = !!options.passive;
        /** @type {?} */
        const opts = this.passive ? { passive: true } : null;
        /** @type {?} */
        const fromEvents = events
            .split(' ')
            .map((/**
         * @param {?} eventName
         * @return {?}
         */
        eventName => fromEvent(target, eventName, opts)));
        this.eventSrc = merge(...fromEvents);
        this.eventSrc = this.eventSrc.pipe(filter((/**
         * @param {?} innerArgs
         * @return {?}
         */
        innerArgs => !this.filterEvent(innerArgs))));
        if (this.throttleDelay > 0) {
            this.eventSrc = this.eventSrc.pipe(throttleTime(this.throttleDelay));
        }
        /** @type {?} */
        const handler = (/**
         * @param {?} innerArgs
         * @return {?}
         */
        (innerArgs) => this.onInterrupt.emit(new InterruptArgs(this, innerArgs)));
        this.attachFn = (/**
         * @return {?}
         */
        () => (this.eventSubscription = this.eventSrc.subscribe(handler)));
        this.detachFn = (/**
         * @return {?}
         */
        () => this.eventSubscription.unsubscribe());
    }
    /*
       * Checks to see if the event should be filtered. Always returns false unless overriden.
       * @param event - The original event object.
       * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.
       */
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    filterEvent(event) {
        return false;
    }
    /**
     * Returns the current options being used.
     * @return {?} The current option values.
     */
    get options() {
        return { throttleDelay: this.throttleDelay, passive: this.passive };
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * An interrupt source that uses events on the document element (html tag).
 */
class DocumentInterruptSource extends EventTargetInterruptSource {
    /**
     * @param {?} events
     * @param {?=} options
     */
    constructor(events, options) {
        super(document.documentElement, events, options);
    }
    /*
       * Checks to see if the event should be filtered.
       * @param event - The original event object.
       * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.
       */
    /**
     * @param {?} event
     * @return {?}
     */
    filterEvent(event) {
        // some browser bad input hacks
        if (event.type === 'mousemove' &&
            // fix for Chrome destop notifications
            ((event.originalEvent &&
                event.originalEvent.movementX === 0 &&
                event.originalEvent.movementY === 0) ||
                // fix for webkit fake mousemove
                ((event.movementX !== void 0 && !event.movementX) || !event.movementY))) {
            return true;
        }
        return false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * An interrupt source on the Window object.
 */
class WindowInterruptSource extends EventTargetInterruptSource {
    /**
     * @param {?} events
     * @param {?=} options
     */
    constructor(events, options) {
        super(window, events, options);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * An interrupt source on the storage event of Window.
 */
class StorageInterruptSource extends WindowInterruptSource {
    /**
     * @param {?=} throttleDelay
     */
    constructor(throttleDelay = 500) {
        super('storage', throttleDelay);
    }
    /*
       * Checks to see if the event should be filtered.
       * @param event - The original event object.
       * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.
       */
    /**
     * @param {?} event
     * @return {?}
     */
    filterEvent(event) {
        if (event.key &&
            event.key.indexOf('ng2Idle.') >= 0 &&
            event.key.indexOf('.expiry') >= 0) {
            return false;
        }
        return true;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * Represents a simple in-memory store of expiry values.
 * @extends IdleExpiry
 */
class SimpleExpiry extends IdleExpiry {
    constructor() {
        super();
        this.lastValue = null;
    }
    /*
       * Gets or sets the last expiry date.
       * @param value - The expiry value to set; omit to only return the value.
       * @return The current expiry value.
       */
    /**
     * @param {?=} value
     * @return {?}
     */
    last(value) {
        if (value !== void 0) {
            this.lastValue = value;
        }
        return this.lastValue;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgIdleModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: NgIdleModule,
            providers: [
                LocalStorageExpiry,
                { provide: IdleExpiry, useExisting: LocalStorageExpiry },
                Idle
            ]
        };
    }
}
NgIdleModule.decorators = [
    { type: NgModule, args: [{
                providers: [LocalStorage]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?=} options
 * @return {?}
 */
function createDefaultInterruptSources(options) {
    return [
        new DocumentInterruptSource('mousemove keydown DOMMouseScroll mousewheel mousedown touchstart touchmove scroll', options),
        new StorageInterruptSource()
    ];
}
/** @type {?} */
const DEFAULT_INTERRUPTSOURCES = createDefaultInterruptSources();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AutoResume, DEFAULT_INTERRUPTSOURCES, DocumentInterruptSource, EventTargetInterruptSource, Idle, IdleExpiry, InterruptArgs, InterruptSource, KeepaliveSvc, LocalStorage, LocalStorageExpiry, NgIdleModule, SimpleExpiry, StorageInterruptSource, WindowInterruptSource, createDefaultInterruptSources };
//# sourceMappingURL=ng-idle-core.js.map
