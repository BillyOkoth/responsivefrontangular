{"version":3,"file":"ng-idle-core.js","sources":["ng://@ng-idle/core/lib/idleexpiry.ts","ng://@ng-idle/core/lib/interrupt.ts","ng://@ng-idle/core/lib/keepalivesvc.ts","ng://@ng-idle/core/lib/alternativestorage.ts","ng://@ng-idle/core/lib/localstorage.ts","ng://@ng-idle/core/lib/localstorageexpiry.ts","ng://@ng-idle/core/lib/idle.ts","ng://@ng-idle/core/lib/interruptargs.ts","ng://@ng-idle/core/lib/interruptsource.ts","ng://@ng-idle/core/lib/eventtargetinterruptsource.ts","ng://@ng-idle/core/lib/documentinterruptsource.ts","ng://@ng-idle/core/lib/windowinterruptsource.ts","ng://@ng-idle/core/lib/storageinterruptsource.ts","ng://@ng-idle/core/lib/simpleexpiry.ts","ng://@ng-idle/core/lib/module.ts","ng://@ng-idle/core/lib/defaultinterruptsources.ts"],"sourcesContent":["/*\n * Represents a base class for types that provide expiry detection for the Idle service.\n */\nexport abstract class IdleExpiry {\n  protected idValue: any;\n  protected idlingValue: boolean;\n\n  constructor() {\n    this.idValue = new Date();\n    this.idlingValue = false;\n  }\n\n  /*\n   * Gets or sets a unique ID for the window\n   * @param id - The id.\n   * @return The current id.\n   */\n  id(value?: any): any {\n    if (value !== void 0) {\n      if (!value) {\n        throw new Error('A value must be specified for the ID.');\n      }\n\n      this.idValue = value;\n    }\n\n    return this.idValue;\n  }\n\n  /*\n   * Gets or sets the last expiry date.\n   * @param value - The value to set.\n   * @return The last expiry value.\n   */\n  abstract last(value?: Date): Date;\n\n  /*\n   * Gets or sets the idling value.\n   * @param value - The value to set.\n   * @return The idling value.\n   */\n  idling(value?: boolean): boolean {\n    if (value !== void 0) {\n      this.idlingValue = value;\n    }\n\n    return this.idlingValue;\n  }\n\n  /*\n   * Returns the current Date.\n   * @return The current Date.\n   */\n  now(): Date {\n    /* istanbul ignore next */\n    return new Date();\n  }\n\n  /*\n   * Returns whether or not it is expired.\n   * @return True if expired; otherwise, false.\n   */\n  isExpired(): boolean {\n    const expiry = this.last();\n    return expiry != null && expiry <= this.now();\n  }\n}\n","import { Subscription } from 'rxjs';\n\nimport { InterruptArgs } from './interruptargs';\nimport { InterruptSource } from './interruptsource';\n\n/*\n * A class for managing an interrupt from an interrupt source.\n */\nexport class Interrupt {\n  private sub: Subscription;\n\n  constructor(public source: InterruptSource) {}\n\n  /*\n   * Subscribes to the interrupt using the specified function.\n   * @param fn - The subscription function.\n   */\n  subscribe(fn: (args: InterruptArgs) => void): void {\n    this.sub = this.source.onInterrupt.subscribe(fn);\n  }\n\n  /*\n   * Unsubscribes the interrupt.\n   */\n  unsubscribe(): void {\n    this.sub.unsubscribe();\n    this.sub = null;\n  }\n\n  /*\n   * Keeps the subscription but resumes interrupt events.\n   */\n  resume(): void {\n    this.source.attach();\n  }\n\n  /*\n   * Keeps the subscription but pauses interrupt events.\n   */\n  pause(): void {\n    this.source.detach();\n  }\n}\n","export abstract class KeepaliveSvc {\n  abstract start(): void;\n  abstract stop(): void;\n  abstract ping(): void;\n}\n","/*\n * Represents an alternative storage for browser that doesn't support localstorage. (i.e. Safari in\n * private mode)\n * @implements Storage\n */\nexport class AlternativeStorage implements Storage {\n  private storageMap: any = {};\n\n  /*\n   * Returns an integer representing the number of data items stored in the storageMap object.\n   */\n  get length() {\n    return Object.keys(this.storageMap).length;\n  }\n\n  /*\n   * Remove all keys out of the storage.\n   */\n  clear(): void {\n    this.storageMap = {};\n  }\n\n  /*\n   * Return the key's value\n   *\n   * @param key - name of the key to retrieve the value of.\n   * @return The key's value\n   */\n  getItem(key: string): string | null {\n    if (typeof this.storageMap[key] !== 'undefined') {\n      return this.storageMap[key];\n    }\n    return null;\n  }\n\n  /*\n   * Return the nth key in the storage\n   *\n   * @param index - the number of the key you want to get the name of.\n   * @return The name of the key.\n   */\n  key(index: number): string | null {\n    return Object.keys(this.storageMap)[index] || null;\n  }\n\n  /*\n   * Remove a key from the storage.\n   *\n   * @param key - the name of the key you want to remove.\n   */\n  removeItem(key: string): void {\n    this.storageMap[key] = undefined;\n  }\n\n  /*\n   * Add a key to the storage, or update a key's value if it already exists.\n   *\n   * @param key - the name of the key.\n   * @param value - the value you want to give to the key.\n   */\n  setItem(key: string, value: string): void {\n    this.storageMap[key] = value;\n  }\n\n  [key: string]: any;\n  [index: number]: string;\n}\n","import { Injectable } from '@angular/core';\nimport { AlternativeStorage } from './alternativestorage';\n\n/*\n * Represents a localStorage store.\n */\n@Injectable()\nexport class LocalStorage {\n  private storage: Storage;\n\n  constructor() {\n    this.storage = this.getStorage();\n  }\n\n  /*\n   * Safari, in Private Browsing Mode, looks like it supports localStorage but all calls to setItem\n   * throw QuotaExceededError. We're going to detect this and just silently drop any calls to\n   * setItem\n   * to avoid the entire page breaking, without having to do a check at each usage of Storage.\n   */\n  private getStorage(): Storage {\n    try {\n      const storage = localStorage;\n      storage.setItem('ng2IdleStorage', '');\n      storage.removeItem('ng2IdleStorage');\n      return storage;\n    } catch (err) {\n      return new AlternativeStorage();\n    }\n  }\n\n  /*\n   * Gets an item in the storage.\n   *\n   * @param value - The value to get.\n   * @return The current value.\n   */\n  getItem(key: string): string | null {\n    return this.storage.getItem('ng2Idle.' + key);\n  }\n\n  /*\n   * Removes an item in the storage.\n   *\n   * @param value - The value to remove.\n   */\n  removeItem(key: string): void {\n    this.storage.removeItem('ng2Idle.' + key);\n  }\n\n  /*\n   * Sets an item in the storage.\n   *\n   * @param key - The key to set the value.\n   * @param value - The value to set to the key.\n   */\n  setItem(key: string, data: string): void {\n    this.storage.setItem('ng2Idle.' + key, data);\n  }\n\n  /*\n   * Represents the storage, commonly use for testing purposes.\n   *\n   * @param key - The key to set the value.\n   * @param value - The value to set to the key.\n   */\n  _wrapped(): Storage {\n    return this.storage;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IdleExpiry } from './idleexpiry';\nimport { LocalStorage } from './localstorage';\n\n/*\n * Represents a localStorage store of expiry values.\n * @extends IdleExpiry\n */\n@Injectable()\nexport class LocalStorageExpiry extends IdleExpiry {\n  private idleName = 'main';\n\n  constructor(private localStorage: LocalStorage) {\n    super();\n  }\n\n  /*\n   * Gets or sets the last expiry date in localStorage.\n   * If localStorage doesn't work correctly (i.e. Safari in private mode), we store the expiry value in memory.\n   * @param value - The expiry value to set; omit to only return the value.\n   * @return The current expiry value.\n   */\n  last(value?: Date): Date {\n    if (value !== void 0) {\n      this.setExpiry(value);\n    }\n    return this.getExpiry();\n  }\n\n  idling(value?: boolean): boolean {\n    if (value !== void 0) {\n      this.setIdling(value);\n    }\n    return this.getIdling();\n  }\n\n  /*\n   * Gets the idle name.\n   * @return The name of the idle.\n   */\n  getIdleName(): string {\n    return this.idleName;\n  }\n\n  /*\n   * Sets the idle name.\n   * @param The name of the idle.\n   */\n  setIdleName(key: string): void {\n    if (key) {\n      this.idleName = key;\n    }\n  }\n\n  private getExpiry(): Date {\n    const expiry: string = this.localStorage.getItem(this.idleName + '.expiry');\n    if (expiry) {\n      return new Date(parseInt(expiry, 10));\n    } else {\n      return null;\n    }\n  }\n\n  private setExpiry(value: Date) {\n    if (value) {\n      this.localStorage.setItem(\n        this.idleName + '.expiry',\n        value.getTime().toString()\n      );\n    } else {\n      this.localStorage.removeItem(this.idleName + '.expiry');\n    }\n  }\n\n  private getIdling(): boolean {\n    const idling: string = this.localStorage.getItem(this.idleName + '.idling');\n    if (idling) {\n      return idling === 'true';\n    } else {\n      return false;\n    }\n  }\n\n  private setIdling(value: boolean) {\n    if (value) {\n      this.localStorage.setItem(this.idleName + '.idling', value.toString());\n    } else {\n      this.localStorage.setItem(this.idleName + '.idling', 'false');\n    }\n  }\n}\n","import {\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional\n} from '@angular/core';\n\nimport { IdleExpiry } from './idleexpiry';\nimport { Interrupt } from './interrupt';\nimport { InterruptArgs } from './interruptargs';\nimport { InterruptSource } from './interruptsource';\nimport { KeepaliveSvc } from './keepalivesvc';\nimport { LocalStorageExpiry } from './localstorageexpiry';\n\n/*\n * Indicates the desired auto resume behavior.\n */\nexport enum AutoResume {\n  /*\n   * Auto resume functionality will be disabled.\n   */\n  disabled,\n  /*\n   * Can resume automatically even if they are idle.\n   */\n  idle,\n  /*\n   * Can only resume automatically if they are not yet idle.\n   */\n  notIdle\n}\n\n/**\n * A service for detecting and responding to user idleness.\n */\n@Injectable()\nexport class Idle implements OnDestroy {\n  private idle: number = 20 * 60; // in seconds\n  private timeoutVal = 30; // in seconds\n  private autoResume: AutoResume = AutoResume.idle;\n  private interrupts: Array<Interrupt> = new Array();\n  private running = false;\n  private idling: boolean;\n  private idleHandle: any;\n  private timeoutHandle: any;\n  private countdown: number;\n  private keepaliveEnabled = false;\n  private keepaliveSvc: KeepaliveSvc;\n\n  public onIdleStart: EventEmitter<any> = new EventEmitter();\n  public onIdleEnd: EventEmitter<any> = new EventEmitter();\n  public onTimeoutWarning: EventEmitter<number> = new EventEmitter<number>();\n  public onTimeout: EventEmitter<number> = new EventEmitter<number>();\n  public onInterrupt: EventEmitter<any> = new EventEmitter();\n\n  [key: string]: any;\n\n  constructor(\n    private expiry: IdleExpiry,\n    private zone: NgZone,\n    @Optional() keepaliveSvc?: KeepaliveSvc\n  ) {\n    if (keepaliveSvc) {\n      this.keepaliveSvc = keepaliveSvc;\n      this.keepaliveEnabled = true;\n    }\n    this.setIdling(false);\n  }\n\n  /*\n   * Sets the idle name for localStorage.\n   * Important to set if multiple instances of Idle with LocalStorageExpiry\n   * @param The name of the idle.\n   */\n  setIdleName(key: string): void {\n    if (this.expiry instanceof LocalStorageExpiry) {\n      this.expiry.setIdleName(key);\n    } else {\n      throw new Error(\n        'Cannot set expiry key name because no LocalStorageExpiry has been provided.'\n      );\n    }\n  }\n\n  /*\n   * Returns whether or not keepalive integration is enabled.\n   * @return True if integration is enabled; otherwise, false.\n   */\n  getKeepaliveEnabled(): boolean {\n    return this.keepaliveEnabled;\n  }\n\n  /*\n   * Sets and returns whether or not keepalive integration is enabled.\n   * @param True if the integration is enabled; otherwise, false.\n   * @return The current value.\n   */\n  setKeepaliveEnabled(value: boolean): boolean {\n    if (!this.keepaliveSvc) {\n      throw new Error(\n        'Cannot enable keepalive integration because no KeepaliveSvc has been provided.'\n      );\n    }\n\n    return (this.keepaliveEnabled = value);\n  }\n\n  /*\n   * Returns the current timeout value.\n   * @return The timeout value in seconds.\n   */\n  getTimeout(): number {\n    return this.timeoutVal;\n  }\n\n  /*\n   * Sets the timeout value.\n   * @param seconds - The timeout value in seconds. 0 or false to disable timeout feature.\n   * @return The current value. If disabled, the value will be 0.\n   */\n  setTimeout(seconds: number | boolean): number {\n    if (seconds === false) {\n      this.timeoutVal = 0;\n    } else if (typeof seconds === 'number' && seconds >= 0) {\n      this.timeoutVal = seconds;\n    } else {\n      throw new Error(\"'seconds' can only be 'false' or a positive number.\");\n    }\n\n    return this.timeoutVal;\n  }\n\n  /*\n   * Returns the current idle value.\n   * @return The idle value in seconds.\n   */\n  getIdle(): number {\n    return this.idle;\n  }\n\n  /*\n   * Sets the idle value.\n   * @param seconds - The idle value in seconds.\n   * @return The idle value in seconds.\n   */\n  setIdle(seconds: number): number {\n    if (seconds <= 0) {\n      throw new Error(\"'seconds' must be greater zero\");\n    }\n\n    return (this.idle = seconds);\n  }\n\n  /*\n   * Returns the current autoresume value.\n   * @return The current value.\n   */\n  getAutoResume(): AutoResume {\n    return this.autoResume;\n  }\n\n  setAutoResume(value: AutoResume): AutoResume {\n    return (this.autoResume = value);\n  }\n\n  /*\n   * Sets interrupts from the specified sources.\n   * @param sources - Interrupt sources.\n   * @return The resulting interrupts.\n   */\n  setInterrupts(sources: Array<InterruptSource>): Array<Interrupt> {\n    this.clearInterrupts();\n\n    const self = this;\n\n    for (const source of sources) {\n      const sub = new Interrupt(source);\n      sub.subscribe((args: InterruptArgs) => {\n        self.interrupt(args.force, args.innerArgs);\n      });\n\n      this.interrupts.push(sub);\n    }\n\n    return this.interrupts;\n  }\n\n  /*\n   * Returns the current interrupts.\n   * @return The current interrupts.\n   */\n  getInterrupts(): Array<Interrupt> {\n    return this.interrupts;\n  }\n\n  /*\n   * Pauses, unsubscribes, and clears the current interrupt subscriptions.\n   */\n  clearInterrupts(): void {\n    for (const sub of this.interrupts) {\n      sub.pause();\n      sub.unsubscribe();\n    }\n\n    this.interrupts.length = 0;\n  }\n\n  /*\n   * Returns whether or not the service is running i.e. watching for idleness.\n   * @return True if service is watching; otherwise, false.\n   */\n  isRunning(): boolean {\n    return this.running;\n  }\n\n  /*\n   * Returns whether or not the user is considered idle.\n   * @return True if the user is in the idle state; otherwise, false.\n   */\n  isIdling(): boolean {\n    return this.idling;\n  }\n\n  /*\n   * Starts watching for inactivity.\n   */\n  watch(skipExpiry?: boolean): void {\n    this.safeClearInterval('idleHandle');\n    this.safeClearInterval('timeoutHandle');\n\n    const timeout = !this.timeoutVal ? 0 : this.timeoutVal;\n    if (!skipExpiry) {\n      const value = new Date(\n        this.expiry.now().getTime() + (this.idle + timeout) * 1000\n      );\n      this.expiry.last(value);\n    }\n\n    if (this.idling) {\n      this.toggleState();\n    }\n    if (!this.running) {\n      this.startKeepalive();\n      this.toggleInterrupts(true);\n    }\n\n    this.running = true;\n\n    const watchFn = () => {\n      this.zone.run(() => {\n        const diff = this.getExpiryDiff(timeout);\n        if (diff > 0) {\n          this.safeClearInterval('idleHandle');\n          this.setIdleIntervalOutsideOfZone(watchFn, diff);\n        } else {\n          this.toggleState();\n        }\n      });\n    };\n\n    this.setIdleIntervalOutsideOfZone(watchFn, this.idle * 1000);\n  }\n\n  /*\n   * Allows protractor tests to call waitForAngular without hanging\n   */\n  setIdleIntervalOutsideOfZone(watchFn: () => void, frequency: number): void {\n    this.zone.runOutsideAngular(() => {\n      this.idleHandle = setInterval(watchFn, frequency);\n    });\n  }\n\n  /*\n   * Stops watching for inactivity.\n   */\n  stop(): void {\n    this.stopKeepalive();\n\n    this.toggleInterrupts(false);\n\n    this.safeClearInterval('idleHandle');\n    this.safeClearInterval('timeoutHandle');\n\n    this.setIdling(false);\n    this.running = false;\n\n    this.expiry.last(null);\n  }\n\n  /*\n   * Forces a timeout event and state.\n   */\n  timeout(): void {\n    this.stopKeepalive();\n\n    this.toggleInterrupts(false);\n\n    this.safeClearInterval('idleHandle');\n    this.safeClearInterval('timeoutHandle');\n\n    this.setIdling(true);\n    this.running = false;\n    this.countdown = 0;\n\n    this.onTimeout.emit(null);\n  }\n\n  /*\n   * Signals that user activity has occurred.\n   * @param force - Forces watch to be called, unless they are timed out.\n   * @param eventArgs - Optional source event arguments.\n   */\n  interrupt(force?: boolean, eventArgs?: any): void {\n    if (!this.running) {\n      return;\n    }\n\n    if (this.timeoutVal && this.expiry.isExpired()) {\n      this.timeout();\n      return;\n    }\n    this.onInterrupt.emit(eventArgs);\n\n    if (\n      force === true ||\n      this.autoResume === AutoResume.idle ||\n      (this.autoResume === AutoResume.notIdle && !this.expiry.idling())\n    ) {\n      this.watch(force);\n    }\n  }\n\n  private setIdling(value: boolean): void {\n    this.idling = value;\n    this.expiry.idling(value);\n  }\n\n  private toggleState(): void {\n    this.setIdling(!this.idling);\n\n    if (this.idling) {\n      this.onIdleStart.emit(null);\n      this.stopKeepalive();\n\n      if (this.timeoutVal > 0) {\n        this.countdown = this.timeoutVal;\n        this.doCountdown();\n        this.setTimoutIntervalOutsideZone(() => {\n          this.doCountdownInZone();\n        }, 1000);\n      }\n    } else {\n      this.toggleInterrupts(true);\n      this.onIdleEnd.emit(null);\n      this.startKeepalive();\n    }\n\n    this.safeClearInterval('idleHandle');\n  }\n\n  private setTimoutIntervalOutsideZone(\n    intervalFn: () => void,\n    frequency: number\n  ) {\n    this.zone.runOutsideAngular(() => {\n      this.timeoutHandle = setInterval(() => {\n        intervalFn();\n      }, frequency);\n    });\n  }\n\n  private toggleInterrupts(resume: boolean): void {\n    for (const interrupt of this.interrupts) {\n      if (resume) {\n        interrupt.resume();\n      } else {\n        interrupt.pause();\n      }\n    }\n  }\n\n  private getExpiryDiff(timeout: number): number {\n    const now: Date = this.expiry.now();\n    const last: Date = this.expiry.last() || now;\n    return last.getTime() - now.getTime() - timeout * 1000;\n  }\n\n  private doCountdownInZone(): void {\n    this.zone.run(() => {\n      this.doCountdown();\n    });\n  }\n\n  private doCountdown(): void {\n    const diff = this.getExpiryDiff(this.timeoutVal);\n    if (diff > 0) {\n      this.safeClearInterval('timeoutHandle');\n      this.interrupt(true);\n      return;\n    }\n\n    if (!this.idling) {\n      return;\n    }\n\n    if (this.countdown <= 0) {\n      this.timeout();\n      return;\n    }\n\n    this.onTimeoutWarning.emit(this.countdown);\n    this.countdown--;\n  }\n\n  private safeClearInterval(handleName: string): void {\n    const handle = this[handleName];\n    if (handle !== null && typeof handle !== 'undefined') {\n      clearInterval(this[handleName]);\n      this[handleName] = null;\n    }\n  }\n\n  private startKeepalive(): void {\n    if (!this.keepaliveSvc || !this.keepaliveEnabled) {\n      return;\n    }\n\n    if (this.running) {\n      this.keepaliveSvc.ping();\n    }\n\n    this.keepaliveSvc.start();\n  }\n\n  private stopKeepalive(): void {\n    if (!this.keepaliveSvc || !this.keepaliveEnabled) {\n      return;\n    }\n\n    this.keepaliveSvc.stop();\n  }\n\n  /*\n   * Called by Angular when destroying the instance.\n   */\n  ngOnDestroy(): void {\n    this.stop();\n    this.clearInterrupts();\n  }\n}\n","import { InterruptSource } from './interruptsource';\n\n/*\n * A class for expressing arguments to interrupt events.\n */\nexport class InterruptArgs {\n  constructor(\n    public source: InterruptSource,\n    public innerArgs: any,\n    public force = false\n  ) {}\n}\n","import { EventEmitter } from '@angular/core';\n\nimport { InterruptArgs } from './interruptargs';\n\ndeclare const Zone: any;\n\n/*\n * A base for classes that act as a source for interrupts.\n */\nexport abstract class InterruptSource {\n  isAttached = false;\n\n  public onInterrupt: EventEmitter<InterruptArgs> = new EventEmitter<\n    InterruptArgs\n  >();\n\n  constructor(\n    protected attachFn?: (source: InterruptSource) => void,\n    protected detachFn?: (source: InterruptSource) => void\n  ) {}\n\n  /*\n   * Attaches to the specified events on the specified source.\n   */\n  attach(): void {\n    // If the current zone is the 'angular' zone (a.k.a. NgZone) then re-enter this method in its parent zone\n    // The parent zone is usually the '<root>' zone but it can also be 'long-stack-trace-zone' in debug mode\n    // In tests, the current zone is typically a 'ProxyZone' created by async/fakeAsync (from @angular/core/testing)\n    if (Zone.current.get('isAngularZone') === true) {\n      Zone.current.parent.run(() => this.attach());\n      return;\n    }\n\n    if (!this.isAttached && this.attachFn) {\n      this.attachFn(this);\n    }\n\n    this.isAttached = true;\n  }\n\n  /*\n   * Detaches from the specified events on the specified source.\n   */\n  detach(): void {\n    if (this.isAttached && this.detachFn) {\n      this.detachFn(this);\n    }\n\n    this.isAttached = false;\n  }\n}\n","import { Observable, Subscription, fromEvent, merge } from 'rxjs';\nimport { filter, throttleTime } from 'rxjs/operators';\n\nimport { InterruptArgs } from './interruptargs';\nimport { InterruptSource } from './interruptsource';\n\n/**\n * Options for EventTargetInterruptSource\n */\nexport interface EventTargetInterruptOptions {\n  /**\n   * The number of milliseconds to throttle the events coming from the target.\n   */\n  throttleDelay?: number;\n\n  /**\n   * Whether or not to use passive event listeners.\n   * Note: you need to detect if the browser supports passive listeners, and only set this to true if it does.\n   */\n  passive?: boolean;\n}\n\nconst defaultThrottleDelay = 500;\n\n/*\n * An interrupt source on an EventTarget object, such as a Window or HTMLElement.\n */\nexport class EventTargetInterruptSource extends InterruptSource {\n  private eventSrc: Observable<any>;\n  private eventSubscription: Subscription = new Subscription();\n  protected throttleDelay: number;\n  protected passive: boolean;\n\n  constructor(\n    protected target: any,\n    protected events: string,\n    options?: number | EventTargetInterruptOptions\n  ) {\n    super(null, null);\n\n    if (typeof options === 'number') {\n      options = { throttleDelay: options, passive: false };\n    }\n\n    options = options || {\n      throttleDelay: defaultThrottleDelay,\n      passive: false\n    };\n\n    if (options.throttleDelay === undefined || options.throttleDelay === null) {\n      options.throttleDelay = defaultThrottleDelay;\n    }\n\n    this.throttleDelay = options.throttleDelay;\n    this.passive = !!options.passive;\n\n    const opts = this.passive ? { passive: true } : null;\n    const fromEvents = events\n      .split(' ')\n      .map(eventName => fromEvent<any>(target, eventName, opts));\n    this.eventSrc = merge(...fromEvents);\n    this.eventSrc = this.eventSrc.pipe(\n      filter(innerArgs => !this.filterEvent(innerArgs))\n    );\n    if (this.throttleDelay > 0) {\n      this.eventSrc = this.eventSrc.pipe(throttleTime(this.throttleDelay));\n    }\n\n    const handler = (innerArgs: any) =>\n      this.onInterrupt.emit(new InterruptArgs(this, innerArgs));\n\n    this.attachFn = () =>\n      (this.eventSubscription = this.eventSrc.subscribe(handler));\n\n    this.detachFn = () => this.eventSubscription.unsubscribe();\n  }\n\n  /*\n   * Checks to see if the event should be filtered. Always returns false unless overriden.\n   * @param event - The original event object.\n   * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\n   */\n  protected filterEvent(event: any): boolean {\n    return false;\n  }\n\n  /**\n   * Returns the current options being used.\n   * @return The current option values.\n   */\n  get options(): EventTargetInterruptOptions {\n    return { throttleDelay: this.throttleDelay, passive: this.passive };\n  }\n}\n","import {\n  EventTargetInterruptOptions,\n  EventTargetInterruptSource\n} from './eventtargetinterruptsource';\n\n/*\n * An interrupt source that uses events on the document element (html tag).\n */\nexport class DocumentInterruptSource extends EventTargetInterruptSource {\n  constructor(events: string, options?: number | EventTargetInterruptOptions) {\n    super(document.documentElement, events, options);\n  }\n\n  /*\n   * Checks to see if the event should be filtered.\n   * @param event - The original event object.\n   * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\n   */\n  filterEvent(event: any): boolean {\n    // some browser bad input hacks\n    if (\n      event.type === 'mousemove' &&\n      // fix for Chrome destop notifications\n      ((event.originalEvent &&\n        event.originalEvent.movementX === 0 &&\n        event.originalEvent.movementY === 0) ||\n        // fix for webkit fake mousemove\n        ((event.movementX !== void 0 && !event.movementX) || !event.movementY))\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n}\n","import {\n  EventTargetInterruptOptions,\n  EventTargetInterruptSource\n} from './eventtargetinterruptsource';\n\n/*\n * An interrupt source on the Window object.\n */\nexport class WindowInterruptSource extends EventTargetInterruptSource {\n  constructor(events: string, options?: number | EventTargetInterruptOptions) {\n    super(window, events, options);\n  }\n}\n","import { WindowInterruptSource } from './windowinterruptsource';\n\n/*\n * An interrupt source on the storage event of Window.\n */\nexport class StorageInterruptSource extends WindowInterruptSource {\n  constructor(throttleDelay = 500) {\n    super('storage', throttleDelay);\n  }\n\n  /*\n   * Checks to see if the event should be filtered.\n   * @param event - The original event object.\n   * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\n   */\n  filterEvent(event: StorageEvent): boolean {\n    if (\n      event.key &&\n      event.key.indexOf('ng2Idle.') >= 0 &&\n      event.key.indexOf('.expiry') >= 0\n    ) {\n      return false;\n    }\n    return true;\n  }\n}\n","import { IdleExpiry } from './idleexpiry';\n\n/*\n * Represents a simple in-memory store of expiry values.\n * @extends IdleExpiry\n */\nexport class SimpleExpiry extends IdleExpiry {\n  private lastValue: Date = null;\n\n  constructor() {\n    super();\n  }\n\n  /*\n   * Gets or sets the last expiry date.\n   * @param value - The expiry value to set; omit to only return the value.\n   * @return The current expiry value.\n   */\n  last(value?: Date): Date {\n    if (value !== void 0) {\n      this.lastValue = value;\n    }\n\n    return this.lastValue;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { Idle } from './idle';\nimport { IdleExpiry } from './idleexpiry';\nimport { LocalStorageExpiry } from './localstorageexpiry';\nimport { LocalStorage } from './localstorage';\n\n@NgModule({\n  providers: [LocalStorage]\n})\nexport class NgIdleModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgIdleModule,\n      providers: [\n        LocalStorageExpiry,\n        { provide: IdleExpiry, useExisting: LocalStorageExpiry },\n        Idle\n      ]\n    };\n  }\n}\n","import { DocumentInterruptSource } from './documentinterruptsource';\nimport { EventTargetInterruptOptions } from './eventtargetinterruptsource';\nimport { StorageInterruptSource } from './storageinterruptsource';\n\nexport function createDefaultInterruptSources(\n  options?: EventTargetInterruptOptions\n) {\n  return [\n    new DocumentInterruptSource(\n      'mousemove keydown DOMMouseScroll mousewheel mousedown touchstart touchmove scroll',\n      options\n    ),\n    new StorageInterruptSource()\n  ];\n}\n\nexport const DEFAULT_INTERRUPTSOURCES: any[] = createDefaultInterruptSources();\n"],"names":[],"mappings":"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"}