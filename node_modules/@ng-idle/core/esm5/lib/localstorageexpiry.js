/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { IdleExpiry } from './idleexpiry';
import { LocalStorage } from './localstorage';
/*
 * Represents a localStorage store of expiry values.
 * @extends IdleExpiry
 */
var LocalStorageExpiry = /** @class */ (function (_super) {
    tslib_1.__extends(LocalStorageExpiry, _super);
    function LocalStorageExpiry(localStorage) {
        var _this = _super.call(this) || this;
        _this.localStorage = localStorage;
        _this.idleName = 'main';
        return _this;
    }
    /*
     * Gets or sets the last expiry date in localStorage.
     * If localStorage doesn't work correctly (i.e. Safari in private mode), we store the expiry value in memory.
     * @param value - The expiry value to set; omit to only return the value.
     * @return The current expiry value.
     */
    /*
       * Gets or sets the last expiry date in localStorage.
       * If localStorage doesn't work correctly (i.e. Safari in private mode), we store the expiry value in memory.
       * @param value - The expiry value to set; omit to only return the value.
       * @return The current expiry value.
       */
    /**
     * @param {?=} value
     * @return {?}
     */
    LocalStorageExpiry.prototype.last = /*
       * Gets or sets the last expiry date in localStorage.
       * If localStorage doesn't work correctly (i.e. Safari in private mode), we store the expiry value in memory.
       * @param value - The expiry value to set; omit to only return the value.
       * @return The current expiry value.
       */
    /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value !== void 0) {
            this.setExpiry(value);
        }
        return this.getExpiry();
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    LocalStorageExpiry.prototype.idling = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value !== void 0) {
            this.setIdling(value);
        }
        return this.getIdling();
    };
    /*
     * Gets the idle name.
     * @return The name of the idle.
     */
    /*
       * Gets the idle name.
       * @return The name of the idle.
       */
    /**
     * @return {?}
     */
    LocalStorageExpiry.prototype.getIdleName = /*
       * Gets the idle name.
       * @return The name of the idle.
       */
    /**
     * @return {?}
     */
    function () {
        return this.idleName;
    };
    /*
     * Sets the idle name.
     * @param The name of the idle.
     */
    /*
       * Sets the idle name.
       * @param The name of the idle.
       */
    /**
     * @param {?} key
     * @return {?}
     */
    LocalStorageExpiry.prototype.setIdleName = /*
       * Sets the idle name.
       * @param The name of the idle.
       */
    /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (key) {
            this.idleName = key;
        }
    };
    /**
     * @private
     * @return {?}
     */
    LocalStorageExpiry.prototype.getExpiry = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var expiry = this.localStorage.getItem(this.idleName + '.expiry');
        if (expiry) {
            return new Date(parseInt(expiry, 10));
        }
        else {
            return null;
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    LocalStorageExpiry.prototype.setExpiry = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.localStorage.setItem(this.idleName + '.expiry', value.getTime().toString());
        }
        else {
            this.localStorage.removeItem(this.idleName + '.expiry');
        }
    };
    /**
     * @private
     * @return {?}
     */
    LocalStorageExpiry.prototype.getIdling = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var idling = this.localStorage.getItem(this.idleName + '.idling');
        if (idling) {
            return idling === 'true';
        }
        else {
            return false;
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    LocalStorageExpiry.prototype.setIdling = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.localStorage.setItem(this.idleName + '.idling', value.toString());
        }
        else {
            this.localStorage.setItem(this.idleName + '.idling', 'false');
        }
    };
    LocalStorageExpiry.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LocalStorageExpiry.ctorParameters = function () { return [
        { type: LocalStorage }
    ]; };
    return LocalStorageExpiry;
}(IdleExpiry));
export { LocalStorageExpiry };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LocalStorageExpiry.prototype.idleName;
    /**
     * @type {?}
     * @private
     */
    LocalStorageExpiry.prototype.localStorage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxzdG9yYWdlZXhwaXJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWlkbGUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9sb2NhbHN0b3JhZ2VleHBpcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7OztBQU05QztJQUN3Qyw4Q0FBVTtJQUdoRCw0QkFBb0IsWUFBMEI7UUFBOUMsWUFDRSxpQkFBTyxTQUNSO1FBRm1CLGtCQUFZLEdBQVosWUFBWSxDQUFjO1FBRnRDLGNBQVEsR0FBRyxNQUFNLENBQUM7O0lBSTFCLENBQUM7SUFFRDs7Ozs7T0FLRzs7Ozs7Ozs7Ozs7SUFDSCxpQ0FBSTs7Ozs7Ozs7OztJQUFKLFVBQUssS0FBWTtRQUNmLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdkI7UUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7OztJQUVELG1DQUFNOzs7O0lBQU4sVUFBTyxLQUFlO1FBQ3BCLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdkI7UUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQ7OztPQUdHOzs7Ozs7OztJQUNILHdDQUFXOzs7Ozs7O0lBQVg7UUFDRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7Ozs7O0lBQ0gsd0NBQVc7Ozs7Ozs7O0lBQVgsVUFBWSxHQUFXO1FBQ3JCLElBQUksR0FBRyxFQUFFO1lBQ1AsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUM7U0FDckI7SUFDSCxDQUFDOzs7OztJQUVPLHNDQUFTOzs7O0lBQWpCOztZQUNRLE1BQU0sR0FBVyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUMzRSxJQUFJLE1BQU0sRUFBRTtZQUNWLE9BQU8sSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3ZDO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQzs7Ozs7O0lBRU8sc0NBQVM7Ozs7O0lBQWpCLFVBQWtCLEtBQVc7UUFDM0IsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLEVBQ3pCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FDM0IsQ0FBQztTQUNIO2FBQU07WUFDTCxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1NBQ3pEO0lBQ0gsQ0FBQzs7Ozs7SUFFTyxzQ0FBUzs7OztJQUFqQjs7WUFDUSxNQUFNLEdBQVcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7UUFDM0UsSUFBSSxNQUFNLEVBQUU7WUFDVixPQUFPLE1BQU0sS0FBSyxNQUFNLENBQUM7U0FDMUI7YUFBTTtZQUNMLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7SUFDSCxDQUFDOzs7Ozs7SUFFTyxzQ0FBUzs7Ozs7SUFBakIsVUFBa0IsS0FBYztRQUM5QixJQUFJLEtBQUssRUFBRTtZQUNULElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQ3hFO2FBQU07WUFDTCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUMvRDtJQUNILENBQUM7O2dCQWpGRixVQUFVOzs7O2dCQU5GLFlBQVk7O0lBd0ZyQix5QkFBQztDQUFBLEFBbEZELENBQ3dDLFVBQVUsR0FpRmpEO1NBakZZLGtCQUFrQjs7Ozs7O0lBQzdCLHNDQUEwQjs7Ozs7SUFFZCwwQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZGxlRXhwaXJ5IH0gZnJvbSAnLi9pZGxlZXhwaXJ5JztcbmltcG9ydCB7IExvY2FsU3RvcmFnZSB9IGZyb20gJy4vbG9jYWxzdG9yYWdlJztcblxuLypcbiAqIFJlcHJlc2VudHMgYSBsb2NhbFN0b3JhZ2Ugc3RvcmUgb2YgZXhwaXJ5IHZhbHVlcy5cbiAqIEBleHRlbmRzIElkbGVFeHBpcnlcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExvY2FsU3RvcmFnZUV4cGlyeSBleHRlbmRzIElkbGVFeHBpcnkge1xuICBwcml2YXRlIGlkbGVOYW1lID0gJ21haW4nO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9jYWxTdG9yYWdlOiBMb2NhbFN0b3JhZ2UpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLypcbiAgICogR2V0cyBvciBzZXRzIHRoZSBsYXN0IGV4cGlyeSBkYXRlIGluIGxvY2FsU3RvcmFnZS5cbiAgICogSWYgbG9jYWxTdG9yYWdlIGRvZXNuJ3Qgd29yayBjb3JyZWN0bHkgKGkuZS4gU2FmYXJpIGluIHByaXZhdGUgbW9kZSksIHdlIHN0b3JlIHRoZSBleHBpcnkgdmFsdWUgaW4gbWVtb3J5LlxuICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgZXhwaXJ5IHZhbHVlIHRvIHNldDsgb21pdCB0byBvbmx5IHJldHVybiB0aGUgdmFsdWUuXG4gICAqIEByZXR1cm4gVGhlIGN1cnJlbnQgZXhwaXJ5IHZhbHVlLlxuICAgKi9cbiAgbGFzdCh2YWx1ZT86IERhdGUpOiBEYXRlIHtcbiAgICBpZiAodmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5zZXRFeHBpcnkodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRFeHBpcnkoKTtcbiAgfVxuXG4gIGlkbGluZyh2YWx1ZT86IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgICBpZiAodmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5zZXRJZGxpbmcodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRJZGxpbmcoKTtcbiAgfVxuXG4gIC8qXG4gICAqIEdldHMgdGhlIGlkbGUgbmFtZS5cbiAgICogQHJldHVybiBUaGUgbmFtZSBvZiB0aGUgaWRsZS5cbiAgICovXG4gIGdldElkbGVOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuaWRsZU5hbWU7XG4gIH1cblxuICAvKlxuICAgKiBTZXRzIHRoZSBpZGxlIG5hbWUuXG4gICAqIEBwYXJhbSBUaGUgbmFtZSBvZiB0aGUgaWRsZS5cbiAgICovXG4gIHNldElkbGVOYW1lKGtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKGtleSkge1xuICAgICAgdGhpcy5pZGxlTmFtZSA9IGtleTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEV4cGlyeSgpOiBEYXRlIHtcbiAgICBjb25zdCBleHBpcnk6IHN0cmluZyA9IHRoaXMubG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5pZGxlTmFtZSArICcuZXhwaXJ5Jyk7XG4gICAgaWYgKGV4cGlyeSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKHBhcnNlSW50KGV4cGlyeSwgMTApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRFeHBpcnkodmFsdWU6IERhdGUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMubG9jYWxTdG9yYWdlLnNldEl0ZW0oXG4gICAgICAgIHRoaXMuaWRsZU5hbWUgKyAnLmV4cGlyeScsXG4gICAgICAgIHZhbHVlLmdldFRpbWUoKS50b1N0cmluZygpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuaWRsZU5hbWUgKyAnLmV4cGlyeScpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0SWRsaW5nKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGlkbGluZzogc3RyaW5nID0gdGhpcy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmlkbGVOYW1lICsgJy5pZGxpbmcnKTtcbiAgICBpZiAoaWRsaW5nKSB7XG4gICAgICByZXR1cm4gaWRsaW5nID09PSAndHJ1ZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldElkbGluZyh2YWx1ZTogYm9vbGVhbikge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLmlkbGVOYW1lICsgJy5pZGxpbmcnLCB2YWx1ZS50b1N0cmluZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLmlkbGVOYW1lICsgJy5pZGxpbmcnLCAnZmFsc2UnKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==