/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { AlternativeStorage } from './alternativestorage';
/*
 * Represents a localStorage store.
 */
var LocalStorage = /** @class */ (function () {
    function LocalStorage() {
        this.storage = this.getStorage();
    }
    /*
     * Safari, in Private Browsing Mode, looks like it supports localStorage but all calls to setItem
     * throw QuotaExceededError. We're going to detect this and just silently drop any calls to
     * setItem
     * to avoid the entire page breaking, without having to do a check at each usage of Storage.
     */
    /*
       * Safari, in Private Browsing Mode, looks like it supports localStorage but all calls to setItem
       * throw QuotaExceededError. We're going to detect this and just silently drop any calls to
       * setItem
       * to avoid the entire page breaking, without having to do a check at each usage of Storage.
       */
    /**
     * @private
     * @return {?}
     */
    LocalStorage.prototype.getStorage = /*
       * Safari, in Private Browsing Mode, looks like it supports localStorage but all calls to setItem
       * throw QuotaExceededError. We're going to detect this and just silently drop any calls to
       * setItem
       * to avoid the entire page breaking, without having to do a check at each usage of Storage.
       */
    /**
     * @private
     * @return {?}
     */
    function () {
        try {
            /** @type {?} */
            var storage = localStorage;
            storage.setItem('ng2IdleStorage', '');
            storage.removeItem('ng2IdleStorage');
            return storage;
        }
        catch (err) {
            return new AlternativeStorage();
        }
    };
    /*
     * Gets an item in the storage.
     *
     * @param value - The value to get.
     * @return The current value.
     */
    /*
       * Gets an item in the storage.
       *
       * @param value - The value to get.
       * @return The current value.
       */
    /**
     * @param {?} key
     * @return {?}
     */
    LocalStorage.prototype.getItem = /*
       * Gets an item in the storage.
       *
       * @param value - The value to get.
       * @return The current value.
       */
    /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.storage.getItem('ng2Idle.' + key);
    };
    /*
     * Removes an item in the storage.
     *
     * @param value - The value to remove.
     */
    /*
       * Removes an item in the storage.
       *
       * @param value - The value to remove.
       */
    /**
     * @param {?} key
     * @return {?}
     */
    LocalStorage.prototype.removeItem = /*
       * Removes an item in the storage.
       *
       * @param value - The value to remove.
       */
    /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        this.storage.removeItem('ng2Idle.' + key);
    };
    /*
     * Sets an item in the storage.
     *
     * @param key - The key to set the value.
     * @param value - The value to set to the key.
     */
    /*
       * Sets an item in the storage.
       *
       * @param key - The key to set the value.
       * @param value - The value to set to the key.
       */
    /**
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    LocalStorage.prototype.setItem = /*
       * Sets an item in the storage.
       *
       * @param key - The key to set the value.
       * @param value - The value to set to the key.
       */
    /**
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    function (key, data) {
        this.storage.setItem('ng2Idle.' + key, data);
    };
    /*
     * Represents the storage, commonly use for testing purposes.
     *
     * @param key - The key to set the value.
     * @param value - The value to set to the key.
     */
    /*
       * Represents the storage, commonly use for testing purposes.
       *
       * @param key - The key to set the value.
       * @param value - The value to set to the key.
       */
    /**
     * @return {?}
     */
    LocalStorage.prototype._wrapped = /*
       * Represents the storage, commonly use for testing purposes.
       *
       * @param key - The key to set the value.
       * @param value - The value to set to the key.
       */
    /**
     * @return {?}
     */
    function () {
        return this.storage;
    };
    LocalStorage.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LocalStorage.ctorParameters = function () { return []; };
    return LocalStorage;
}());
export { LocalStorage };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LocalStorage.prototype.storage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxzdG9yYWdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWlkbGUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9sb2NhbHN0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7QUFLMUQ7SUFJRTtRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFRDs7Ozs7T0FLRzs7Ozs7Ozs7Ozs7SUFDSyxpQ0FBVTs7Ozs7Ozs7OztJQUFsQjtRQUNFLElBQUk7O2dCQUNJLE9BQU8sR0FBRyxZQUFZO1lBQzVCLE9BQU8sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdEMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3JDLE9BQU8sT0FBTyxDQUFDO1NBQ2hCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixPQUFPLElBQUksa0JBQWtCLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7SUFFRDs7Ozs7T0FLRzs7Ozs7Ozs7Ozs7SUFDSCw4QkFBTzs7Ozs7Ozs7OztJQUFQLFVBQVEsR0FBVztRQUNqQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQ7Ozs7T0FJRzs7Ozs7Ozs7OztJQUNILGlDQUFVOzs7Ozs7Ozs7SUFBVixVQUFXLEdBQVc7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRDs7Ozs7T0FLRzs7Ozs7Ozs7Ozs7O0lBQ0gsOEJBQU87Ozs7Ozs7Ozs7O0lBQVAsVUFBUSxHQUFXLEVBQUUsSUFBWTtRQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRDs7Ozs7T0FLRzs7Ozs7Ozs7OztJQUNILCtCQUFROzs7Ozs7Ozs7SUFBUjtRQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDOztnQkE5REYsVUFBVTs7OztJQStEWCxtQkFBQztDQUFBLEFBL0RELElBK0RDO1NBOURZLFlBQVk7Ozs7OztJQUN2QiwrQkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbHRlcm5hdGl2ZVN0b3JhZ2UgfSBmcm9tICcuL2FsdGVybmF0aXZlc3RvcmFnZSc7XG5cbi8qXG4gKiBSZXByZXNlbnRzIGEgbG9jYWxTdG9yYWdlIHN0b3JlLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTG9jYWxTdG9yYWdlIHtcbiAgcHJpdmF0ZSBzdG9yYWdlOiBTdG9yYWdlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc3RvcmFnZSA9IHRoaXMuZ2V0U3RvcmFnZSgpO1xuICB9XG5cbiAgLypcbiAgICogU2FmYXJpLCBpbiBQcml2YXRlIEJyb3dzaW5nIE1vZGUsIGxvb2tzIGxpa2UgaXQgc3VwcG9ydHMgbG9jYWxTdG9yYWdlIGJ1dCBhbGwgY2FsbHMgdG8gc2V0SXRlbVxuICAgKiB0aHJvdyBRdW90YUV4Y2VlZGVkRXJyb3IuIFdlJ3JlIGdvaW5nIHRvIGRldGVjdCB0aGlzIGFuZCBqdXN0IHNpbGVudGx5IGRyb3AgYW55IGNhbGxzIHRvXG4gICAqIHNldEl0ZW1cbiAgICogdG8gYXZvaWQgdGhlIGVudGlyZSBwYWdlIGJyZWFraW5nLCB3aXRob3V0IGhhdmluZyB0byBkbyBhIGNoZWNrIGF0IGVhY2ggdXNhZ2Ugb2YgU3RvcmFnZS5cbiAgICovXG4gIHByaXZhdGUgZ2V0U3RvcmFnZSgpOiBTdG9yYWdlIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3RvcmFnZSA9IGxvY2FsU3RvcmFnZTtcbiAgICAgIHN0b3JhZ2Uuc2V0SXRlbSgnbmcySWRsZVN0b3JhZ2UnLCAnJyk7XG4gICAgICBzdG9yYWdlLnJlbW92ZUl0ZW0oJ25nMklkbGVTdG9yYWdlJyk7XG4gICAgICByZXR1cm4gc3RvcmFnZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBuZXcgQWx0ZXJuYXRpdmVTdG9yYWdlKCk7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogR2V0cyBhbiBpdGVtIGluIHRoZSBzdG9yYWdlLlxuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gZ2V0LlxuICAgKiBAcmV0dXJuIFRoZSBjdXJyZW50IHZhbHVlLlxuICAgKi9cbiAgZ2V0SXRlbShrZXk6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0SXRlbSgnbmcySWRsZS4nICsga2V5KTtcbiAgfVxuXG4gIC8qXG4gICAqIFJlbW92ZXMgYW4gaXRlbSBpbiB0aGUgc3RvcmFnZS5cbiAgICpcbiAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICovXG4gIHJlbW92ZUl0ZW0oa2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnbmcySWRsZS4nICsga2V5KTtcbiAgfVxuXG4gIC8qXG4gICAqIFNldHMgYW4gaXRlbSBpbiB0aGUgc3RvcmFnZS5cbiAgICpcbiAgICogQHBhcmFtIGtleSAtIFRoZSBrZXkgdG8gc2V0IHRoZSB2YWx1ZS5cbiAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHNldCB0byB0aGUga2V5LlxuICAgKi9cbiAgc2V0SXRlbShrZXk6IHN0cmluZywgZGF0YTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5zdG9yYWdlLnNldEl0ZW0oJ25nMklkbGUuJyArIGtleSwgZGF0YSk7XG4gIH1cblxuICAvKlxuICAgKiBSZXByZXNlbnRzIHRoZSBzdG9yYWdlLCBjb21tb25seSB1c2UgZm9yIHRlc3RpbmcgcHVycG9zZXMuXG4gICAqXG4gICAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IHRvIHNldCB0aGUgdmFsdWUuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBzZXQgdG8gdGhlIGtleS5cbiAgICovXG4gIF93cmFwcGVkKCk6IFN0b3JhZ2Uge1xuICAgIHJldHVybiB0aGlzLnN0b3JhZ2U7XG4gIH1cbn1cbiJdfQ==