/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * A class for managing an interrupt from an interrupt source.
 */
var /*
 * A class for managing an interrupt from an interrupt source.
 */
Interrupt = /** @class */ (function () {
    function Interrupt(source) {
        this.source = source;
    }
    /*
     * Subscribes to the interrupt using the specified function.
     * @param fn - The subscription function.
     */
    /*
       * Subscribes to the interrupt using the specified function.
       * @param fn - The subscription function.
       */
    /**
     * @param {?} fn
     * @return {?}
     */
    Interrupt.prototype.subscribe = /*
       * Subscribes to the interrupt using the specified function.
       * @param fn - The subscription function.
       */
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.sub = this.source.onInterrupt.subscribe(fn);
    };
    /*
     * Unsubscribes the interrupt.
     */
    /*
       * Unsubscribes the interrupt.
       */
    /**
     * @return {?}
     */
    Interrupt.prototype.unsubscribe = /*
       * Unsubscribes the interrupt.
       */
    /**
     * @return {?}
     */
    function () {
        this.sub.unsubscribe();
        this.sub = null;
    };
    /*
     * Keeps the subscription but resumes interrupt events.
     */
    /*
       * Keeps the subscription but resumes interrupt events.
       */
    /**
     * @return {?}
     */
    Interrupt.prototype.resume = /*
       * Keeps the subscription but resumes interrupt events.
       */
    /**
     * @return {?}
     */
    function () {
        this.source.attach();
    };
    /*
     * Keeps the subscription but pauses interrupt events.
     */
    /*
       * Keeps the subscription but pauses interrupt events.
       */
    /**
     * @return {?}
     */
    Interrupt.prototype.pause = /*
       * Keeps the subscription but pauses interrupt events.
       */
    /**
     * @return {?}
     */
    function () {
        this.source.detach();
    };
    return Interrupt;
}());
/*
 * A class for managing an interrupt from an interrupt source.
 */
export { Interrupt };
if (false) {
    /**
     * @type {?}
     * @private
     */
    Interrupt.prototype.sub;
    /** @type {?} */
    Interrupt.prototype.source;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJydXB0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWlkbGUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcnJ1cHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVFBOzs7O0lBR0UsbUJBQW1CLE1BQXVCO1FBQXZCLFdBQU0sR0FBTixNQUFNLENBQWlCO0lBQUcsQ0FBQztJQUU5Qzs7O09BR0c7Ozs7Ozs7OztJQUNILDZCQUFTOzs7Ozs7OztJQUFULFVBQVUsRUFBaUM7UUFDekMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOztPQUVHOzs7Ozs7O0lBQ0gsK0JBQVc7Ozs7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztJQUNsQixDQUFDO0lBRUQ7O09BRUc7Ozs7Ozs7SUFDSCwwQkFBTTs7Ozs7O0lBQU47UUFDRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7T0FFRzs7Ozs7OztJQUNILHlCQUFLOzs7Ozs7SUFBTDtRQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUNILGdCQUFDO0FBQUQsQ0FBQyxBQWxDRCxJQWtDQzs7Ozs7Ozs7OztJQWpDQyx3QkFBMEI7O0lBRWQsMkJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEludGVycnVwdEFyZ3MgfSBmcm9tICcuL2ludGVycnVwdGFyZ3MnO1xuaW1wb3J0IHsgSW50ZXJydXB0U291cmNlIH0gZnJvbSAnLi9pbnRlcnJ1cHRzb3VyY2UnO1xuXG4vKlxuICogQSBjbGFzcyBmb3IgbWFuYWdpbmcgYW4gaW50ZXJydXB0IGZyb20gYW4gaW50ZXJydXB0IHNvdXJjZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEludGVycnVwdCB7XG4gIHByaXZhdGUgc3ViOiBTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IocHVibGljIHNvdXJjZTogSW50ZXJydXB0U291cmNlKSB7fVxuXG4gIC8qXG4gICAqIFN1YnNjcmliZXMgdG8gdGhlIGludGVycnVwdCB1c2luZyB0aGUgc3BlY2lmaWVkIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0gZm4gLSBUaGUgc3Vic2NyaXB0aW9uIGZ1bmN0aW9uLlxuICAgKi9cbiAgc3Vic2NyaWJlKGZuOiAoYXJnczogSW50ZXJydXB0QXJncykgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuc3ViID0gdGhpcy5zb3VyY2Uub25JbnRlcnJ1cHQuc3Vic2NyaWJlKGZuKTtcbiAgfVxuXG4gIC8qXG4gICAqIFVuc3Vic2NyaWJlcyB0aGUgaW50ZXJydXB0LlxuICAgKi9cbiAgdW5zdWJzY3JpYmUoKTogdm9pZCB7XG4gICAgdGhpcy5zdWIudW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLnN1YiA9IG51bGw7XG4gIH1cblxuICAvKlxuICAgKiBLZWVwcyB0aGUgc3Vic2NyaXB0aW9uIGJ1dCByZXN1bWVzIGludGVycnVwdCBldmVudHMuXG4gICAqL1xuICByZXN1bWUoKTogdm9pZCB7XG4gICAgdGhpcy5zb3VyY2UuYXR0YWNoKCk7XG4gIH1cblxuICAvKlxuICAgKiBLZWVwcyB0aGUgc3Vic2NyaXB0aW9uIGJ1dCBwYXVzZXMgaW50ZXJydXB0IGV2ZW50cy5cbiAgICovXG4gIHBhdXNlKCk6IHZvaWQge1xuICAgIHRoaXMuc291cmNlLmRldGFjaCgpO1xuICB9XG59XG4iXX0=