/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { WindowInterruptSource } from './windowinterruptsource';
/*
 * An interrupt source on the storage event of Window.
 */
var /*
 * An interrupt source on the storage event of Window.
 */
StorageInterruptSource = /** @class */ (function (_super) {
    tslib_1.__extends(StorageInterruptSource, _super);
    function StorageInterruptSource(throttleDelay) {
        if (throttleDelay === void 0) { throttleDelay = 500; }
        return _super.call(this, 'storage', throttleDelay) || this;
    }
    /*
     * Checks to see if the event should be filtered.
     * @param event - The original event object.
     * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.
     */
    /*
       * Checks to see if the event should be filtered.
       * @param event - The original event object.
       * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.
       */
    /**
     * @param {?} event
     * @return {?}
     */
    StorageInterruptSource.prototype.filterEvent = /*
       * Checks to see if the event should be filtered.
       * @param event - The original event object.
       * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.
       */
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.key &&
            event.key.indexOf('ng2Idle.') >= 0 &&
            event.key.indexOf('.expiry') >= 0) {
            return false;
        }
        return true;
    };
    return StorageInterruptSource;
}(WindowInterruptSource));
/*
 * An interrupt source on the storage event of Window.
 */
export { StorageInterruptSource };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZWludGVycnVwdHNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy1pZGxlL2NvcmUvIiwic291cmNlcyI6WyJsaWIvc3RvcmFnZWludGVycnVwdHNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7O0FBS2hFOzs7O0lBQTRDLGtEQUFxQjtJQUMvRCxnQ0FBWSxhQUFtQjtRQUFuQiw4QkFBQSxFQUFBLG1CQUFtQjtlQUM3QixrQkFBTSxTQUFTLEVBQUUsYUFBYSxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7OztPQUlHOzs7Ozs7Ozs7O0lBQ0gsNENBQVc7Ozs7Ozs7OztJQUFYLFVBQVksS0FBbUI7UUFDN0IsSUFDRSxLQUFLLENBQUMsR0FBRztZQUNULEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDbEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUNqQztZQUNBLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDSCw2QkFBQztBQUFELENBQUMsQUFwQkQsQ0FBNEMscUJBQXFCLEdBb0JoRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdpbmRvd0ludGVycnVwdFNvdXJjZSB9IGZyb20gJy4vd2luZG93aW50ZXJydXB0c291cmNlJztcblxuLypcbiAqIEFuIGludGVycnVwdCBzb3VyY2Ugb24gdGhlIHN0b3JhZ2UgZXZlbnQgb2YgV2luZG93LlxuICovXG5leHBvcnQgY2xhc3MgU3RvcmFnZUludGVycnVwdFNvdXJjZSBleHRlbmRzIFdpbmRvd0ludGVycnVwdFNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yKHRocm90dGxlRGVsYXkgPSA1MDApIHtcbiAgICBzdXBlcignc3RvcmFnZScsIHRocm90dGxlRGVsYXkpO1xuICB9XG5cbiAgLypcbiAgICogQ2hlY2tzIHRvIHNlZSBpZiB0aGUgZXZlbnQgc2hvdWxkIGJlIGZpbHRlcmVkLlxuICAgKiBAcGFyYW0gZXZlbnQgLSBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0LlxuICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIGV2ZW50IHNob3VsZCBiZSBmaWx0ZXJlZCAoZG9uJ3QgY2F1c2UgYW4gaW50ZXJydXB0KTsgb3RoZXJ3aXNlLCBmYWxzZS5cbiAgICovXG4gIGZpbHRlckV2ZW50KGV2ZW50OiBTdG9yYWdlRXZlbnQpOiBib29sZWFuIHtcbiAgICBpZiAoXG4gICAgICBldmVudC5rZXkgJiZcbiAgICAgIGV2ZW50LmtleS5pbmRleE9mKCduZzJJZGxlLicpID49IDAgJiZcbiAgICAgIGV2ZW50LmtleS5pbmRleE9mKCcuZXhwaXJ5JykgPj0gMFxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuIl19