/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { IdleExpiry } from './idleexpiry';
/*
 * Represents a simple in-memory store of expiry values.
 * @extends IdleExpiry
 */
var /*
 * Represents a simple in-memory store of expiry values.
 * @extends IdleExpiry
 */
SimpleExpiry = /** @class */ (function (_super) {
    tslib_1.__extends(SimpleExpiry, _super);
    function SimpleExpiry() {
        var _this = _super.call(this) || this;
        _this.lastValue = null;
        return _this;
    }
    /*
     * Gets or sets the last expiry date.
     * @param value - The expiry value to set; omit to only return the value.
     * @return The current expiry value.
     */
    /*
       * Gets or sets the last expiry date.
       * @param value - The expiry value to set; omit to only return the value.
       * @return The current expiry value.
       */
    /**
     * @param {?=} value
     * @return {?}
     */
    SimpleExpiry.prototype.last = /*
       * Gets or sets the last expiry date.
       * @param value - The expiry value to set; omit to only return the value.
       * @return The current expiry value.
       */
    /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value !== void 0) {
            this.lastValue = value;
        }
        return this.lastValue;
    };
    return SimpleExpiry;
}(IdleExpiry));
/*
 * Represents a simple in-memory store of expiry values.
 * @extends IdleExpiry
 */
export { SimpleExpiry };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SimpleExpiry.prototype.lastValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlZXhwaXJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nLWlkbGUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zaW1wbGVleHBpcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDOzs7OztBQU0xQzs7Ozs7SUFBa0Msd0NBQVU7SUFHMUM7UUFBQSxZQUNFLGlCQUFPLFNBQ1I7UUFKTyxlQUFTLEdBQVMsSUFBSSxDQUFDOztJQUkvQixDQUFDO0lBRUQ7Ozs7T0FJRzs7Ozs7Ozs7OztJQUNILDJCQUFJOzs7Ozs7Ozs7SUFBSixVQUFLLEtBQVk7UUFDZixJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztTQUN4QjtRQUVELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQUFDLEFBbkJELENBQWtDLFVBQVUsR0FtQjNDOzs7Ozs7Ozs7OztJQWxCQyxpQ0FBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJZGxlRXhwaXJ5IH0gZnJvbSAnLi9pZGxlZXhwaXJ5JztcblxuLypcbiAqIFJlcHJlc2VudHMgYSBzaW1wbGUgaW4tbWVtb3J5IHN0b3JlIG9mIGV4cGlyeSB2YWx1ZXMuXG4gKiBAZXh0ZW5kcyBJZGxlRXhwaXJ5XG4gKi9cbmV4cG9ydCBjbGFzcyBTaW1wbGVFeHBpcnkgZXh0ZW5kcyBJZGxlRXhwaXJ5IHtcbiAgcHJpdmF0ZSBsYXN0VmFsdWU6IERhdGUgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKlxuICAgKiBHZXRzIG9yIHNldHMgdGhlIGxhc3QgZXhwaXJ5IGRhdGUuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSBleHBpcnkgdmFsdWUgdG8gc2V0OyBvbWl0IHRvIG9ubHkgcmV0dXJuIHRoZSB2YWx1ZS5cbiAgICogQHJldHVybiBUaGUgY3VycmVudCBleHBpcnkgdmFsdWUuXG4gICAqL1xuICBsYXN0KHZhbHVlPzogRGF0ZSk6IERhdGUge1xuICAgIGlmICh2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLmxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxhc3RWYWx1ZTtcbiAgfVxufVxuIl19